<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>(1)ECMAScript介绍</title>
    <url>/blog/ecmascript/1/</url>
    <content><![CDATA[<hr>
<h3 id="ECMAScript相关介绍"><a href="#ECMAScript相关介绍" class="headerlink" title="ECMAScript相关介绍"></a>ECMAScript相关介绍</h3><blockquote>
<p>ECMA</p>
</blockquote>
<p>ECMA全称European Computer Manufacturers Association, ECMA中文名为欧洲计算机制造商协会, 这个组织的目标是评估、开发和认可电信和计算机标准, 1994年后该组织该改为Ecma国际。</p>
<blockquote>
<p>ECMAScript</p>
</blockquote>
<p>ECMAScript是由Ecma国际通过ECMA-262标准化的脚本程序设计语言。它是一种标准, 而平时经常编写的JavaScript是ECMAScript的一种<code>实现</code>, 所以ECMAScript新特性其实指的是JavaScript的新特性。</p>
<blockquote>
<p>ECMA-262</p>
</blockquote>
<p>Ecma国际制定了许多标准：<a href="https://www.ecma-international.org/publications-and-standards/standards/">全部标准</a>。</p>
<p>而ECMA-262只是其中一个：<a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-262/">ECMA-262</a>。<a href="https://262.ecma-international.org/12.0/">ECMA-262在线文档</a></p>
<blockquote>
<p>ECMA-262历史</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">版本</th>
<th align="center">年份</th>
<th>变化</th>
</tr>
</thead>
<tbody><tr>
<td align="center">第1版</td>
<td align="center">1997年</td>
<td>制定了语言的基本语法</td>
</tr>
<tr>
<td align="center">第2版</td>
<td align="center">1998年</td>
<td>较小改动</td>
</tr>
<tr>
<td align="center">第3版</td>
<td align="center">1999年</td>
<td>引入正则、异常处理、格式化输出等。IE开始支持</td>
</tr>
<tr>
<td align="center">第4版</td>
<td align="center">2007年</td>
<td>过于激进, 未发布</td>
</tr>
<tr>
<td align="center">第5版</td>
<td align="center">2009年</td>
<td>引入严格模式、JSON, 扩展对象、数组、原型、字符串、日期方法</td>
</tr>
<tr>
<td align="center">第6版</td>
<td align="center">2015年</td>
<td>模块化、面向对象语法、Promise、箭头函数、let、const、数组解构赋值</td>
</tr>
<tr>
<td align="center">第7版</td>
<td align="center">2016年</td>
<td>幂运算符、数组拓展、Async&#x2F;await关键字</td>
</tr>
<tr>
<td align="center">第8版</td>
<td align="center">2017年</td>
<td>Async&#x2F;await关键字拓展</td>
</tr>
<tr>
<td align="center">第9版</td>
<td align="center">2018年</td>
<td>对象解构赋值、正则扩展</td>
</tr>
<tr>
<td align="center">第10版</td>
<td align="center">2019年</td>
<td>拓展对象、数组方法</td>
</tr>
<tr>
<td align="center">第11版</td>
<td align="center">2020年</td>
<td>…</td>
</tr>
</tbody></table>
<blockquote>
<p>ES6-ES11</p>
</blockquote>
<p>我们平时说的ES6、ES11说的就是ECMAScript, 后面的数字表示ECMAScript规范的版本, 每个版本它都会有一些新的特性。</p>
<blockquote>
<p>谁在维护ECMA-262</p>
</blockquote>
<p>TC39(Technical Committee 39)是推进ECMAScript发展的委员会, 其会员都是公司(其中主要是浏览器厂商、有苹果、谷歌、微软、因特尔等)。TC39定期召开会议, 会议由会员公司的代表与特邀专家出席。</p>
<blockquote>
<p>为什么要学习ES6</p>
</blockquote>
<p>从时间上看这是时间跨度最大的一个版本, ES6版本的变动内容最多, 具有里程碑意义。它加入了许多新的语法特性, 编程实现更简单高效。同时也是前端的发展趋势, 就业必备技能。</p>
<blockquote>
<p>ES6的兼容性</p>
</blockquote>
<p>归根到底, ECMAScript只是一个标准, 这个标准只是停留在纸面上的一个规范, 它需要每一个浏览器厂商, 对这个标准做一个实现, 浏览器才能支持ECMAScript标准中的特性。但是每一个浏览器的发展状况不一样, 所以就导致有的浏览器支持的特性比较多(chrome、Firefox…), 而有的浏览器支持的比较少的现象(IE拿出来鞭尸), 所以这里存在一个兼容性的问题。</p>
<p><a href="https://kangax.github.io/compat-table/es6/">查看兼容性</a></p>
<p>兼容性解决方案：Babel语言编译器, 将ES6及以上的代码编译成ES5, 让绝大部分浏览器都支持。</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=1">源：https://www.bilibili.com/video/BV1uK411H7on?p=1</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(10)Symbol</title>
    <url>/blog/ecmascript/10/</url>
    <content><![CDATA[<hr>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>ES6引入了一种新的数据类型, Symbol, 表示独一无二的值, 它是JavaScript语言的第七种数据类型, 是一种类似于字符串的数据类型。</p>
<p><strong>Symbol的特点</strong>。</p>
<ol>
<li>Symbol的值是唯一的, 用来解决命名冲突的问题。</li>
<li>Symbol值不能与其他数据进行运算。</li>
<li>Symbol定义的对象属性不能使用for…in循环遍历, 但是可以使用Reflect.ownKeys来获取对象所有键名。</li>
</ol>
<p><strong>创建Symbol</strong>。</p>
<blockquote>
<p>方式一：通过Symbol()函数创建</p>
</blockquote>
<p>创建Symbol数据类型的数据, 可以通过Symbol()函数创建。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="title class_">Symbol</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s, <span class="keyword">typeof</span> s) </span><br><span class="line">  <span class="comment">// Symbol() &quot;symbol&quot;</span></span><br><span class="line">  <span class="comment">// 在这里它的唯一性, 是没有体现的, 它在内部自己进行了处理。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>还可以为创建的Symbol, 添加描述字符串。它可以方便我们通过描述字符串。更好的理解定义的值的作用。可以理解为注释。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;left-top&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;疑是银河落九天&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s1)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><code>唯一性</code>：</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s4 === s5) <span class="comment">// --&gt; false</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>Symbol.for()</p>
</blockquote>
<p>使用Symbol.for()创建。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span>  a1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a1, <span class="keyword">typeof</span> a1) </span><br><span class="line">  <span class="comment">// Symbol(张三) &quot;symbol&quot;</span></span><br><span class="line">  <span class="comment">// 看起来和用Symbol()函数创建的没什么不同</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>唯一性</code>：</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span>  a1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span>  a2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a1 === a2) <span class="comment">// --&gt; true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<blockquote>
<p>Symbol的注意事项</p>
</blockquote>
<p>不能和其他数据进行运算。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> s = <span class="title class_">Symbol</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> result = s + <span class="number">100</span>    <span class="comment">// --&gt; 报错</span></span><br><span class="line">      result = s &gt; <span class="number">100</span>    <span class="comment">// --&gt; 报错</span></span><br><span class="line">      result = s + <span class="string">&#x27;100&#x27;</span>  <span class="comment">// --&gt; 报错</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>回顾JS的数据类型</p>
</blockquote>
<p>USONB</p>
<p>U: Undefined<br>S：String Symbol<br>O：Object<br>N：Null Number<br>B：Boolean</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=15">源：https://www.bilibili.com/video/BV1uK411H7on?p=15</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(11)Symbol的使用</title>
    <url>/blog/ecmascript/11/</url>
    <content><![CDATA[<hr>
<h3 id="Symbol的使用"><a href="#Symbol的使用" class="headerlink" title="Symbol的使用"></a>Symbol的使用</h3><p>Symbol的使用场景, 一般就是给对象添加属性和方法。表示独一无二的。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 给game对象, 添加up down相关的方法</span></span><br><span class="line">  <span class="keyword">let</span> game = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;魂斗罗&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>事实上, 给自定义对象添加方法时, 我们常用的是下面的方式。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> game = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;魂斗罗&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  game.<span class="property">up</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向上走&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>但是, 如果game不是我们自定义的, 且相对复杂, 在没有对其清楚了解的情况下, 对它是否已经存在了up或者down方法了, 像上例那样做, 就会存在风险了。可能导致原对象中的方法被覆盖。这时我们可以借用Symbol来完成这个事情。</p>
<p><strong>方式一</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> game = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;魂斗罗&quot;</span>,</span><br><span class="line">    <span class="title function_">up</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向上走&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">down</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向下走&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> methods = &#123;</span><br><span class="line">    <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">    <span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  game[methods.<span class="property">up</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以往上走&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  game[methods.<span class="property">down</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以往下走&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>方式二</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> youxi = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以发言&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;zibao&#x27;</span>)]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以自爆&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="Symbol的内置值"><a href="#Symbol的内置值" class="headerlink" title="Symbol的内置值"></a>Symbol的内置值</h3><p>除了定义自己使用的Symbol值以外, ES6还提供了11个内置的Symbol值, 指向语言内部使用的方法。</p>
<table>
<thead>
<tr>
<th>属性&#x2F;方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Symbol.hasInstance</td>
<td>当其他对象使用instanceof运算符, 判断是否为该对象的实例时, 会调用这个方法。</td>
</tr>
<tr>
<td>Symbol.isConcatSpreadable</td>
<td>对象的Symbol.isConcatSpreadable属性等于的是一个布尔值, 表示该对象用于Array.prototype.concat()时, 是否可以展开。</td>
</tr>
<tr>
<td>Symbol.unscopables</td>
<td>该对象指定了使用with关键字时, 哪些属性会被with环境排除。</td>
</tr>
<tr>
<td>Symbol.match</td>
<td>当执行str.match(myObject)时, 如果该属性存在, 会调用它, 返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.replace</td>
<td>当该对象被str.replace(myObject)方法调用时, 会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.search</td>
<td>当该对象被str.search(myObject)方法调用时, 会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.split</td>
<td>当该对象被str.split(myObject)方法调用时, 返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.iterator</td>
<td>对象进行for…of循环时, 会调用Symbol.iterator方法, 返回该对象的默认遍历器。</td>
</tr>
<tr>
<td>Symbol.toPrimitive</td>
<td>该对象被转为原始类型的值时, 会调用这个方法, 返回该对象对应的原始类型值。</td>
</tr>
<tr>
<td>Symbol.toStringTag</td>
<td>在该对象上面调用toString方法时, 返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.species</td>
<td>创建衍生对象时, 会使用该属性。</td>
</tr>
</tbody></table>
<p><strong>内置的Symbol值</strong>：指Symbol的属性, 它将作为对象的属性而存在, 我们可以通过对他们的设置, 可以改变对象在特定场景下的表现结果。</p>
<p><strong>Symbol.hasInstance</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](param)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人在做类型检测, 我被触发了。&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;检测类型时还会将对象传入:&quot;</span>, param)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// return true/false可以自定。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj是否为Person类型对象:&quot;</span>,obj <span class="keyword">instanceof</span> <span class="title class_">Person</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>Symbol.isConcatSpreadable</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  <span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这里使用concat正常合并&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">concat</span>(arr2))</span><br><span class="line">  </span><br><span class="line">  arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;将arr2的Symbol.isConcatSpreadable设置为false(不可展开), 那么arr2就只能作为一个整体与arr1合并。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">concat</span>(arr2))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=16">源：https://www.bilibili.com/video/BV1uK411H7on?p=16</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(12)迭代器介绍及工作原理</title>
    <url>/blog/ecmascript/12/</url>
    <content><![CDATA[<hr>
<h3 id="迭代器介绍"><a href="#迭代器介绍" class="headerlink" title="迭代器介绍"></a>迭代器介绍</h3><p>迭代器(iterator)是一种接口, 为各种不同的数据结构提供统一的访问机制, 任何数据结构只要部署iterator接口, 就可以完成遍历操作。</p>
<p><strong>1.ES6创造了一种新的遍历命令for…of循环, iterator接口主要提供for…of消费</strong><br><strong>2.原生具备iterator接口的数据(可用for…of遍历)</strong></p>
<ol>
<li>Array</li>
<li>Arguments</li>
<li>Set</li>
<li>Map</li>
<li>String</li>
<li>TypeArray</li>
<li>NodeList</li>
</ol>
<p>在JS中所说的iterator接口指的就是对象的一个属性。这个属性的名字叫Symbol.iterator。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 声明一个数组</span></span><br><span class="line">  <span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用for...of来遍历, 得到键值</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> xiyou)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">    <span class="comment">// --&gt; 唐僧</span></span><br><span class="line">    <span class="comment">// --&gt; 孙悟空</span></span><br><span class="line">    <span class="comment">// --&gt; 猪八戒</span></span><br><span class="line">    <span class="comment">// --&gt; 沙僧</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 它和for...in的区别就是, 得到索引</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">in</span> xiyou)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">    <span class="comment">// --&gt; 0</span></span><br><span class="line">    <span class="comment">// --&gt; 1</span></span><br><span class="line">    <span class="comment">// --&gt; 2</span></span><br><span class="line">    <span class="comment">// --&gt; 3</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>a.<code>数组能够使用for...of遍历, 是只要这个对象(xiyou)里面有Symbol的iterator属性就可以使用for...of</code>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xiyou)</span><br><span class="line">  <span class="comment">// 在打印的数组中是没有Symbol的iterator属性的。</span></span><br><span class="line">  <span class="comment">// 要点开__proto__, 查看它的原型对象。</span></span><br><span class="line">  <span class="comment">// 可以看到Symbol(Symbol.iterator): f value()</span></span><br><span class="line">  <span class="comment">// 它对应的值是一个函数</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>那它为什么能够实现迭代？</p>
<hr>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><blockquote>
<p>创建一个指针对象, 指向当前数据结构的起始位置</p>
</blockquote>
<p>Symbol(Symbol.iterator)这个函数会创建并返回一个对象, 它会指向当前数据结构的最开始的位置。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建一个变量来接收, Symbol.iterator创建并返回的对象。</span></span><br><span class="line">  <span class="keyword">const</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>第一次调用对象的next方法, 指针自动指向数据结构的第一个成员。</p>
</blockquote>
<p>第一次调用对象的next方法, 哪儿来的next方法呢,就是返回的对象身上有一个next方法。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator)</span><br><span class="line">  <span class="comment">// 展开打印的数据, 查看__proto__原型对象</span></span><br><span class="line">  <span class="comment">// 里面有一个next方法。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>当调用next方法时, 指针自动指向数据结构的第一个成员。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">  <span class="comment">// 调用返回的对象的next方法,指向数据结构的第一个成员</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line">  <span class="comment">// &#123;value: &quot;唐僧&quot;, done:false&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>接下来不断调用next方法</p>
</blockquote>
<p>指针一直往后移动, 直到指向最后一个成员。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">// &#123;value: &quot;唐僧&quot;, done:false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">// &#123;value: &quot;孙悟空&quot;, done:false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">// &#123;value: &quot;猪八戒&quot;, done:false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">// &#123;value: &quot;沙僧&quot;, done:false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">// &#123;value: undefined, done:true&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>每调用next方法返回一个包含value和done属性的对象</p>
</blockquote>
<p>都得到了形如：{value: “唐僧”, done:false}的对象, 它的value值就是数据结构的成员, 而done状态表示, 当前遍历是否已经完成。</p>
<p>注：需要自定义遍历数据的时候, 要想到迭代器。</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=18">源：https://www.bilibili.com/video/BV1uK411H7on?p=18</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(13)迭代器应用</title>
    <url>/blog/ecmascript/13/</url>
    <content><![CDATA[<hr>
<h3 id="迭代器应用"><a href="#迭代器应用" class="headerlink" title="迭代器应用"></a>迭代器应用</h3><p>迭代器主要用于自定义遍历数据, 按照自己的意愿去遍历数据。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> banji = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">    <span class="attr">stus</span>: [</span><br><span class="line">      <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaoning&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaotian&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dazhuang&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//遍历这个对象。</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> banji)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v) <span class="comment">// 报错, banji无法迭代</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>虽然banji.stus.forEach()…也能达到遍历效果, 但这不符合面向对象的思想。因为这里在直接操作banji对象中的成员。  </p>
<p>通过上一节我们知道, 使用for…in得索引, 使用for…of得到值。我们的需求是遍历对象, 得到banji中stus中的成员。  所以我们就要使用for…of。</p>
<blockquote>
<p>第一步</p>
</blockquote>
<p>先给这个对象添加一个iterator接口(方法)</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> banji = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">    <span class="attr">stus</span>: [</span><br><span class="line">      <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaoning&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaotian&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dazhuang&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> banji)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v) </span><br><span class="line">    <span class="comment">// 报错, Symbol.iterator is not an object</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>这里报错了, 在上一节迭代器的工作原理中我们知道, 迭代器应该返回一个对象。</p>
<blockquote>
<p>第二步</p>
</blockquote>
<p>那就再返回一个对象</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> banji = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">    <span class="attr">stus</span>: [</span><br><span class="line">      <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaoning&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaotian&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dazhuang&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> banji)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v) </span><br><span class="line">    <span class="comment">// 报错, undefined is not a function</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>在上一节迭代器的工作原理中我们还知道, 迭代器应该的对象中。应该有一个next方法。</p>
<blockquote>
<p>第三步</p>
</blockquote>
<p>那就再添加一个next方法</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> banji = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">    <span class="attr">stus</span>: [</span><br><span class="line">      <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaoning&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaotian&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dazhuang&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> banji)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v) </span><br><span class="line">    <span class="comment">// 报错, iterator result undefined is not an object</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>报错说是, next方法返回的不是一个对象。在上一节迭代器的工作原理的最后一条, 调用next方法应该返回一个包含value和done属性的对象。</p>
<blockquote>
<p>第四步(注意：别运行此段代码)</p>
</blockquote>
<p><code>注意：别运行此段代码</code>。</p>
<pre><code>&lt;script&gt;
  // 那就再next中返回一个包含value和done属性的对象
  const banji = &#123;
    name: &quot;终极一班&quot;,
    stus: [
      &quot;xiaoming&quot;,
      &quot;xiaoning&quot;,
      &quot;xiaotian&quot;,
      &quot;dazhuang&quot;
    ],
    [Symbol.iterator]()&#123;
      return &#123;
        next: function()&#123;
          return &#123;value:&quot;abc&quot;, done: false&#125;
        &#125;
      &#125;
    &#125;
  &#125;
  
  for(let v of banji)&#123;
    console.log(v) 
    // 无限循环输出abc, 因为done我们是手动写死为false的。
    // 所以无法退出循环。
  &#125;
&lt;/script&gt;
</code></pre>
<p>没有报错, 但是无限循环了, 我们需要对next返回的结果进行处理, 不能将done写死为false, 我们需要在stus最后一个成员获取到后, 将done设置为true, 表示遍历完成了。</p>
<blockquote>
<p>第五步</p>
</blockquote>
<p>处理无限循环的问题。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> banji = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">    <span class="attr">stus</span>: [</span><br><span class="line">      <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaoning&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xiaotian&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dazhuang&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">      <span class="comment">// 声明一个索引变量</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="comment">// 声明一个变量保存当前对象的this</span></span><br><span class="line">      _this = <span class="variable language_">this</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> result =  &#123;<span class="attr">value</span>: _this.<span class="property">stus</span>[index], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">            index++</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> banji)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v) </span><br><span class="line">    <span class="comment">// xiaoming</span></span><br><span class="line">    <span class="comment">// xiaoning</span></span><br><span class="line">    <span class="comment">// xiaotian</span></span><br><span class="line">    <span class="comment">// dazhuang</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>这样我们就按照自己的意愿遍历了banji这个对象。</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=19">源：https://www.bilibili.com/video/BV1uK411H7on?p=19</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(14)生成器函数的声明与调用</title>
    <url>/blog/ecmascript/14/</url>
    <content><![CDATA[<hr>
<h3 id="生成器函数的声明与调用"><a href="#生成器函数的声明与调用" class="headerlink" title="生成器函数的声明与调用"></a>生成器函数的声明与调用</h3><p>生成器其实就是一个特殊的函数。它的作用就是进行异步编程。之前异步编程我们的方式, 是使用纯回调函数。</p>
<p>生成器就是异步编程的一种解决方案, 避免回调地狱。</p>
<blockquote>
<p>生成器函数</p>
</blockquote>
<p><strong>特殊一：声明方式</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>声明生成器函数, 要在function和函数名的中间加一个星号(*), 当然它的位置没有规定, 星号可以偏左、偏右、中间都行, 只有中间有星号就行。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span>* <span class="title function_">gen1</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> *<span class="title function_">gen2</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen3</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>特殊二：执行</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello generator&quot;</span>) <span class="comment">// 未执行</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator) <span class="comment">// 返回了一个迭代器对象</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>它的返回结果, 不像以前, 写完代码, 可以立即输出console.log(“hello generator”)。它是返回了一个迭代器对象, 可以调next方法。那要怎么才能执行生成器中的代码呢？我们可以借助迭代器对象中的next方法去执行。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello generator&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello es&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  iterator.<span class="title function_">next</span>() </span><br><span class="line">  <span class="comment">// hello generator</span></span><br><span class="line">  <span class="comment">// hello es</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>特殊三：在生成器函数中可以使用yield语句</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// yield 后面可以跟一个表达式或者字面量</span></span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;两只黄鹂鸣翠柳&quot;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;一行白鹭上青天&quot;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;窗含西岭千秋雪&quot;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;门泊东吴万里船&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>这个yield可以算作是函数代码的分隔符。它把函数代码切分成几块。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// yield 后面可以跟一个表达式或者字面量</span></span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>)  <span class="comment">// 第一个yield之前的代码块</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;两只黄鹂鸣翠柳&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>) <span class="comment">// yield之间的代码块2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;一行白鹭上青天&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>) <span class="comment">// yield之间的代码块3</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;窗含西岭千秋雪&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>) <span class="comment">// 最后一个yield到函数结束的代码</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  iterator.<span class="title function_">next</span>() <span class="comment">// 1 ---&gt;对应代码块---第一个yield之前的代码块</span></span><br><span class="line">  iterator.<span class="title function_">next</span>() <span class="comment">// 2 ---&gt;对应代码块---yield之间的代码块2</span></span><br><span class="line">  iterator.<span class="title function_">next</span>() <span class="comment">// 3 ---&gt;对应代码块---yield之间的代码块3</span></span><br><span class="line">  iterator.<span class="title function_">next</span>() <span class="comment">// 4 ---&gt;最后一个yield到函数结束的代码</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>加了yield分割, 就不会像前面调用next那样, 将生成器中的所有代码全部都执行了, 而是调一次next, 只会执行一个代码块中的语句。</p>
<p>既然iterator是一个迭代器, 我们可以用for…of做一个遍历。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// yield 后面可以跟一个表达式或者字面量</span></span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>)  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;两只黄鹂鸣翠柳&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;一行白鹭上青天&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;窗含西岭千秋雪&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> iterator)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>也许这不太直观, 我们直接输出next的返回值。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// yield 后面可以跟一个表达式或者字面量</span></span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>)  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;两只黄鹂鸣翠柳&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;一行白鹭上青天&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;窗含西岭千秋雪&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>注意了, 这里next返回的是yield后面跟着的表达式计算的结果或字面量。</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=20">源：https://www.bilibili.com/video/BV1uK411H7on?p=20</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(15)生成器函数的参数传递</title>
    <url>/blog/ecmascript/15/</url>
    <content><![CDATA[<hr>
<h3 id="生成器函数的参数传递"><a href="#生成器函数的参数传递" class="headerlink" title="生成器函数的参数传递"></a>生成器函数的参数传递</h3><blockquote>
<p>上节回顾</p>
</blockquote>
<p>获取迭代器对象</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">333</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取迭代器对象</span></span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">// &#123;value: 111, done: false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">// &#123;value: 222, done: false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">// &#123;value: 333, done: false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>通过获取生成函数返回的迭代器对象, 执行yield分割的代码块。</p>
<blockquote>
<p>生成器函数传值</p>
</blockquote>
<p>生成器函数传值</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">333</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 直接向生成器函数传递参数</span></span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&quot;hello generator&quot;</span>) </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) </span><br><span class="line">  <span class="comment">//  hello generator</span></span><br><span class="line">  <span class="comment">// &#123;value: 111, done: false&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>向next函数传值</p>
</blockquote>
<p>定义一个变量去接收, 第一个yield 111返回的结果。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">    <span class="keyword">let</span> y1 = <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(y1)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">333</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&quot;hello generator&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;注意了, 如let y1 = yield 111这样的写法, yield的分割功能依然有效。第一次调用next方法, 也并不会执行console.log(y1)&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>在第二次调用next时, 向next方法传递一个实参。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">    <span class="keyword">let</span> y1 = <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(y1)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">333</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&quot;hello generator&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;第二次调用next时, 向里面传递一个实参&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;bbb&quot;</span>)) <span class="comment">// 传参</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>发现第一次let y1 &#x3D; yield 111, 得到的返回结果发生了变化。输出的yi变成了bbb, <code>它改变了上一次next时yield的返回结果</code>。</p>
<hr>
<h3 id="生成器函数实例1"><a href="#生成器函数实例1" class="headerlink" title="生成器函数实例1"></a>生成器函数实例1</h3><p>需求：1秒后输出111, 然后2秒后输出222, 然后3秒后输出333。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 以前的回调地狱</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>)</span><br><span class="line">      &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>如还需要新的异步任务, 那这里面的嵌套会让人眼花缭乱。使用生成器函数来解决这个问题。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 定义三个函数去执行这些异步任务</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">twe</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义生成器函数</span></span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">one</span>()</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">twe</span>()</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">three</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取生成器函数返回的迭代器</span></span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  <span class="comment">// 通过调用迭代器的next方法, 去执行函数。</span></span><br><span class="line">  iterator.<span class="title function_">next</span>() <span class="comment">// --&gt; 111</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>但是！, 它不会执行第二个yield, 还需要调用next函数。难道我们还需要写一个iterator.next()？有几个yield就需要在下面写几次吗？<br>这种情况, 完全可以在第一个函数执行完毕后去处理。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">      iterator.<span class="title function_">next</span>() <span class="comment">// 异步函数执行完毕后, 去调用next方法。</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">twe</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">      iterator.<span class="title function_">next</span>() <span class="comment">// 异步函数执行完毕后, 去调用next方法。</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>)</span><br><span class="line">      iterator.<span class="title function_">next</span>() <span class="comment">// 异步函数执行完毕后, 去调用next方法。</span></span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">one</span>()</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">twe</span>()</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">three</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  iterator.<span class="title function_">next</span>() </span><br><span class="line">  <span class="comment">// --&gt; 111</span></span><br><span class="line">  <span class="comment">// --&gt; 222</span></span><br><span class="line">  <span class="comment">// --&gt; 333</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>这样最终, 我们完成了三个异步任务的功能, 而不必再去看眼花缭乱的回调地狱。</p>
<hr>
<h3 id="生成器函数实例2"><a href="#生成器函数实例2" class="headerlink" title="生成器函数实例2"></a>生成器函数实例2</h3><p>需求：模拟获取用户数据, 订单数据, 商品数据。<br>注意：要先获取用户数据, 在根据用户获取对应的订单, 再根据订单获取相应的商品数据。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getUses</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = <span class="string">&quot;用户数据&quot;</span></span><br><span class="line">      iterator.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getOrders</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = <span class="string">&quot;订单数据&quot;</span></span><br><span class="line">      iterator.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getGoods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = <span class="string">&quot;商品数据&quot;</span></span><br><span class="line">      iterator.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">yield</span> <span class="title function_">getUses</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(users)</span><br><span class="line">    <span class="keyword">let</span> orders = <span class="keyword">yield</span> <span class="title function_">getOrders</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(orders)</span><br><span class="line">    <span class="keyword">let</span> goods = <span class="keyword">yield</span> <span class="title function_">getGoods</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(goods)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  iterator.<span class="title function_">next</span>() </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>事实上, 看gen生成器函数中的写法, 就和同步写法是一样的了。而实际上它是异步的。</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=21">源：https://www.bilibili.com/video/BV1uK411H7on?p=21</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(16)Promise介绍</title>
    <url>/blog/ecmascript/16/</url>
    <content><![CDATA[<hr>
<h3 id="Promise介绍"><a href="#Promise介绍" class="headerlink" title="Promise介绍"></a>Promise介绍</h3><p>Promise是ES6引入的异步编程的新解决方案, 语法上Promise是 一个构造函数。用来封装异步操作并可以获取其成功或失败的结果。</p>
<p>1.Promise构造函数：Promise(excutor){}<br>2.Promise.prototype.then 方法<br>3.Promise.prototype.catch 方法</p>
<blockquote>
<p>实例化Promise对象</p>
</blockquote>
<p>1.实例化Promise对象时, 它接收一个函数作为参数。<br>2.这个函数里面接受2个参数, resolve和reject, 这个resolve和reject的名字, 可以随便写, 比如a, b也行, 但默认情况下, 我们都用resolve和reject</p>
<pre><code>&lt;script&gt;
  const p = new Promise(function(resolve, reject)&#123;
    
  &#125;)
&lt;/script&gt;
</code></pre>
<blockquote>
<p>封装一个异步操作</p>
</blockquote>
<p>1.使用定时器模拟异步操作。1秒后获取到了用户数据。<br>2.然后可以通过resolve或reject方法改变, 这个Promise对象p的状态。resolve()表示成功, reject()表示失败。<br>3.一旦Promise对象p的状态发生改变。就可以调用它的then方法。<br>这个then方法, 也能接收两个函数作为它的参数。<br>第一个函数将在p的状态变为成功时执行。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = <span class="string">&quot;用户数据&quot;</span></span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">      <span class="comment">// 改变这个Promise对象p的状态为成功。</span></span><br><span class="line">      <span class="comment">// 并传入获取到的数据</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// --&gt; 用户数据</span></span><br><span class="line">  &#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>第二个函数将在p的状态变为失败时执行。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> err = <span class="string">&quot;网络错误&quot;</span></span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">      <span class="comment">// 改变这个Promise对象p的状态为失败。</span></span><br><span class="line">      <span class="comment">// 并传入报错提示</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">  &#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason) <span class="comment">// --&gt; 网络错误</span></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>综合以下这种网络异步请求时的写法。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> success = <span class="literal">true</span> <span class="comment">// 设置异步操作成功</span></span><br><span class="line">      <span class="keyword">if</span>(success)&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&quot;用户数据&quot;</span></span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> err = <span class="string">&quot;网络错误&quot;</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">  &#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=24">源：https://www.bilibili.com/video/BV1uK411H7on?p=24</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(17)Promise封装</title>
    <url>/blog/ecmascript/17/</url>
    <content><![CDATA[<hr>
<h3 id="Promise封装读取文件"><a href="#Promise封装读取文件" class="headerlink" title="Promise封装读取文件"></a>Promise封装读取文件</h3><p><strong>原始读取方式</strong></p>
<pre><code>// 引入fs模块
const fs = require(&quot;fs&quot;)

// 调用方法读取文件
fs.readFile(&quot;./resources/为学.md&quot;, (err, data) =&gt; &#123;
  // 如果错误, 则抛出错误
  if(err) throw err;
  // 如果没有出错, 则输出内容
  console.log(data.toString())
&#125;)
</code></pre>
<p><strong>使用Promise方式</strong></p>
<pre><code>// 引入fs模块
const fs = require(&quot;fs&quot;)

// 使用Promise封装
const p = new Promise(function(resolve, reject)&#123;
  fs.readFile(&quot;./resources/为学.md&quot;, (err, data) =&gt; &#123;
    // 如果错误
    if(err) reject(err);
    // 如果成功
    resolve(data)
  &#125;)
&#125;)
p.then(function(value)&#123;
  console.log(value.toString())
&#125;, function(reason)&#123;
  console.log(&quot;读取失败&quot;, reason)
&#125;)
</code></pre>
<p>单个的异步任务看不出, 使用Promise的好处, 当异步任务数量太多时, 使用Promise会更加方便友好。</p>
<hr>
<h3 id="Promise封装ajax"><a href="#Promise封装ajax" class="headerlink" title="Promise封装ajax"></a>Promise封装ajax</h3><p><strong>原生的ajax</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 1.创建对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.初始化</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3.发送</span></span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 4.绑定事件, 处理相应结果</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">      <span class="comment">//判断相应状态码：根据具体接口规则</span></span><br><span class="line">      <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">        <span class="comment">// 一般200-299之间表示成功。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功数据：&quot;</span>, xhr.<span class="property">response</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果失败</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;错误信息：&quot;</span>, xhr.<span class="property">status</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>使用Promise进行封装</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// Promise封装网络请求</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">          <span class="title function_">resolve</span>([<span class="string">&quot;成功数据：&quot;</span>, xhr.<span class="property">response</span>])</span><br><span class="line">          </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="title function_">reject</span>([<span class="string">&quot;错误信息：&quot;</span>, xhr.<span class="property">status</span>])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 将页面数据处理的流程分离出来。</span></span><br><span class="line">  <span class="comment">// 这比将数据处理的语句, 混淆在网络请求中更清晰。</span></span><br><span class="line">  p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="Promise-prototype-then方法"><a href="#Promise-prototype-then方法" class="headerlink" title="Promise.prototype.then方法"></a>Promise.prototype.then方法</h3><p>前面已经知道, 使用Promise, 在调用then方法时, 第一个函数是resolve()时执行的, 第二个函数是reject()时执行的。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;用户数据&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">10</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// --&gt; 用户数据</span></span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>通过下面的例子发现, then方法的返回结果也是一个Promise对象。展开看到有一个PromiseStatus的状态为resolve。  </p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;用户数据&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">10</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> result = p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// --&gt; 用户数据</span></span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">  <span class="comment">// then方法的返回结果也是一个Promise对象</span></span><br><span class="line">  <span class="comment">// [[PromiseStatus]]:resolve</span></span><br><span class="line">  <span class="comment">// [[PromiseValue]]:undefined</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>PromiseStatus的状态, 是由回调函数的执行结果来决定</strong></p>
<p>1.如果回调函数中返回的结果, 是一个非Promise类型的数据, 状态为即成功resolve。result这个对象的PromiseValue就是return的非Promise值。</p>
<pre><code>const p = new Promise((resolve, reject) =&gt; &#123;
  setTimeout(() =&gt; &#123;
    resolve(&quot;用户数据&quot;)
  &#125;, 1000)
&#125;)
let result = p.then(function(value)&#123;
  console.log(value) // --&gt; 用户数据
  return &quot;123&quot;  ─────────────────────┐
&#125;, function(reason)&#123;                 |
  console.log(reason)                |
&#125;)                                   |
                                     |
console.log(result)                  |
// [[PromiseStatus]]:resolve  &lt;──────┤
// [[PromiseValue]]:123 &lt;────────────┘
</code></pre>
<p>2.如果回调函数中返回的结果, 是一个Promise类型的数据。</p>
<pre><code>const p = new Promise((resolve, reject) =&gt; &#123;
  setTimeout(() =&gt; &#123;
    resolve(&quot;用户数据&quot;)
  &#125;, 1000)
&#125;)
let result = p.then(function(value)&#123;
                 └──────────────────┐
  // return 返回的Promise状态, 决定了then方法返回的状态。
                    └─────────────────────────┐
  return new Promise((resolve, reject) =&gt; &#123;   |
    resolve(&quot;OK&quot;) &lt;───────────────────────────┤ 
  &#125;)                                          |
&#125;, function(reason)&#123;                          |
  console.log(reason)                         | 
&#125;)                                            |
                                              |
console.log(result)                           |
// [[PromiseStatus]]:resolve  &lt;───────────────┤
// [[PromiseValue]]:OK &lt;──────────────────────┘
</code></pre>
<p>.</p>
<pre><code>const p = new Promise((resolve, reject) =&gt; &#123;
  setTimeout(() =&gt; &#123;
    resolve(&quot;用户数据&quot;)
  &#125;, 1000)
&#125;)
let result = p.then(function(value)&#123;
                 └──────────────────┐
  // return 返回的Promise状态, 决定了then方法返回的状态。
                    └─────────────────────────┐
  return new Promise((resolve, reject) =&gt; &#123;   |
    reject(&quot;error&quot;) &lt;─────────────────────────┤ 
  &#125;)                                          |
&#125;, function(reason)&#123;                          |
  console.log(reason)                         | 
&#125;)                                            |
                                              |
console.log(result)                           |
// [[PromiseStatus]]:rejected  &lt;──────────────┤
// [[PromiseValue]]:error &lt;───────────────────┘
</code></pre>
<p>3.如果主动抛出错误</p>
<pre><code>const p = new Promise((resolve, reject) =&gt; &#123;
  setTimeout(() =&gt; &#123;
    resolve(&quot;用户数据&quot;)
  &#125;, 1000)
&#125;)
let result = p.then(function(value)&#123;
                 └─────────┐
  // 主动抛出错误, 也会改变then方法返回的状态。
                           └──────────────────┐
    throw new Error(&quot;出错了！&quot;) &lt;──────────────┤ 
&#125;, function(reason)&#123;                          |
  console.log(reason)                         | 
&#125;)                                            |
                                              |
console.log(result)                           |
// [[PromiseStatus]]:rejected  &lt;──────────────┤
// [[PromiseValue]]: 出错了！  &lt;───────────────┘
</code></pre>
<p><strong>链式调用</strong>。</p>
<pre><code>const p = new Promise((resolve, reject) =&gt; &#123;
  setTimeout(() =&gt; &#123;
    resolve(&quot;用户数据&quot;)
  &#125;, 1000)
&#125;)
p.then(function(value)&#123;
  return new Promise((resolve, reject) =&gt; &#123;
    ...新的异步操作
    resolve()
  &#125;)
&#125;).then(function(value)&#123;
  
&#125;)
</code></pre>
<hr>
<h3 id="Promise多个文件读取"><a href="#Promise多个文件读取" class="headerlink" title="Promise多个文件读取"></a>Promise多个文件读取</h3><p><strong>原始的方式</strong></p>
<pre><code>const fs = require(&quot;fs&quot;)

fs.readFile(&quot;./resources/为学.md&quot;, (err, data1) =&gt; &#123;
  fs.readFile(&quot;./resources/插秧诗.md&quot;, (err, data2) =&gt; &#123;
    fs.readFile(&quot;./resources/观书有感.md&quot;, (err, data3) =&gt; &#123;
      let result = data1 + &quot;\r\n&quot; + data2 + &quot;\r\n&quot; + data3
      console.log(result)
    &#125;)
  &#125;)
&#125;)
</code></pre>
<p><strong>Promise的方式</strong></p>
<pre><code>const fs = require(&quot;fs&quot;)

const p = new Promise((resolve, reject) =&gt; &#123;
  fs.readFile(&quot;./resources/为学.md&quot;, (err, data) =&gt; &#123;
    resolve(data)
  &#125;)
&#125;)
p.then(value =&gt; &#123;
  return new Promise((resolve, reject) =&gt; &#123;
    fs.readFile(&quot;./resources/插秧诗.md&quot;, (err, data) =&gt; &#123;
      resolve([value, data])
    &#125;)
  &#125;)
&#125;).then(value =&gt; &#123;
  return new Promise((resolve, reject) =&gt; &#123;
    fs.readFile(&quot;./resources/观书有感.md&quot;, (err, data) =&gt; &#123;
      value.push(data)
      resolve(value)
    &#125;)
  &#125;)
&#125;).then(value =&gt; &#123;
  console.log(value.join(&quot;\r\n&quot;))
&#125;)
</code></pre>
<hr>
<h3 id="Promise对象catch方法"><a href="#Promise对象catch方法" class="headerlink" title="Promise对象catch方法"></a>Promise对象catch方法</h3><p><strong>指定Promise对象回调失败的回调</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 设置p对象的状态为失败</span></span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;出错了&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">10</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;&#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason) <span class="comment">// --&gt; 出错了</span></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>通过catch方法</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 设置p对象的状态为失败</span></span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;出错了&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">10</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  p.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason) <span class="comment">// --&gt; 出错了</span></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=25">源：https://www.bilibili.com/video/BV1uK411H7on?p=25</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(18)集合介绍与API</title>
    <url>/blog/ecmascript/18/</url>
    <content><![CDATA[<hr>
<h3 id="集合介绍与API"><a href="#集合介绍与API" class="headerlink" title="集合介绍与API"></a>集合介绍与API</h3><p>ES6提供了新的数据结构Set(集合), 它类似于数组, 但成员的值都是唯一的, 集合实现了iterator接口, 所以可以使用[扩展运算符]和[for…of]进行遍历, 集合的属性和方法。</p>
<table>
<thead>
<tr>
<th>属性&#x2F;方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>size</td>
<td>返回集合的元素个数</td>
</tr>
<tr>
<td>add</td>
<td>增加一个新元素, 返回当前集合</td>
</tr>
<tr>
<td>delete</td>
<td>删除元素, 返回boolean值</td>
</tr>
<tr>
<td>has</td>
<td>检测集合中是否包含某个元素, 返回boolean值</td>
</tr>
<tr>
<td>clear</td>
<td>清空集合</td>
</tr>
</tbody></table>
<p><strong>声明一个set</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s, <span class="keyword">typeof</span> s)</span><br><span class="line">  <span class="comment">// Set(0)&#123;&#125; &quot;object&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>传入初始参数</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;zhou&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;zheng&quot;</span>, <span class="string">&quot;wang&quot;</span>])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">  <span class="comment">// Set(4)&#123;&quot;zhou&quot;, &quot;wu&quot;, &quot;zheng&quot;, &quot;wang&quot;&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>size元素的个数</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;zhou&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;zheng&quot;</span>, <span class="string">&quot;wang&quot;</span>])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>) <span class="comment">// 4</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>add添加新的元素</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;zhou&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;zheng&quot;</span>, <span class="string">&quot;wang&quot;</span>])</span><br><span class="line">  s.<span class="title function_">add</span>(<span class="string">&quot;liu&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">  <span class="comment">// Set(5)&#123;&quot;zhou&quot;, &quot;wu&quot;, &quot;zheng&quot;, &quot;wang&quot;, &quot;liu&quot;&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>delete删除元素</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;zhou&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;zheng&quot;</span>, <span class="string">&quot;wang&quot;</span>])</span><br><span class="line">  s.<span class="title function_">delete</span>(<span class="string">&quot;wu&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">  <span class="comment">// Set(3)&#123;&quot;zhou&quot;, &quot;zheng&quot;, &quot;wang&quot;&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>has检测是否存在某元素</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;zhou&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;zheng&quot;</span>, <span class="string">&quot;wang&quot;</span>])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="string">&quot;wu&quot;</span>))</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>clear清空集合</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;zhou&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;zheng&quot;</span>, <span class="string">&quot;wang&quot;</span>])</span><br><span class="line">  s.<span class="title function_">clear</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">  <span class="comment">// Set(0)&#123;&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>for…of遍历集合</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;zhou&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;zheng&quot;</span>, <span class="string">&quot;wang&quot;</span>])</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">    <span class="comment">// zhou</span></span><br><span class="line">    <span class="comment">// wu</span></span><br><span class="line">    <span class="comment">// zheng</span></span><br><span class="line">    <span class="comment">// wang</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="集合实践"><a href="#集合实践" class="headerlink" title="集合实践"></a>集合实践</h3><p><strong>数组去掉重复数据</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 声明一个集合将arr数组传入, 可以去掉重复数据。</span></span><br><span class="line">  <span class="keyword">let</span> result1 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr)</span><br><span class="line">  <span class="comment">// 但得到的result1是一个集合, 不是数组。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result1) </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用拓展运算符, 将其变成数组。</span></span><br><span class="line">  <span class="keyword">let</span> result2 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result2) </span><br><span class="line">  <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>取交集：2个数组都有的</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 先对arr1去重, 再使用filter方法比对。</span></span><br><span class="line">  <span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr1)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 将arr2也变成一个集合, 同时也有去重的效果。</span></span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr2)</span><br><span class="line">    <span class="keyword">if</span>(s2.<span class="title function_">has</span>(item))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 可以简化let result = [...new Set(arr)].filter(item =&gt; new Set(arr2).has(item))</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [4,5]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>取并集：合并2个数组, 去重</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 先合并2个数组</span></span><br><span class="line">  <span class="keyword">let</span> newarr = [...arr1, ...arr2]</span><br><span class="line">  <span class="comment">// 再去重就可以了</span></span><br><span class="line">  <span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(newarr)]</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [1,2,3,4,5,6]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>取差集</strong>, arr1相对arr2的差集：只有arr1有, 而arr2没有的成员。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 对arr1去重, 还原为数组</span></span><br><span class="line">  <span class="keyword">let</span> newarr1 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr1)]</span><br><span class="line">  <span class="comment">// 对arr2去重, 转换为集合</span></span><br><span class="line">  <span class="keyword">let</span> newarr2 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr2)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 对newarr1数组使用filter方法与newarr2每个成员进行比对。</span></span><br><span class="line">  <span class="keyword">let</span> result = newarr1.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !newarr2.<span class="title function_">has</span>(item))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [1,2,3]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>arr2相对arr1的差集：只有arr2有, 而arr1没有的成员。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 对arr1去重, 转换为集合</span></span><br><span class="line">  <span class="keyword">let</span> newarr1 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr1)</span><br><span class="line">  <span class="comment">// 对arr2去重, 还原为数组</span></span><br><span class="line">  <span class="keyword">let</span> newarr2 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr2)]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 对newarr2数组使用filter方法与newarr1每个成员进行比对。</span></span><br><span class="line">  <span class="keyword">let</span> result = newarr2.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !newarr1.<span class="title function_">has</span>(item))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [6]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=30">源：https://www.bilibili.com/video/BV1uK411H7on?p=30</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(19)Map的介绍与API</title>
    <url>/blog/ecmascript/19/</url>
    <content><![CDATA[<hr>
<h3 id="Map的介绍与API"><a href="#Map的介绍与API" class="headerlink" title="Map的介绍与API"></a>Map的介绍与API</h3><table>
<thead>
<tr>
<th>属性&#x2F;方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>size</td>
<td>返回Map的元素个数</td>
</tr>
<tr>
<td>set</td>
<td>增加一个新元素, 返回当前Map</td>
</tr>
<tr>
<td>get</td>
<td>返回键名对象的键值</td>
</tr>
<tr>
<td>has</td>
<td>检测Map中是否包含某个元素, 返回boolean</td>
</tr>
<tr>
<td>clear</td>
<td>清空Map集合, 返回undefined</td>
</tr>
</tbody></table>
<pre><code>&lt;script&gt;
  
&lt;/script&gt;
</code></pre>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=32">源：https://www.bilibili.com/video/BV1uK411H7on?p=32</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(2)let变量声明及声明特性</title>
    <url>/blog/ecmascript/2/</url>
    <content><![CDATA[<hr>
<h3 id="let变量声明及声明特性"><a href="#let变量声明及声明特性" class="headerlink" title="let变量声明及声明特性"></a>let变量声明及声明特性</h3><blockquote>
<p>let声明格式</p>
</blockquote>
<p>let声明格式, 与var关键字差不多。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> a; <span class="comment">// 声明一个</span></span><br><span class="line">  <span class="keyword">let</span> b,c,d; <span class="comment">// 声明多个</span></span><br><span class="line">  <span class="keyword">let</span> e = <span class="number">100</span>, f = <span class="string">&quot;hello&quot;</span>; <span class="comment">// 声明多个, 赋初始值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d,e,f)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>let声明特性</p>
</blockquote>
<p><strong>1.变量不能重复声明, 会报错。</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> vegetable = <span class="string">&quot;土豆&quot;</span>; <span class="comment">// console.log(vegetable)</span></span><br><span class="line">  <span class="keyword">let</span> vegetable = <span class="string">&quot;洋芋&quot;</span></span><br><span class="line">  <span class="comment">// 报错</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2.块级作用域：全局、函数、eval(严格模式)</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 这个块级包括 if、else、while、for等花括号包裹的代码块</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> meat = <span class="string">&quot;beef&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(meat)</span><br><span class="line">  <span class="comment">// 代码块外访问会报错</span></span><br><span class="line">  <span class="comment">// 花括号内let声明的变量只在它内部有效。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3.不存在变量提升</strong></p>
<p>变量提升：在变量用var声明之前访问。不会报错, 而是得到一个undefined。代码在执行之前, 程序会先收集变量, 只是还没赋值。这种情况叫变量提升。但是在变量用let声明之前访问。就不存在变量提升, 而是直接报错。不允许变量在声明之前访问。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name1) <span class="comment">// --&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> name1 = <span class="string">&quot;saner&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// --&gt; 程序报错</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> name = <span class="string">&quot;saner&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>4.不影响作用域链</strong></p>
<p>虽然代码块外部, 不能访问代码块内部的变量, 但它不影响作用域链, 在函数getSchool里访问school变量, 虽然函数的作用域里面, 没有该变量, 但它还是会一层一层向上一级的作用域找。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> school = <span class="string">&quot;四小&quot;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getSchool</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(school)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getSchool</span>() <span class="comment">// --&gt; 四小</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="实践练习"><a href="#实践练习" class="headerlink" title="实践练习"></a>实践练习</h3><figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;.<span class="property">item</span>&#123;<span class="attr">display</span>:inline-block;<span class="attr">border</span>:solid 1px lightblue;<span class="attr">width</span>:80px;<span class="attr">height</span>:30px;user-<span class="attr">select</span>:none;&#125;&lt;/style&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>点击改变颜色<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> items = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;item&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    items[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>正常情况下, 我们都是使用 this.style.background &#x3D; ‘pink’。<br>但是如果使用items[i].style.background &#x3D; ‘pink’, 点击就会报错了。它相当于</p>
<pre><code>&#123;
  var i = 0
&#125;
&#123;
  var i = 1
&#125;
&#123;
  var i = 2
&#125;
</code></pre>
<p>当运行到 i &#x3D; 3时, 条件不符合了, 退出for循环, 而这个i是一直在全局中的, 最后一次对i的赋值, 就是i最终的值。<br>这时 i &#x3D; 3, items[i]就表示, 第四个class为item的div, 但是我们没有四个, 只有3个div, 这时就报错了。</p>
<pre><code>let items = document.getElementsByClassName(&#39;item&#39;)
for(var i = 0; i &lt; items.length; i++)&#123;
  items[i].onclick = function()&#123; //点击报错
    items[i].style.background = &#39;pink&#39;
  &#125;
&#125;
</code></pre>
<p>即使我们对for循环的判断条件做出优化, 使其i &lt; (items.length-1), 最终的i为2, 那点击所有的按钮, 也只有最后一个div有颜色变化, 其他div不会发生变化。</p>
<pre><code>let items = document.getElementsByClassName(&#39;item&#39;)
for(var i = 0; i &lt; items.length - 1; i++)&#123;
  items[i].onclick = function()&#123; //虽然不报错, (点击任意按钮)只有最后一个有效果
    items[i].style.background = &#39;pink&#39;
  &#125;
&#125;
</code></pre>
<p>如果要使用 items[i].style.background &#x3D; ‘pink’的方式, for循环中就不能使用var关键声明 i &#x3D; 0, 可以改成let i &#x3D; 0, 就正常了。</p>
<pre><code>let items = document.getElementsByClassName(&#39;item&#39;)
for(let i = 0; i &lt; items.length; i++)&#123;
  items[i].onclick = function()&#123; //点击正常
    items[i].style.background = &#39;pink&#39;
  &#125;
&#125;
</code></pre>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=3">源：https://www.bilibili.com/video/BV1uK411H7on?p=3</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(3)const声明常量及特点</title>
    <url>/blog/ecmascript/3/</url>
    <content><![CDATA[<hr>
<h3 id="const声明常量及特点"><a href="#const声明常量及特点" class="headerlink" title="const声明常量及特点"></a>const声明常量及特点</h3><p>const用于声明常量, 所谓常量就是值不能修改的量, <strong>const声明格式, 与let和var是一样的</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">NAME</span> = <span class="string">&quot;saner&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">NAME</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>const声明常量的特性。</p>
</blockquote>
<p><strong>1.一定要赋初始值</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">NAME</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">NAME</span>)</span><br><span class="line">  <span class="comment">// 报错, 必须赋初始值</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>2.没有规定, 但一般使用全大写声明(行业潜规则)</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 也不会报错可以使用, 但不符合大多数情况下具体的项目代码规范。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>3.常量的值一旦声明, 不可修改</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">NAME</span> = <span class="string">&quot;saner&quot;</span>;</span><br><span class="line">  <span class="variable constant_">NAME</span> = <span class="string">&quot;xiaosi&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">NAME</span>)</span><br><span class="line">  <span class="comment">// 报错, 不能修改常量的值</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>4.也是块级作用域</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">NAME</span> = <span class="string">&quot;saner&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">NAME</span>)</span><br><span class="line">  <span class="comment">//报错了, 全局打印NAME时, NAME未定义。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>5.对数组和对象元素的修改, 不算对常量的修改。</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;xiaosi&quot;</span>]</span><br><span class="line">  <span class="variable constant_">TEAM</span>.<span class="title function_">push</span>(<span class="string">&quot;wangwu&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">TEAM</span>)</span><br><span class="line">  <span class="comment">// 对数组元素的修改不会报错。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>原理：</strong> 因为常量保存数组和对象并不是一个具体的值, 它保存的只是一个内存地址, 内存地址中才是保存的具体的值, 对数组和对象的元素做出修改时, 它的内存地址并没有发生改变, 改变的只是内存地址中保存的值, 所以不会报错。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;xiaosi&quot;</span>]</span><br><span class="line">  <span class="variable constant_">TEAM</span> = [<span class="string">&quot;wangwu&quot;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">TEAM</span>)</span><br><span class="line">  <span class="comment">// 报错, 这种操作会创建新的空间去存放[&quot;wangwu&quot;]</span></span><br><span class="line">  <span class="comment">// 导致TEAM指向的内存地址变更。</span></span><br><span class="line">  <span class="comment">// 对TEAM来说就是变更值的操作, 所以报错。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=5">源：https://www.bilibili.com/video/BV1uK411H7on?p=5</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(4)变量的解构赋值</title>
    <url>/blog/ecmascript/4/</url>
    <content><![CDATA[<hr>
<h3 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h3><p><strong>解构赋值</strong>：ES6允许按照一定模式从数组和对象中提取值, 对变量进行赋值, 这被称为解构赋值。可以简化代码的书写量。</p>
<p><strong>数组的解构</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">NAMES</span> = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>]</span><br><span class="line">  <span class="keyword">let</span> [zhang, li, wang] = <span class="variable constant_">NAMES</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(zhang, li, wang)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>按照<code>对应的位置</code>对变量进行赋值, 相比之下, 写法比下面的方式简单了许多。当然这种方式用得也不是特别多, 试想当一个数组足够长, 而在定义时也还需要按照对应的位置, 添加足够数量的变量。也是不现实的, 所以我们很少对数组使用解构赋值的方式。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">NAMES</span> = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>]</span><br><span class="line">  <span class="keyword">let</span> zhang = <span class="variable constant_">NAMES</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> li = <span class="variable constant_">NAMES</span>[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> wang = <span class="variable constant_">NAMES</span>[<span class="number">2</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(zhang, li, wang) <span class="comment">// --&gt; 张三 李四 王五</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>对象的解构</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PEOPLE</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&quot;跑步&quot;</span>, <span class="string">&quot;打豆豆&quot;</span>],</span><br><span class="line">    <span class="attr">ability</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;倒退跑步&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> &#123;hobby, height, ability, name, age&#125; = <span class="variable constant_">PEOPLE</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, height, hobby, ability)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><code>注意了</code>。</p>
<p>1.对<code>对象</code>进行解构赋值时, <code>使用花括号</code>。<br>2.注意上例, 声明的变量要和对象中的<code>属性名一致</code>。不一致, 会得出undefined。<br>3.声明时, <code>没有顺序区分</code>！！, 只要属性名一致, 放在什么位置都可以。<br>4.声明时, 不必声明全部的属性, <code>需要什么就声明什么</code>,如 let { height } &#x3D; PEOPLE, 也是可以的。</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=6">源：https://www.bilibili.com/video/BV1uK411H7on?p=6</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(5)模板字符串</title>
    <url>/blog/ecmascript/5/</url>
    <content><![CDATA[<hr>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><blockquote>
<p><strong>&#96;</strong></p>
</blockquote>
<p>ES6引入了新的声明字符串的方式, 就是模板字符串``, 符号是反引号。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">`这也是一个字符串!`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str, <span class="keyword">typeof</span> str)</span><br><span class="line">  <span class="comment">// --&gt; 这也是一个字符串! string</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="模板字符串的特性"><a href="#模板字符串的特性" class="headerlink" title="模板字符串的特性"></a>模板字符串的特性</h3><p><strong>1.内容中可以直接出现换行符</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;列表1&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;列表2&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span></span><br><span class="line">  <span class="comment">// 可以出现换行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>2.直接进行变量拼接${}</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> zhang = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  <span class="keyword">let</span> lisi = <span class="string">&quot;李四&quot;</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;<span class="subst">$&#123;zhang&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;<span class="subst">$&#123;lisi&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span></span><br><span class="line">  <span class="comment">// 可以使用$&#123;&#125;对变量进行拼接</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=7">源：https://www.bilibili.com/video/BV1uK411H7on?p=7</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(6)简化对象写法</title>
    <url>/blog/ecmascript/6/</url>
    <content><![CDATA[<hr>
<h3 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h3><p>ES6允许在大括号里面, 直接写入变量和函数, 作为对象的属性和方法, 这样书写更加简洁。</p>
<p><strong>以前的写法</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  <span class="keyword">let</span> change = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;测试字符串&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 想定义一个对象</span></span><br><span class="line">  <span class="comment">// 而它的name属性和change属性和上面定义的一样。</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PEOPLE</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">change</span>: change</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>简化写法</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  <span class="keyword">let</span> change = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;测试字符串&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PEOPLE</span> = &#123;</span><br><span class="line">    name,  <span class="comment">// 简化写法</span></span><br><span class="line">    change</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p>在对象中定义方法, 也可以简化, 想要在对象中定义一个方法。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  <span class="keyword">let</span> change = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;测试字符串&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PEOPLE</span> = &#123;</span><br><span class="line">    name,</span><br><span class="line">    change,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">// 定义方法</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你吃了么&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>简化写法</strong>。将冒号:和function简化了, 直接使用括号。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  <span class="keyword">let</span> change = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;测试字符串&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PEOPLE</span> = &#123;</span><br><span class="line">    name,</span><br><span class="line">    change,</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123; <span class="comment">// 简化写法</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你吃了么&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=8">源：https://www.bilibili.com/video/BV1uK411H7on?p=8</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(7)箭头函数及声明特点</title>
    <url>/blog/ecmascript/7/</url>
    <content><![CDATA[<hr>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>ES6允许使用箭头<code>=&gt;</code>定义函数。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 以前定义函数</span></span><br><span class="line">  <span class="keyword">let</span> myfn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用箭头定义函数</span></span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">myfn1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;箭头函数&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="箭头函数的特性"><a href="#箭头函数的特性" class="headerlink" title="箭头函数的特性"></a>箭头函数的特性</h3><blockquote>
<p>1.this是静态的</p>
</blockquote>
<p>箭头函数的this始终指向的是, 它被声明时, 所在的作用域下的this值。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 在不同作用域下定义name</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&quot;window-name&quot;</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj-name&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 普通方式定义函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">normalGetName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 箭头定义函数</span></span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">arrowGetName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 直接调用</span></span><br><span class="line">  <span class="title function_">normalGetName</span>() <span class="comment">// --&gt; window-name</span></span><br><span class="line">  <span class="title function_">arrowGetName</span>()  <span class="comment">// --&gt; window-name</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//call 方法调用</span></span><br><span class="line">  normalGetName.<span class="title function_">call</span>(obj) </span><br><span class="line">  <span class="comment">// --&gt; 作用域指向了obj, 所以this.name是obj中的name</span></span><br><span class="line">  </span><br><span class="line">  arrowGetName.<span class="title function_">call</span>(obj)  </span><br><span class="line">  <span class="comment">// --&gt; 仍然是全局作用域window</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>2.不能做为构造函数实例化对象</p>
</blockquote>
<p>不能做为构造函数实例化对象。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;saner&quot;</span>, <span class="number">18</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(me)</span><br><span class="line">  <span class="comment">// 报错Person is not a constructor</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>3.不能使用arguments变量</p>
</blockquote>
<p>不能使用arguments变量。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  <span class="comment">// 报错arguments is not defined</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>4.箭头函数的简写</p>
</blockquote>
<p><strong>情况一</strong>：省略小括号(当形参有且只有一个的时候)。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">n</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n + n</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 简写</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">add1</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n + n</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(add1)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>情况二</strong>：省略花括号(当代码体只有一条语句的时候)此时return也要省略, 直接写函数的返回值。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n * n</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 简写</span></span><br><span class="line">  </span><br><span class="line">  pow = <span class="function"><span class="params">n</span> =&gt;</span> n * n</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pow)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="箭头函数实践"><a href="#箭头函数实践" class="headerlink" title="箭头函数实践"></a>箭头函数实践</h3><blockquote>
<p>需求1：点击div 2秒后颜色变成粉色</p>
</blockquote>
<p><strong>以前的解决方案</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#item&#123;<span class="attr">display</span>:inline-block;<span class="attr">border</span>:solid 1px lightblue;<span class="attr">width</span>:80px;<span class="attr">height</span>:30px;user-<span class="attr">select</span>:none;&#125;&lt;/style&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>点击改变颜色<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> item = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;item&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  item.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> _this = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这个this是window&quot;</span> ,<span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这个_this保存的是上一级的this&quot;</span>, _this)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      _this.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;pink&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">10</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p><strong>使用箭头函数</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#item&#123;<span class="attr">display</span>:inline-block;<span class="attr">border</span>:solid 1px lightblue;<span class="attr">width</span>:80px;<span class="attr">height</span>:30px;user-<span class="attr">select</span>:none;&#125;&lt;/style&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>点击改变颜色<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> item = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;item&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  item.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="string">&quot;箭头函数中的this是声明这个函数时, 所在的作用域&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;pink&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">10</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>需求2：从数组中返回偶数的元素</p>
</blockquote>
<p>从数组中返回偶数的元素。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">25</span>]</span><br><span class="line">  <span class="keyword">const</span> result = arr.<span class="title function_">filter</span>( <span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span> === <span class="number">0</span> )</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>箭头函数适合于this无关的回调, 比如定时器, 数组方法回调等。</p>
<ol>
<li>不适合与this有关的回调, 比如DOM元素的操作事件。</li>
<li>不适合对象方法。(不适合不代表不能)</li>
</ol>
<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=9">源：https://www.bilibili.com/video/BV1uK411H7on?p=9</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(8)函数参数的默认值</title>
    <url>/blog/ecmascript/8/</url>
    <content><![CDATA[<hr>
<h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><p>ES6允许给函数的参数赋值初始值。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)  <span class="comment">// --&gt; 6</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>但是如果只传了一部分值, 就会导致结果为NaN, 给形参赋值初始值。即使不传形参也不会出错。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a = <span class="number">2</span>, b = <span class="number">5</span>, c = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">add</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)  <span class="comment">// --&gt; 17</span></span><br><span class="line">  </span><br><span class="line">  result = <span class="title function_">add</span>(<span class="number">1</span>) </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)  <span class="comment">// --&gt; 16</span></span><br><span class="line">  </span><br><span class="line">  result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)  <span class="comment">// --&gt; 13</span></span><br><span class="line">  </span><br><span class="line">  result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)  <span class="comment">// --&gt; 6</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>注意！！, 具有默认值的形参, 一般位置要靠后</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b = <span class="number">5</span>, c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)  <span class="comment">// --&gt; NaN</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>与解构赋值结合</p>
</blockquote>
<p><strong>常规方式</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> urlbase = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">options</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> host = options.<span class="property">host</span></span><br><span class="line">    <span class="keyword">let</span> username = options.<span class="property">username</span></span><br><span class="line">    <span class="keyword">let</span> password = options.<span class="property">password</span></span><br><span class="line">    <span class="keyword">let</span> port = options.<span class="property">port</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">connect</span>(urlbase)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(connect)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>解构赋值</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> urlbase = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host, username, password, port&#125;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host, username, password, port)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">connect</span>(urlbase)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>解构赋值与初始值</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> urlbase = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host = <span class="string">&quot;127.0.0.1&quot;</span>, username, password, port&#125;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host, username, password, port)</span><br><span class="line">    <span class="comment">// --&gt; 127.0.0.1 root root 3306</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">connect</span>(urlbase)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=11">源：https://www.bilibili.com/video/BV1uK411H7on?p=11</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(9)rest参数和扩展运算符</title>
    <url>/blog/ecmascript/9/</url>
    <content><![CDATA[<hr>
<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>ES6引入了rest参数, 用于获取函数的实参, 用来代替arguments。</p>
<p><strong>ES5获取函数实参的方式</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">date</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;ES5的arguments是一个对象&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">date</span>(<span class="string">&quot;zhang&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="string">&quot;wang&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>ES6的rest参数</strong></p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">date</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;ES6的rest参数是一个数组&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">date</span>(<span class="string">&quot;zhang&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="string">&quot;wang&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>rest参数是数组, 我们就可以使用数组的一些方法。比如filter some every map等。提高了对参数处理的灵活性。</p>
<p><strong>注意</strong>：<code>rest参数必须要放到参数最后</code>。如果放到前面就会出错。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, ...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">  <span class="comment">// 1 2 [3, 4, 5, 6]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><blockquote>
<p>…</p>
</blockquote>
<p>三个点就是扩展运算符, 它能将数组转换为逗号分割的参数序列。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> nameF4 = [<span class="string">&#x27;zhou&#x27;</span>, <span class="string">&#x27;wu&#x27;</span>, <span class="string">&#x27;zheng&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>]</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">division</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot; 参数只有一个, 这个参数是一个数组。&quot;</span>)</span><br><span class="line">  <span class="title function_">division</span>(nameF4)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;参数有4个。相对于division(&#x27;zhou&#x27;, &#x27;wu&#x27;, &#x27;zheng&#x27;, &#x27;wang&#x27;)&quot;</span>)</span><br><span class="line">  <span class="title function_">division</span>(...nameF4)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h3><p><strong>1.数组的合并</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> kuaizi = [<span class="string">&#x27;王太利&#x27;</span>, <span class="string">&#x27;肖央&#x27;</span>]</span><br><span class="line">  <span class="keyword">const</span> fenghuang = [<span class="string">&#x27;曾毅&#x27;</span>, <span class="string">&#x27;玲花&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 以前在ES5可以使用concat将数组合并</span></span><br><span class="line">  <span class="keyword">const</span> cooperation = kuaizi.<span class="title function_">concat</span>(fenghuang)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(cooperation)</span><br><span class="line">  <span class="comment">// [&#x27;王太利&#x27;, &#x27;肖央&#x27;, &#x27;曾毅&#x27;, &#x27;玲花&#x27;]</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用ES6新增的扩展运算符合并数组</span></span><br><span class="line">  <span class="keyword">const</span> newCooperation = [...kuaizi, ...fenghuang]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newCooperation)</span><br><span class="line">  <span class="comment">// [&#x27;王太利&#x27;, &#x27;肖央&#x27;, &#x27;曾毅&#x27;, &#x27;玲花&#x27;]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>2.数组的克隆</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> song = [<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;M&#x27;</span>]</span><br><span class="line">  <span class="keyword">const</span> newSong = [...song]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newSong)</span><br><span class="line">  <span class="comment">// [&#x27;E&#x27;, &#x27;G&#x27;, &#x27;M&#x27;]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>!!<code>注意</code>, 上例的方式拷贝数组, 如果被拷贝的数组里面有引用数据类型的话, 这种拷贝方式是<a href="https://blog.csdn.net/zhang_cherry/article/details/120121145">浅拷贝</a>(引用数据类型只拷贝内存地址)。</p>
<p><strong>3.将伪数组转为真正的数组</strong>。</p>
<figure class="highlight js"><figcaption><span>es</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(divs) <span class="comment">// 可以用数组的方法操作, 但他其实是一个对象。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> divArr = [...divs]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(divArr)  <span class="comment">// 变成一个真正的数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=12">源：https://www.bilibili.com/video/BV1uK411H7on?p=12</a></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(1)git安装</title>
    <url>/blog/git/1/</url>
    <content><![CDATA[<p>Git是一个开源的分布式版本控制系统, 可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发, 而开发的一个开放源码的版本控制软件。</p>
<h3 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h3><p>Git的<a href="https://git-scm.com/">下载地址</a>, 按部就班的安装即可。</p>
<h3 id="TortoiseGit"><a href="#TortoiseGit" class="headerlink" title="TortoiseGit"></a>TortoiseGit</h3><p>Git的使用基本都是在控制台(终端)中, 输入命令操作。TortoiseGit是一款开源的git的版本控制系统, 提供了人性化的图形化界面, 不用像Git一样输入许多语句, 像git init、git add、git commit这些语句就通通不用记了。轻松使用鼠标, 就可以完成代码的提交和上传。对于使用本地Git的新手来说, TortoiseGit更加简便, 更加容易上手。</p>
<p>TortoiseGit的<a href="https://tortoisegit.org/download/">下载地址</a>, TortoiseGit的默认语言是英语, 可以在该下载页的下方找到汉化语言包下载安装。</p>
<hr>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>(1)hexo博客练成</title>
    <url>/blog/hexo/1/</url>
    <content><![CDATA[<hr>
<h2 id="前置软件的安装"><a href="#前置软件的安装" class="headerlink" title="前置软件的安装"></a>前置软件的安装</h2><blockquote>
<p>nodejs安装</p>
</blockquote>
<p>一切的一切都要从nodehjs说起(省略一万字…), hexo项目运行编译依赖于nodejs, 所以先安装nodejs。</p>
<p><a href="https://nodejs.org/en/">nodejs下载地址</a>, <code>注意！</code>, 如果你是重度nodejs使用者, 请先！参照下方的nvm安装。</p>
<blockquote>
<p>nvm安装</p>
</blockquote>
<p>nvm是nodejs版本管理工具, 可以安装多个nodejs版本, 可以随意且方便的切换nodejs版本。</p>
<p><code>如果你没有安装多个nodejs版本的需求, 请跳过nvm的安装步骤, 回到nodejs的安装步骤。</code></p>
<p>nvm下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">github下载地址</a>, 有时候页面可能打不开, 多刷新几次, 或者科学上网。</p>
<p><strong>下载安装说明：</strong></p>
<p>1.在页面的下方找到nvm-setup.zip版本下载安装。</p>
<p>2.安装完成后就可以通过命令行工具安装nodejs了, 为防止安装缓慢或失败, 在安装nodejs之前先做一个配置, 找到C:\Users\Administrator\AppData\Roaming\nvm\settings.txt文件, 并在文本文件中增加这两行配置。</p>
<pre><code>node_mirror: https://npm.taobao.org/mirrors/node/
npm_mirror: https://npm.taobao.org/mirrors/npm/
</code></pre>
<p>3.然后通过命令行工具安装nodejs：nvm install node+版本, 例：</p>
<pre><code>nvm install node12.14.1
</code></pre>
<p>4.nvm常用命令</p>
<pre><code>nvm off                 //禁用node.js版本管理(不卸载任何东西)
nvm on                  //启用node.js版本管理
nvm install &lt;version&gt;   //安装node.js的命名 version是版本号,例如：nvm install 10.15.3
nvm install latest      //安装最新版本node
nvm uninstall &lt;version&gt; //卸载node.js是的命令, 卸载指定版本的nodejs, 当安装失败时卸载使用
nvm list                //显示所有安装的node.js版本
nvm list available      //显示可以安装的所有node.js的版本
nvm use &lt;version&gt;       //切换到使用指定的nodejs版本
</code></pre>
<blockquote>
<p>git安装</p>
</blockquote>
<p>Git是一个开源的分布式版本控制系统, 可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发, 而开发的一个开放源码的版本控制软件。</p>
<p><a href="https://git-scm.com/">Git的下载地址</a>, 按部就班的安装即可。</p>
<blockquote>
<p>TortoiseGit安装</p>
</blockquote>
<p>Git的使用基本都是在控制台(终端)中, 输入命令操作。TortoiseGit是一款开源的git的版本控制系统, 提供了人性化的图形化界面, 不用像Git一样输入许多语句, 像git init、git add、git commit这些语句就通通不用记了。轻松使用鼠标, 就可以完成代码的提交和上传。对于使用本地Git的新手来说, TortoiseGit更加简便, 更加容易上手。</p>
<p><a href="https://tortoisegit.org/download/">TortoiseGit下载地址</a>, TortoiseGit的默认语言是英语, 可以在该下载页的下方找到汉化语言包下载安装。</p>
<blockquote>
<p>hexo cli的安装</p>
</blockquote>
<p>所有必备的应用程序安装完成后, 即可使用 npm 安装 Hexo。npm？对！npm就是附带在nodejs中的一个包管理工具。前面安装nodejs时, 已经同时安装了npm。</p>
<pre><code>npm install -g hexo-cli
</code></pre>
<hr>
<h2 id="hexo博客项目"><a href="#hexo博客项目" class="headerlink" title="hexo博客项目"></a>hexo博客项目</h2><p>在安装了hexo cli以后, 我们就可以创建hexo项目了。以blog博客为例。</p>
<blockquote>
<p>初始化hexo项目</p>
</blockquote>
<p>在个人工作目录(自己平时存放项目的文件夹), 新建文件夹(例：blog), 进入该文件夹, 鼠标右键选择Git Bash here, 输入<code>hexo init</code>, 初始化项目。(这么操作是因为, 我个人在IDE编辑器中初始化时, 多半会因为github很慢的原因创建失败)</p>
<pre><code>├── .github
├── node_modules
├── _config.yml
├── gitignore
├── package.json
├── scaffolds
├── source
|   └── _posts
└── themes
</code></pre>
<p><strong>_config.yml</strong></p>
<p>网站的 配置 信息, 您可以在此配置大部分的参数。<br>但一般情况下, 不直接在_config中修改配置参数。<br>而是创建对应主题的_config文件, 进行配置, 方便后期升级维护等。</p>
<p><strong>package.json</strong></p>
<p>站点的应用程序的信息和依赖。一般不用操作。</p>
<p><strong>scaffolds</strong></p>
<p>模版文件夹。当我们新建文章时, Hexo会根据 scaffold中的模板来建立文件。<br>例如, 如果您修改scaffold&#x2F;post.md中的Front-matter内容,<br>那么每次新建一篇文章时都会包含这个修改。</p>
<p><strong>source</strong></p>
<p>资源文件夹是存放用户资源的地方。<br>除 _posts 文件夹之外,<br>开头命名为 _ (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。<br>Markdown 和 HTML 文件会被解析并放到 public 文件夹,<br>而其他文件会被拷贝过去。</p>
<p><strong>themes</strong></p>
<p>主题文件夹。Hexo 会根据主题来生成静态页面。</p>
<blockquote>
<p>预览与编译</p>
</blockquote>
<p>使用编辑器打开blog项目, 打开编辑器终端, 输入hexo s, 即可预览博客项目。</p>
<p>其他常用指令</p>
<pre><code>hexo s // blog预览
hexo g // 生成, 文件在source文件夹中, 将里面的文件部署到服务器即可。
hexo cl // 清除生成的文件。
</code></pre>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(2)hexo更换主题</title>
    <url>/blog/hexo/2/</url>
    <content><![CDATA[<h2 id="默认主题"><a href="#默认主题" class="headerlink" title="默认主题"></a>默认主题</h2><p>在hexo init初始化完成后, 发现themes文件夹下, 已经有一个主题了, 叫landscape。当然也可以找一些其他的主题替换。</p>
<hr>
<h2 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a>其他主题</h2><p><strong>hexo-theme-butterfly</strong></p>
<p>网上找的一个还挺好看的主题：<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p>
<p><a href="https://butterfly.js.org/">官方展示</a></p>
<p>安装方式一, 在项目文件夹根目录, 打开终端。(有问题)</p>
<pre><code>## npm安装方式, 只支持hexo5.0.0以上版本
npm i hexo-theme-butterfly
## 但是测试安装后, 在themes文件夹下找不到相关主题文件, 我放弃了。
</code></pre>
<p>安装方式二, git克隆下载。在该项目的根目录下打开终端, 使用git下载。</p>
<pre><code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly
## 下载完成后, 可以看到在themes文件夹下, 多了一个butterfly文件夹。这就是新的主题了。
## 克隆github的仓库容易失败, 可以使用gitee的镜像仓库
git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly
</code></pre>
<hr>
<h2 id="主题切换与管理"><a href="#主题切换与管理" class="headerlink" title="主题切换与管理"></a>主题切换与管理</h2><p><strong>主题切换</strong></p>
<p>默认情况下hexo的主题是landscape, 如果需要切换主题, 则修改根目录下的_config.yml文件。</p>
<p>找到theme: landscape, 修改为theme: butterfly</p>
<p><strong>主题管理</strong></p>
<p>正如hexo初始化以后, 根目录下的_config.landscape.yml文件一样。<br>我们不需要直接修改主题文件夹下的_config.yml配置文件。</p>
<p>直接修改主题配置文件, 对于主题的后期升级维护, 并不友好。<br>所以, 当切换了主题后, 我们可以在根目录下创建,<br>新的对应主题配置文件。_config.butterfly.yml,<br>当需要修改配置时, 直接在_config.butterfly.yml修改设置就可以了。<br>尽量不要直接修改主题文件夹下的文件！！</p>
<p><strong>其他问题</strong></p>
<p>测试项目时</p>
<pre><code>hexo s
</code></pre>
<p>报错：extends includes&#x2F;layout.pug block content include .&#x2F;includes&#x2F;mixins&#x2F;post-ui.pug #recent-posts.recent-posts +postUI include includes&#x2F;pagination.pug</p>
<p>因为你在使用butterfly主题时, 没有pug 和 stylus 的解析器, 你需要安装:</p>
<pre><code>## 在项目根目录下
npm install hexo-renderer-pug hexo-renderer-stylus
</code></pre>
<p>再次测试</p>
<pre><code>hexo s
</code></pre>
<p>项目正常运行了</p>
<hr>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>Hexo全局配置_config.yml详解：<a href="https://www.dazhuanlan.com/lhymn/topics/1378049">https://www.dazhuanlan.com/lhymn/topics/1378049</a></p>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(3)butterfly主题设置与优化</title>
    <url>/blog/hexo/3/</url>
    <content><![CDATA[<h2 id="butterfly主题设置与优化"><a href="#butterfly主题设置与优化" class="headerlink" title="butterfly主题设置与优化"></a>butterfly主题设置与优化</h2><p>在项目根目录下, 创建一个_config.butterfly.yml文件(复制_config.landscape.yml, 修改文件名即可)</p>
<p><strong>_config.butterfly.yml</strong>, <code>注意修改配置文件需要重启服务才能看到效果</code>, hexo s</p>
<pre><code>menu:
  首页: / || fas fa-home
  目录||fa-fw fas fa-compass:
    归档: /archives/ || fas fa-archive
    标签: /tags/ || fas fa-tags
    分类: /categories/ || fas fa-folder-open
  列表||fas fa-list:
    音乐: /music/ || fas fa-music
    视频: /movies/ || fas fa-video
  链接: /link/ || fas fa-link
  关于: /about/ || fas fa-heart
  ...
</code></pre>
<p><a href="https://butterfly.js.org/posts/4aa8abbe/">查看主题文档配置</a></p>
<hr>
<h2 id="menu页面配置"><a href="#menu页面配置" class="headerlink" title="menu页面配置"></a>menu页面配置</h2><p><strong>标签: &#x2F;tags&#x2F; || fas fa-tags</strong></p>
<pre><code>tags-&gt;index.md
&lt;!-- 在source文件夹下创建tags文件夹 --&gt;
&lt;!-- 并在该文件夹下新建一个index.md文件, 内容如下： --&gt;

---
title: 标签
type: &quot;tags&quot;
---
</code></pre>
<p><strong>分类: &#x2F;categories&#x2F; || fas fa-folder-open</strong><br>categories分类页面。</p>
<pre><code>categories-&gt;index.md
&lt;!-- 在source文件夹下创建categories文件夹 --&gt;
&lt;!-- 并在该文件夹下新建一个index.md文件, 内容如下： --&gt;

---
title: 分类
type: &quot;categories&quot;
---
</code></pre>
<hr>
<p><strong>音乐.视频.链接.关于…..</strong></p>
<p>其他页面需创建页面, 自己书写结构和样式。</p>
<p>如：音乐: &#x2F;music&#x2F; || fas fa-music</p>
<pre><code>music-&gt;index.md
&lt;!-- 在source文件夹下创建music文件夹 --&gt;
&lt;!-- 并在该文件夹下新建一个index.md文件, 内容如下： --&gt;

---
title: 音乐
---

&lt;!-- 我的音乐 --&gt;

&lt;!-- .....本页结构样式.... --&gt;
</code></pre>
<p>在source文件夹下创建什么文件,<br>是由, 音乐: &#x2F;music&#x2F; || fas fa-music配置的路径决定的(<code>||后面是配置的图标</code>)。</p>
<p>如果它是：&#x2F;nav&#x2F;list&#x2F;links&#x2F;</p>
<p>那么页面就会去, source文件夹下的nav文件夹下, 找list文件夹下, 找links文件夹下, 找index.md文件。</p>
<p>其他自定义页面都可以根据这个情况自行创建。</p>
<p>具体请参照<a href="https://butterfly.js.org/posts/4073eda/">butterfly进阶教程</a></p>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(4)music页面详细配置</title>
    <url>/blog/hexo/4/</url>
    <content><![CDATA[<h2 id="music页面详细配置"><a href="#music页面详细配置" class="headerlink" title="music页面详细配置"></a>music页面详细配置</h2><p>懒得搬了：直接查看gihub中hexo-tag-aplayer的说明文档<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</a></p>
<hr>
<h2 id="CDN方式使用"><a href="#CDN方式使用" class="headerlink" title="CDN方式使用"></a>CDN方式使用</h2><p>配来配去太麻烦了, 直接引入js用吧, 直接在music文件夹下的index页面中。meting-js中的id, 需要自己去netease(网易云音乐)、tencent, kugou, xiami, baidu等。。自己创建曲目播放列表, 复制播放列表的ID替换即可。</p>
<pre><code>## 网易云音乐

&lt;!-- require APlayer --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;
&lt;!-- require MetingJS --&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;&gt;&lt;/script&gt;

&lt;!-- id：song id / playlist id / album id / search keyword --&gt;
&lt;!-- server：网易云音乐netease、tencent, kugou, xiami, baidu --&gt;
&lt;!-- type：song, playlist, album, search, artist --&gt;

&lt;meting-js
    server=&quot;netease&quot;
    type=&quot;playlist&quot;
    id=&quot;7313912744&quot;&gt;
&lt;/meting-js&gt;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(1)关于跨域</title>
    <url>/blog/html/1/</url>
    <content><![CDATA[<p><code>前端解决跨域问题总结</code></p>
<h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>原理：动态生成script标签, 通过src属性加载。<br>缺点：不支持POST<br>应用场景：某些第三方数据接口欧可能会使用jsonp解决跨域问题。如获取天气数据。</p>
<h3 id="中间服务器代理"><a href="#中间服务器代理" class="headerlink" title="中间服务器代理"></a>中间服务器代理</h3><p>前端不直接通过跨域接口获取数据, 而是通过一个中间服务器, 去访问数据接口, 前端再通过中间服务器来获取数据。(服务器获取时不存在跨域, 跨域是前端浏览器造成的问题。)</p>
<h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><p>存在跨域时, 在服务器端的数据接口进行配置, 加一个响应头, 这也是工作中最常用的跨域解决方案。<br>Access-Control-Allow-Origin配置为*</p>
<h3 id="vue反向代理配置"><a href="#vue反向代理配置" class="headerlink" title="vue反向代理配置"></a>vue反向代理配置</h3><p>vue.config.js</p>
<pre><code>module.exports = &#123;
  devServer: &#123;
    //设置代理
    proxy: &#123;
      &#39;/api&#39;: &#123; // /api开头的接口都会开启代理。
        target: &#39;http:......&#39;, // 跨域：跨到哪里去？
        changeOrigin: true, // 开启代理, 本地会创建一个虚拟服务器, 请求跨域数据, 并接收数据。
        ws: true, //是否启用websockets
        pathRewrite: &#123;
          &#39;^/api&#39;: &#39;&#39;
        &#125;
      &#125;
    &#125;
  &#125;
&#125;

//   /api/login
//   http:....../login
</code></pre>
<p>修改配置文件需要重启, 生效。！！！</p>
<hr>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>(1)markdown</title>
    <url>/blog/markdown/1/</url>
    <content><![CDATA[<p>Markdown 是一种轻量级标记语言, 它允许人们使用易读易写的纯文本格式编写文档。<br>Markdown 语言在 2004 由约翰·格鲁伯(英语：John Gruber)创建。<br>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br>Markdown 编写的文档后缀为 .md, .markdown。</p>
<hr>
<h2 id="Markdown应用"><a href="#Markdown应用" class="headerlink" title="Markdown应用"></a>Markdown应用</h2><p>Markdown 能被使用来撰写电子书, 如：Gitbook。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap、SourceForge等。</p>
<hr>
<h2 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h2><p>Markdown 标题有两种格式。</p>
<h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>使用 &#x3D; 和 - 标记一级和二级标题, 语法格式如下。</p>
<pre><code>我展示的是一级标题
=================

我展示的是二级标题
-----------------
</code></pre>
<p><code>效果：</code></p>
<h1 id="我展示的是一级标题"><a href="#我展示的是一级标题" class="headerlink" title="我展示的是一级标题"></a>我展示的是一级标题</h1><h2 id="我展示的是二级标题"><a href="#我展示的是二级标题" class="headerlink" title="我展示的是二级标题"></a>我展示的是二级标题</h2><hr>
<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>使用 # 号标记,# 号可表示 1-6 级标题, 一级标题对应一个 # 号, 二级标题对应两个 # 号, 以此类推。</p>
<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
</code></pre>
<p><code>效果：</code></p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr>
<h2 id="Markdown段落"><a href="#Markdown段落" class="headerlink" title="Markdown段落"></a>Markdown段落</h2><pre><code>段落文本  &lt;--段落的换行, 末尾添加两个空格加上回车
段落文本
</code></pre>
<p>或者</p>
<pre><code>段落文本
           &lt;--或者直接使用空行来进行段落换行
段落文本
</code></pre>
<p><code>效果：</code>上一排末尾加空格, 或者中间用空行, 来达到换行效果。</p>
<p>段落文本<br>段落文本</p>
<hr>
<h2 id="Markdown字体"><a href="#Markdown字体" class="headerlink" title="Markdown字体"></a>Markdown字体</h2><pre><code>*斜体文本*
_斜体文本_
**粗体文本**
__粗体文本__
***粗斜体文本***
___粗斜体文本___
</code></pre>
<p><code>效果：</code></p>
<p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p>
<hr>
<h2 id="Markdown分割线"><a href="#Markdown分割线" class="headerlink" title="Markdown分割线"></a>Markdown分割线</h2><pre><code>***
* * *
*****
- - -
----------
</code></pre>
<p><code>效果：</code></p>
<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="Markdown删除线"><a href="#Markdown删除线" class="headerlink" title="Markdown删除线"></a>Markdown删除线</h2><pre><code>~~中间删除线~~
&lt;u&gt;带下划线的文本&lt;/u&gt;
</code></pre>
<p><code>效果：</code></p>
<p><del>中间删除线</del><br><u>带下划线的文本</u></p>
<hr>
<h2 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h2><p>Markdown 支持有序列表和无序列表。无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记, 这些标记后面要添加一个空格, 然后再填写内容：</p>
<pre><code>* 第一项
* 第二项

+ 第一项
+ 第二项

- 第一项
- 第二项
</code></pre>
<p><code>效果：</code></p>
<ul>
<li>第一项</li>
<li>第二项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
</ul>
<hr>
<p>有序列表使用数字并加上 . 号来表示, 也需要在.后面加一个空格, 再填写内容, 如：</p>
<pre><code>1. 第一项
2. 第二项
3. 第三项
</code></pre>
<p><code>效果：</code></p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<hr>
<p><strong>列表嵌套</strong><br>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p>
<pre><code>1. 第一项：
    - 第一项嵌套的第一个元素
    - 第一项嵌套的第二个元素
2. 第二项：
    - 第二项嵌套的第一个元素
    - 第二项嵌套的第二个元素
</code></pre>
<p><code>效果：</code></p>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<hr>
<h2 id="Markdown区块"><a href="#Markdown区块" class="headerlink" title="Markdown区块"></a>Markdown区块</h2><p>Markdown 区块引用是在段落开头使用 &gt; 符号 , 然后后面紧跟一个空格符号：</p>
<pre><code>&gt; 最外层
&gt; &gt; 第一层嵌套
&gt; &gt; &gt; 第二层嵌套
</code></pre>
<p><code>效果：</code></p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<hr>
<h2 id="Markdown代码"><a href="#Markdown代码" class="headerlink" title="Markdown代码"></a>Markdown代码</h2><p>如果段落中, 某一个函数片段代码, 可以用反引号(`)将其包裹。例如：</p>
<pre><code>例句：使用函数方法`increment(num)`可以得到, 增量后的结果。
</code></pre>
<p><code>效果：</code></p>
<p>例句：使用函数方法<code>increment(num)</code>可以得到, 增量后的结果。</p>
<hr>
<h2 id="Markdown代码区块"><a href="#Markdown代码区块" class="headerlink" title="Markdown代码区块"></a>Markdown代码区块</h2><p>代码区块使用 4 个空格或者一个制表符(Tab 键)。如：</p>
<pre><code>    var age = 18
# 上面这一行的前面, 有四个空格。
# 它将作为代码区块显示在页面, 
# 而不会作为代码, 在这里运行。
</code></pre>
<p><code>效果：</code></p>
<pre><code>var age = 18
</code></pre>
<hr>
<p><strong>围栏代码块</strong>, 你也可以用 ``` 包裹一段代码, 并指定一种语言(也可以不指定)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    console.log(&#x27;blog&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p><code>效果：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;blog&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/markdown/md-link.html">未完待续</a></p>
<hr>
<style>
  .plaintext .highlight-tools {
    display:none!important;
  }
</style>]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>(1)javascript基本语法</title>
    <url>/blog/javascript/1/</url>
    <content><![CDATA[<hr>
<p>js中严格区分大小写。js中每一条语句以(;)结尾。虽然不用分号结尾js也可以运行, 是因为编译器在编译时会自动加上(;)。所以不加(;)会消耗浏览器资源, 降低运行效率。甚至可能加错分号, 使程序出错且不易排查。js中会忽略多个空格和换行, 多用于美化排版。</p>
<h3 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h3><p><strong>字面量</strong>：都是一些不可改变的值, 比如1就是1, 不会变成2。字面量都是可以直接使用的。但是一般我们都不会直接使用字面量, 比如多个地方要使用同一个字面量时, 可能引起不便。如下, 就难以记忆, 也不易阅读。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2152152456521452</span>);</span><br><span class="line">  <span class="comment">// 2152152456521452就是字面量</span></span><br><span class="line">  <span class="comment">// 是用于表达源代码中一个固定值的表示法</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>变量</strong>：变量就可以用来保存字面量。更加方便使用。使用变量需要声明, 使用var来声明, 使用时就方便了许多。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2152152456521452</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="comment">// 使用var来声明一个变量</span></span><br><span class="line">  <span class="comment">// 这个变量可以用来保存字面量</span></span><br><span class="line">  <span class="comment">// 对字面量的使用更加方便</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>在声明变量名时, 我们通常使用<strong>有语义的变量名</strong>。如下, 声明一个变量, 名为age, 就可以很明确的表达此变量表示的是年龄。即通过变量名对字面量进行描述</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">  <span class="comment">// 除此之外, 使用有语义的变量名</span></span><br><span class="line">  <span class="comment">// 让语句更具有可读性</span></span><br><span class="line">  <span class="comment">// 字面量18是没有意义的</span></span><br><span class="line">  <span class="comment">// 但是语义化的变量名可以让我们知道18表示年龄</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(11)转换为Boolean</title>
    <url>/blog/javascript/11/</url>
    <content><![CDATA[<hr>
<h3 id="转换为Boolean"><a href="#转换为Boolean" class="headerlink" title="转换为Boolean"></a>转换为Boolean</h3><p>将其他的数据类型转换为Boolean, 只有一种方法就是使用Boolean()函数。</p>
<h3 id="Number转换"><a href="#Number转换" class="headerlink" title="Number转换"></a>Number转换</h3><p>Number转Boolean。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------true-----------&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(正数) = &quot;</span> + a);</span><br><span class="line">  a = -<span class="number">123</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(负数) = &quot;</span> + a);</span><br><span class="line">  a = -<span class="number">123.12</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(小数) = &quot;</span> + a);</span><br><span class="line">  a = <span class="title class_">Infinity</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(Infinity) = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------false-----------&quot;</span>)</span><br><span class="line">  a = <span class="number">0</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(0) = &quot;</span> + a);</span><br><span class="line">  a = <span class="title class_">NaN</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(NaN) = &quot;</span> + a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="String转换"><a href="#String转换" class="headerlink" title="String转换"></a>String转换</h3><p>String转Boolean。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------true-----------&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(字符串) = &quot;</span> + a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot; &quot;</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(有空格的空串) = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------false-----------&quot;</span>)</span><br><span class="line">  a = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(空串) = &quot;</span> + a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="Null、Undefined转换"><a href="#Null、Undefined转换" class="headerlink" title="Null、Undefined转换"></a>Null、Undefined转换</h3><p>Null和Undefined转Boolean。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------null-----------&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">  a = <span class="title class_">Boolean</span>(a); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------undefined-----------&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> b = <span class="literal">undefined</span>;</span><br><span class="line">  b = <span class="title class_">Boolean</span>(b); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------object-----------&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line">  c = <span class="title class_">Boolean</span>(c); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>对象也会转换为true</strong>。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(10)强制类型转换Number</title>
    <url>/blog/javascript/10/</url>
    <content><![CDATA[<hr>
<h3 id="将String转换为Number"><a href="#将String转换为Number" class="headerlink" title="将String转换为Number"></a>将String转换为Number</h3><p>方式一：Number()</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  a = <span class="title class_">Number</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全数字a=&quot;</span> + a + <span class="string">&quot; ：typeof(a)=&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line">  b = <span class="title class_">Number</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有字母b=&quot;</span> + b + <span class="string">&quot; ：typeof(b)=&quot;</span> + <span class="keyword">typeof</span> b);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> c = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  c = <span class="title class_">Number</span>(c);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;空串c=&quot;</span> + c + <span class="string">&quot; ：typeof(c)=&quot;</span> + <span class="keyword">typeof</span> c);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="将String转换为Number-1"><a href="#将String转换为Number-1" class="headerlink" title="将String转换为Number"></a>将String转换为Number</h3><p>方式二：parseInt()。专门用来处理字符串, parseInt()获得有效的整数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;123px&quot;</span>;</span><br><span class="line">  a = <span class="built_in">parseInt</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;字母在后面a=&quot;</span> + a + <span class="string">&quot; ：typeof(a)=&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;456abc789&quot;</span>;</span><br><span class="line">  <span class="comment">// 遇到字母就停止解析</span></span><br><span class="line">  b = <span class="built_in">parseInt</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;字母在中间b=&quot;</span> + b + <span class="string">&quot; ：typeof(b)=&quot;</span> + <span class="keyword">typeof</span> b);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> c = <span class="string">&quot;a123&quot;</span>;</span><br><span class="line">  <span class="comment">// 第一个就是字母</span></span><br><span class="line">  c = <span class="built_in">parseInt</span>(c);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;字母在前面c=&quot;</span> + c + <span class="string">&quot; ：typeof(c)=&quot;</span> + <span class="keyword">typeof</span> c);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="将String转换为Number-2"><a href="#将String转换为Number-2" class="headerlink" title="将String转换为Number"></a>将String转换为Number</h3><p>方式三：parseFloat()。也是专门用来处理字符串, parseFloat()获得有效的小数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;123.234px&quot;</span>;</span><br><span class="line">  a = <span class="built_in">parseFloat</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有效小数a=&quot;</span> + a + <span class="string">&quot; ：typeof(a)=&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;456.123.234abc&quot;</span>;  </span><br><span class="line">  b = <span class="built_in">parseFloat</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有效小数b=&quot;</span> + b + <span class="string">&quot; ：typeof(b)=&quot;</span> + <span class="keyword">typeof</span> b);</span><br><span class="line">  <span class="comment">// 不符合小数规范就停止解析</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="Boolean转换"><a href="#Boolean转换" class="headerlink" title="Boolean转换"></a>Boolean转换</h3><p>将Boolean转换为Number。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------Number()-----------&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> a=<span class="literal">true</span>;</span><br><span class="line">  a = <span class="title class_">Number</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(true)=&quot;</span> + a + <span class="string">&quot; ：typeof(a)=&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">  </span><br><span class="line">  a=<span class="literal">false</span>;</span><br><span class="line">  a = <span class="title class_">Number</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(false)=&quot;</span> + a + <span class="string">&quot; ：typeof(a)=&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;----------parseInt()---------&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> b = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  b = <span class="built_in">parseInt</span>(b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b(true)=&quot;</span> + b + <span class="string">&quot; ：typeof(b)=&quot;</span> + <span class="keyword">typeof</span> b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// parseInt()是专门用来处理字符串的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在处理非String数据类型时</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 会先将其转换为String, 再进行解析处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;----------parseInt(float)---------&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> c = <span class="number">24.999</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  c = <span class="built_in">parseInt</span>(c); </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c(float)=&quot;</span> + c + <span class="string">&quot; ：typeof(c)=&quot;</span> + <span class="keyword">typeof</span> c);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// parseInt()对浮点数进行处理时</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 不是四舍五入,而是直接丢弃掉小数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="Null、Undefined转换"><a href="#Null、Undefined转换" class="headerlink" title="Null、Undefined转换"></a>Null、Undefined转换</h3><p>将Null和Undefined数据类型转换为Number。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------Number(null)-----------&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">  a = <span class="title class_">Number</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a(null)=&quot;</span> + a + <span class="string">&quot; ：typeof(a)=&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;---------Number(undefined)-----------&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> b = <span class="literal">undefined</span>;</span><br><span class="line">  b = <span class="title class_">Number</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b(undefined)=&quot;</span> + b + <span class="string">&quot; ：typeof(b)=&quot;</span> + <span class="keyword">typeof</span> b);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(12)其他进制的数字</title>
    <url>/blog/javascript/12/</url>
    <content><![CDATA[<hr>
<h3 id="其他进制的数字"><a href="#其他进制的数字" class="headerlink" title="其他进制的数字"></a>其他进制的数字</h3><p>除了我们熟悉的十进制的数字, 还有<code>二进制、八进制、以及十六进制</code>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;十进制----------&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;十进制的a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;十六进制, 以0x 开头----------输出发现十六进制的a, 会被转换成十进制进行输出。&quot;</span>)</span><br><span class="line">  a = <span class="number">0x10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;十六进制的a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;二进制, 以0b 开头----------这种方式用的比较少, 且各浏览器的兼容性也不好, 不是所有浏览器都支持, 不支持的浏览器会报错, 支持的浏览器也会将其转换为十进制输出&quot;</span>)</span><br><span class="line">  a = <span class="number">0b10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;二进制的a = &quot;</span> + a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>八进制</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;八进制, 以0开头----------一定要注意我们在定义一个数值类型的数据时, 开头不要有0, 否则会被当成八进制。八进制在输出时, 也会被转换成十进制进行输出&quot;</span>)</span><br><span class="line">  a = <span class="number">010</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;八进制的a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;parseInt解析八进制的问题----------在某些浏览器我们能够得到10, 但某些浏览器会得出8, 所有有时候我们需要按制定的进制进行解析&quot;</span>)</span><br><span class="line">  a = <span class="string">&quot;010&quot;</span>;</span><br><span class="line">  a = <span class="built_in">parseInt</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;parseInt按十进制解析&quot;</span>)</span><br><span class="line">  a = <span class="string">&quot;010&quot;</span>;</span><br><span class="line">  a = <span class="built_in">parseInt</span>(a,<span class="number">10</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;parseInt按八进制解析&quot;</span>)</span><br><span class="line">  a = <span class="string">&quot;010&quot;</span>;</span><br><span class="line">  a = <span class="built_in">parseInt</span>(a,<span class="number">8</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(14)一元运算符</title>
    <url>/blog/javascript/14/</url>
    <content><![CDATA[<hr>
<h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p>只需要一个值的运算符, 称为一元运算符。</p>
<p>正号：+ , 正号不会对数值产生任何影响。</p>
<p>负号：- , 负号可以对数字进行符号的取反。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">  a = +a;<span class="comment">// a等于正a。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  a = -a;<span class="comment">// a等于负a。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>应用。对非number类型的值, 会将其先转换成number再运算。</p>
<p>可利用负号, 将其他数据类型转换成Number类型。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">  a = -a;<span class="comment">// a等于负a。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;18&quot;</span>;</span><br><span class="line">  b = -b;<span class="comment">// b等于负b。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(b))</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//但我们希望得到的是 正18的number数值, 这时可以用正号进行转换。</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="string">&quot;18&quot;</span>;</span><br><span class="line">  c = +c;<span class="comment">//因为正号不会对数值产生任何影响。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c=&quot;</span>+c+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(c))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>在表达式中, 这种转换也更方便。</p>
<p>这也属于隐式类型转换。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span> + <span class="string">&quot;2&quot;</span> + <span class="number">3</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span> + +<span class="string">&quot;2&quot;</span> + <span class="number">3</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;只需要在字符串类型数值的前面加上正号, 即可转换为数值类型&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(b))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(15)自增和自减</title>
    <url>/blog/javascript/15/</url>
    <content><![CDATA[<hr>
<h3 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h3><p><strong>自增：++, 可以使变量在自身的基础上增加1</strong>。</p>
<p>这里我们使用a++。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a++ = &quot;</span> + a++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a++的值是1, 加加在后, 这是a自增之前的值, 说明a++表达式本身!!还未自增。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a的值变成了2(在前面的log中进行了a++操作)&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>这里我们使用++a。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;++a = &quot;</span> + ++a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;++a的值是2, 加加在前, 这是a自增之后的值, 说明++a表达式已经自增了。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a的值是2(在前面的log中进行了a++操作)&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>得出结论是, 无论是前++, 还是后++, 都会<strong>立即</strong>使<strong>原变量</strong>的值<strong>自增</strong>1。<strong>但是！！</strong>这种立即自增, 是相对于<strong>原变量a</strong>来说的, <strong>a</strong>只是一个变量。而对于 a++ 以及 ++a这两个<strong>表达式</strong>, 是不同的！</p>
<p>a++表达式！等于原变量的值(自增前的值)</p>
<p>++a表达式！等于自增后的值</p>
<p>理解记忆方法：前后++, <strong>从写法上看</strong>, 就是<strong>先加</strong>还是<strong>后加</strong>的问题, 既然已经先++了, <strong>那么表达式 ++a的值, 就是自增之后的值</strong>。而后++, <strong>那么表达式a++, 意思是后++, 还没加, 就是自增之前的值</strong>。</p>
<hr>
<h3 id="自减"><a href="#自减" class="headerlink" title="自减"></a>自减</h3><p><strong>自减：–, 可以使变量在自身的基础上减1</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--a = &quot;</span> + --a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;--a的值是9, 减减在前, 这是a自减之后的值, 说明--a表达式已经自减了。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a的值是2(在前面的log中进行了--a操作)&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a-- = &quot;</span> + a--)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a--的值是10, 减减在后, 这是a自减之前的值, 说明a--表达式还没有自减。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a的值是2(在前面的log中进行了a--操作)&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>与前++ 和 后++的规律一样, 表达式中, a–这个表达式, 也等于计算前的值。–a等于计算后的值, 根据减减的位置不同, 也是一个先后的问题。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(16)逻辑运算符</title>
    <url>/blog/javascript/16/</url>
    <content><![CDATA[<hr>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>js中为我们提供了三种逻辑运算符。</p>
<blockquote>
<p>!:非</p>
</blockquote>
<p>!:可以对一个值进行非运算,也就是取反操作。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="literal">true</span></span><br><span class="line">  a = !a</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;!a一次取反是相反的值=&quot;</span> + a)</span><br><span class="line">  </span><br><span class="line">  a = <span class="literal">true</span></span><br><span class="line">  a = !!a</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;!!a两次取反为原值=&quot;</span> + a)</span><br><span class="line">  </span><br><span class="line">  a = <span class="number">123</span></span><br><span class="line">  a = !a</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;对非布尔值取反, 会将其先转换成布尔值, 再取反:&quot;</span> + a)</span><br><span class="line">  </span><br><span class="line">  a = <span class="literal">null</span></span><br><span class="line">  a = !!a</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;可以对任意数据类型, 取两次反, 来获取该数据类型的布尔值,原理和Boolean()函数一样, 但更简单了:&quot;</span> + a)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&amp;&amp;:与</p>
</blockquote>
<p>&amp;&amp;:可以对符号两侧的值进行运算, 并返回结果。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;&amp;&amp;---只要有false, 就返回false&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">false</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;&amp;&amp;---必须都为true,才会返回true&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>&amp;&amp;短路的与</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;为什么能出来, 因为第一个为true, 还需要运算到&amp;&amp;的右侧进行判断。&quot;</span>)</span><br><span class="line">  <span class="literal">true</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出来&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;出不来, 是因为第一个false, 就已经可以返回false了, &amp;&amp;右侧的就不再继续执行了&quot;</span>)</span><br><span class="line">  <span class="literal">false</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出不来&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>||:或</p>
</blockquote>
<p>||:可以对符号两侧的值进行或运算, 并返回结果。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;||---只要有true, 就返回true&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">false</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="literal">false</span> || <span class="literal">true</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">true</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;||---必须都为false,才会返回false&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">false</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>||短路的或</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;为什么能出来, 因为第一个为false, 还需要运算到||的右侧进行判断。&quot;</span>)</span><br><span class="line">  <span class="literal">false</span> || <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出来&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;出不来, 是因为第一个true, 就已经可以返回true了, ||右侧的就不再继续执行了&quot;</span>)</span><br><span class="line">  <span class="literal">true</span> || <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出不来&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>非布尔值的情况</p>
</blockquote>
<p>非布尔值在进行逻辑运算时, 会将其先转换成布尔值, 再进行运算(返回原值！！！)。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;&amp;&amp;运算, 如果都为真, 就返回后面的&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1 &amp;&amp; 2 =&quot;</span> + (<span class="number">1</span> &amp;&amp; <span class="number">2</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;&amp;&amp;运算有false, 就返回靠前的false&quot;</span>)</span><br><span class="line">  <span class="comment">// Boolean(0) = false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0 &amp;&amp; 2 =&quot;</span> + (<span class="number">0</span> &amp;&amp; <span class="number">2</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2 &amp;&amp; 0 =&quot;</span> + (<span class="number">2</span> &amp;&amp; <span class="number">0</span>))</span><br><span class="line">  <span class="comment">// Boolean(NaN) = false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NaN &amp;&amp; 0 =&quot;</span> + (<span class="title class_">NaN</span> &amp;&amp; <span class="number">0</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0 &amp;&amp; NaN =&quot;</span> + (<span class="number">0</span> &amp;&amp; <span class="title class_">NaN</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;||有true, 就返回靠前的true&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1 || 2 =&quot;</span> + (<span class="number">1</span> || <span class="number">2</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2 || 1 =&quot;</span> + (<span class="number">2</span> || <span class="number">1</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0 || 1 =&quot;</span> + (<span class="number">0</span> || <span class="number">1</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1 || 0 =&quot;</span> + (<span class="number">1</span> || <span class="number">0</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;||都为false, 返回后面的false&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NaN || 0 =&quot;</span> + (<span class="title class_">NaN</span> || <span class="number">0</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0 || NaN =&quot;</span> + (<span class="number">0</span> || <span class="title class_">NaN</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(13)运算符</title>
    <url>/blog/javascript/13/</url>
    <content><![CDATA[<hr>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符：运算符也叫操作符。通过运算符, 可以对一个或多个值进行运算。</p>
<p>包括前面使用的typeof也是运算符, 可以获取一个值的类型。</p>
<p><strong>算数运算符：+ - * &#x2F; %</strong></p>
<h3 id="加法："><a href="#加法：" class="headerlink" title="加法：+"></a>加法：+</h3><p>加法运算</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;number+number=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="literal">true</span> + <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Boolean+number=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="literal">null</span> + <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;null+number=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="literal">undefined</span> + <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;undefined+number=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="string">&quot;1&quot;</span> + <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;string+number=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="加法：-拓展"><a href="#加法：-拓展" class="headerlink" title="加法：+ 拓展"></a>加法：+ 拓展</h3><p>字符串和数值, 加法会拼接。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;1&quot;</span> + <span class="string">&quot;2&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;String+String=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;3&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;String+String+Number=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="减、乘、除：-x2F"><a href="#减、乘、除：-x2F" class="headerlink" title="减、乘、除：- * &#x2F;"></a>减、乘、除：- * &#x2F;</h3><p>任何值做 减、乘、除运算时, 都会自定转换为number。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span> - <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number-String=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="string">&quot;100&quot;</span> - <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;String-Number=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="number">100</span> - <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number*Number=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="number">100</span> * <span class="literal">true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number*boolean=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="number">100</span> * <span class="string">&quot;0.5&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number*String=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>.</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">6</span> / <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number/Number=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="number">6</span> / <span class="literal">true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number/boolean=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  a = <span class="number">6</span> / <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number/String=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;------隐式转换----------&quot;</span>)</span><br><span class="line">  a = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  a = a - <span class="number">0</span>; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot; --&gt; type : &quot;</span>+<span class="title function_">typeof</span>(a))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="取模运算："><a href="#取模运算：" class="headerlink" title="取模运算：%"></a>取模运算：%</h3><p>求余数</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">9</span> % <span class="number">5</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(17)赋值运算符</title>
    <url>/blog/javascript/17/</url>
    <content><![CDATA[<hr>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><strong>&#x3D; 可以将右侧的值赋值给左侧的变量</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;=等于符号, 可以将右侧的值赋值给左侧的变量&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>这个其实是一种简写, 不是必须的。 实在搞不清, 可以直接用正常等式即可</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">  a += <span class="number">7</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a += 7等同于a = a + 7,这只是一种简写&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;同理：a -= 10等同于a = a - 10&quot;</span>)</span><br><span class="line">  a -= <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a *= 2等同于a = a * 2&quot;</span>)</span><br><span class="line">  a *= <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a /= 10等同于a = a / 10&quot;</span>)</span><br><span class="line">  a /= <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;a %= 5等同于a = a % 5&quot;</span>)</span><br><span class="line">  a %= <span class="number">5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(18)关系运算符</title>
    <url>/blog/javascript/18/</url>
    <content><![CDATA[<hr>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p><strong>关系运算符, 就是比较两个值之间的大小关系。如果关系成立就返回true, 如果关系不成立就返回false</strong>。</p>
<blockquote>
<p>&lt;, &lt;&#x3D;, !&#x3D;…</p>
</blockquote>
<p>大于、小于、大于等于、小于等于、不等于。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5 &gt; 10 : &quot;</span> + (<span class="number">5</span> &gt; <span class="number">10</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10 &gt; 5 : &quot;</span> + (<span class="number">10</span> &gt; <span class="number">5</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5 &gt; 5 : &quot;</span> + (<span class="number">5</span> &gt; <span class="number">5</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5 &gt;= 5 : &quot;</span> + (<span class="number">5</span> &gt;= <span class="number">5</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5 &gt;= 4 : &quot;</span> + (<span class="number">5</span> &gt;= <span class="number">4</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>除此之外还有&#x3D;&#x3D;, &#x3D;&#x3D;&#x3D;等,注意这里没有 &#x3D; , 因为 &#x3D; 是赋值运算符。</p>
<blockquote>
<p>双等号&#x3D;&#x3D;</p>
</blockquote>
<p>&#x3D;&#x3D; 关系, 是两个值, 值类型一样, 直接比较值。值类型不一样, 转换后再比较值。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;== ：不同类型的值比较, 会进行转换, 但转换成什么类型进行比较是不确定的&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">1</span> == <span class="number">1</span>) + <span class="string">&quot; ：相同的类型直接比较&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">&quot;1&quot;</span> == <span class="number">1</span>) + <span class="string">&quot; ：字符串1转成数字1进行比较&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">true</span> == <span class="string">&quot;1&quot;</span>) + <span class="string">&quot; ：将true转成数值1, 将字符串1转换成数值1, 再比较&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>undefined衍生自null。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;测试Number(null)&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number(null) = &quot;</span> + <span class="title class_">Number</span>(<span class="literal">null</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;但是&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;null == 0 : &quot;</span> + (<span class="literal">null</span> == <span class="number">0</span>) + <span class="string">&quot; ：这是一种特殊情况, null没有转成数值0&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;undefined衍生自null&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;null == undefined : &quot;</span> + (<span class="literal">null</span> == <span class="literal">undefined</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>NaN不和任何值相等, 包括它本身。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;NaN不和任何值相等, 包括它本身&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NaN == undefined : &quot;</span> + (<span class="title class_">NaN</span> == <span class="literal">undefined</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NaN == NaN : &quot;</span> + (<span class="title class_">NaN</span> == <span class="title class_">NaN</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;那要如何判断一个值是否为NaN呢&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> b = <span class="title class_">NaN</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isNaN(b) : &quot;</span> + <span class="built_in">isNaN</span>(b))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>不等于!&#x3D;</p>
</blockquote>
<p>不等于, 是两个值, 值类型一样, 直接比较值。值类型不一样, 转换后再比较值。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> != <span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> != <span class="number">10</span>) <span class="comment">// false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span> != <span class="string">&quot;a&quot;</span>) <span class="comment">// false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span> != <span class="number">1</span>) <span class="comment">// false </span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>全等于&#x3D;&#x3D;&#x3D;</p>
</blockquote>
<p>&#x3D;&#x3D;&#x3D; 关系, 是两个值, 不仅值类型要一样, 值也要一样。不再做值类型转换。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span> == <span class="number">1</span>) <span class="comment">// true 做类型转换, 再比较。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span> === <span class="number">1</span>) <span class="comment">// false 不做类型转换, 类型不同直接false</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="literal">undefined</span>) <span class="comment">// true </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="literal">undefined</span>) <span class="comment">// false </span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>不全等!&#x3D;&#x3D;</p>
</blockquote>
<p>不全等, 是两个值, 不仅值不同, 值类型也不同。比较时不再做类型转换。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span> != <span class="number">1</span>) <span class="comment">// false 做类型转换</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span> !== <span class="number">1</span>) <span class="comment">// true 不做类型转换</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>非数值情况关系比较</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt; <span class="literal">true</span>) <span class="comment">// false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt;= <span class="literal">true</span>) <span class="comment">// true, 这是把true当成1了。</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt;= <span class="string">&quot;0&quot;</span>) <span class="comment">// true, 这是把string 0转换成了number 0了。</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="literal">null</span>) <span class="comment">// true, 因为null转为number是0</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//结论, 对非数字进行比较时, 会转换成数字, 在进行比较。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*-------------------------------------------------------------*/</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//！！！！NaN的情况。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="string">&quot;hello&quot;</span>) <span class="comment">//false, &quot;hello&quot;转数字为NaN</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="literal">undefined</span>) <span class="comment">//false, undefined转数字为NaN</span></span><br><span class="line">  <span class="comment">//任何值和NaN比较都是false(不仅仅是大于, 大于等于, 小于等等, 都是false)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*-------------------------------------------------------------*/</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">//！！！！特殊情况。</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;11&quot;</span> &lt; <span class="string">&quot;5&quot;</span>) <span class="comment">//false</span></span><br><span class="line">   <span class="comment">//如果, 符号两侧都是字符串时, 不会将其转换成数值进行比较。</span></span><br><span class="line">   <span class="comment">//而是分别比较字符串字符的Unicode编码。</span></span><br><span class="line">   <span class="comment">//例：</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span> &lt; <span class="string">&quot;b&quot;</span>) <span class="comment">//true</span></span><br><span class="line">  <span class="comment">//说明b的Unicode编码大于a的Unicode编码</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;abc&quot;</span> &lt; <span class="string">&quot;b&quot;</span>) <span class="comment">//true</span></span><br><span class="line">  <span class="comment">//这怎么比的呢, 一位一位的比。 先a和b比, b大于了a, 那后面的就不比了。</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bbc&quot;</span> &lt; <span class="string">&quot;b&quot;</span>) <span class="comment">//false</span></span><br><span class="line">  <span class="comment">//先第一个b和b比, 一样, 就不比了。第二个b再比, 但第二个后面没有了, 就不大于b了。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//可以利用这种方式, 对字符串进行排序。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(19)Unicode编码</title>
    <url>/blog/javascript/19/</url>
    <content><![CDATA[<hr>
<h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p><strong>在字符串中使用转义字符输出Unicode编码</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// \u编码(16进制)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\u0031&quot;</span>)</span><br><span class="line">  <span class="comment">//当然1这种常用字符, 我们都可以用键盘直接输入就可以了。</span></span><br><span class="line">  <span class="comment">//这种一般只用于一些不常用的特殊字符输出。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//这是在js中输出Unicode编码的方式。</span></span><br><span class="line">  <span class="comment">//那很多时候我们也需要在网页中显示这些特殊编码。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// &amp;#编码(10进制);  注意！！这里的编码要求是10进制编码</span></span><br><span class="line">  <span class="comment">// 需要将16进制的Unicode转换为10进制编码。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(2)标识符</title>
    <url>/blog/javascript/2/</url>
    <content><![CDATA[<hr>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul>
<li>标识(zhi)符：在js中所有可以由我们自主命名的, 都可以称为标识符。</li>
<li>例如：变量名、函数名、属性名, 都属于标识符。</li>
</ul>
<blockquote>
<p>命名规则</p>
</blockquote>
<p>1.标识符中可以含有字母、数字、_、$<br>2.标识符不能以数字开头。<br>3.标识符不能是ES标准中的关键字、保留字。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> abc;  <span class="comment">// √ 字母</span></span><br><span class="line">  <span class="keyword">var</span> a_b_c;  <span class="comment">// √ 字母和下划线</span></span><br><span class="line">  <span class="keyword">var</span> $abc;  <span class="comment">// √ $和字母</span></span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//console.warn(&quot;错误演示&quot;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> <span class="number">123</span>;  <span class="comment">// × 不能以数字开头。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//console.warn(&quot;错误演示&quot;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> <span class="keyword">var</span>;  <span class="comment">// × 不能是关键字、保留字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>关键字</p>
</blockquote>
<p>break、do、instanceof、typeof、case、else、new、var、catch、finally、return、void、continue、for、switch、while、default、if、throw、delete、in、try、function、this、with、debugger、false、true、null</p>
<blockquote>
<p>保留字</p>
</blockquote>
<p>class、enum、extends、super、const、export、import、implements、let、private、public、yield、interface、package、protected、static</p>
<blockquote>
<p>其他不建议使用的字符</p>
</blockquote>
<p>abstract、double、goto、native、boolean、byte、synchronize、char、int、throws、final、transient、float、long、short、volatile、arguments、encodeURI、infinity、Number、RegExp、undefined、isFinite、Object、String、Boolean、Error、RangeError、parseFloat、SyntaxError、Date、eval、JSON、ReferenceError、TypeError、decodeURI、EvalError、Math、URIError、decodeURIcomponent、Function、NaN、isNaN、parseInt、Array、encodeURICOmponent</p>
<p>4.标识符一般使用驼峰式命名方式。首字母小写, 后面单词首字母大写, 如：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> userAge;</span><br><span class="line">  <span class="keyword">var</span> userName;</span><br><span class="line">  <span class="comment">// 标识符一般使用驼峰式命名</span></span><br><span class="line">  <span class="comment">// 首字母小写, 后面单词首字母大写</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>js底层保存标识符实际上是采用Unicode编码, 所以理论上讲, 所有的utf-8中含有的内容都可以作为标识符。</strong><br>包括Unicode中的中文都可以作为标识符, 但是一般不这么用。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> 你好=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(你好);</span><br><span class="line">  <span class="comment">// js底层保存标识符实际上是采用Unicode编码</span></span><br><span class="line">  <span class="comment">// 所以理论上讲</span></span><br><span class="line">  <span class="comment">// 所有的utf-8中含有的内容都可以作为标识符</span></span><br><span class="line">  <span class="comment">// 但是一般不这么用</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(20)条件运算符</title>
    <url>/blog/javascript/20/</url>
    <content><![CDATA[<hr>
<h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p><strong>条件运算符也叫三元运算符：条件?语句1:语句2</strong><br><strong>运算时, 先对条件进行运算, 如果条件为true, 执行语句1, 如果为false, 执行语句2</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="literal">true</span>?<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;语句1&#x27;</span>):<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;语句2&#x27;</span>)</span><br><span class="line">  <span class="literal">false</span>?<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;语句1&#x27;</span>):<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;语句2&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;获取最大值&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">  <span class="keyword">var</span> max = a &gt; b? <span class="attr">a</span>: b</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;max = &quot;</span> + max)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;var max = a &gt; b? (还可以嵌套三元运算): (还可以嵌套三元运算),但不推荐这么写,不利于阅读。&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(21)运算符的优先级</title>
    <url>/blog/javascript/21/</url>
    <content><![CDATA[<hr>
<p>在此之前先了解一个, 逗号运算符。使用逗号可以分割多个语句。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// ,  逗号</span></span><br><span class="line">  <span class="keyword">var</span> a, b, c, d</span><br><span class="line">  <span class="keyword">var</span> e, f=<span class="number">1</span>, g, h</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p>和数学中一样, 在JS中运算符也有优先级, 比如先乘除后加减。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;测试&amp;&amp;和||的优先级, 如果||的优先级高, 或者两个一样高, 应该返回3。如果&amp;&amp;的优先级高, 应该返回1&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> || <span class="number">2</span> &amp;&amp; <span class="number">3</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js1.png" alt="js1"></p>
<p><strong>在这张表中, 越靠前, 优先级越高, 优先级一样, 则从左往右计算</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;一般不需要记忆这张表, 确实是拿不准的, 可以使用()括号来改变优先级。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;(1 || 2) &amp;&amp; 3 先算||结果：&quot;</span> + ((<span class="number">1</span> || <span class="number">2</span>) &amp;&amp; <span class="number">3</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1 || (2 &amp;&amp; 3) 先算&amp;&amp;结果：&quot;</span> + (<span class="number">1</span> || (<span class="number">2</span> &amp;&amp; <span class="number">3</span>)))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(22)代码块</title>
    <url>/blog/javascript/22/</url>
    <content><![CDATA[<hr>
<h3 id="语句statement"><a href="#语句statement" class="headerlink" title="语句statement"></a>语句statement</h3><p>我们的程序是由一条条的语句构成的。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a, b, c, d <span class="comment">// 这是语句</span></span><br><span class="line">  <span class="keyword">var</span> e, f=<span class="number">1</span>, g, h <span class="comment">// 这也是语句</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>) <span class="comment">// 这还是语句</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//语句是按照从上到下的顺序一条一条执行的。</span></span><br><span class="line">  <span class="comment">//以上的三条语句, 并没有明显的关系。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//在js中, 可以将有关联的语句, 用&#123;&#125;大括号来进行分组。比如</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> msg = <span class="string">&quot;你好1&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//同一个&#123;&#125;大括号中的语句, 称为一组语句, 也称为一个代码块。</span></span><br><span class="line">  <span class="comment">//他们要么都执行, 要么都不执行。代码块的后面也不用加;分号。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//JS中的代码块只具有分组的作用, 没有其他用途。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 10 这里只作为分组, 并没有隔离。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//注意了!!。这里var 定义的a外部可以访问。</span></span><br><span class="line">  <span class="comment">//在新的ES标准中, 在大括号内部用let定义变量, 外部就不能访问了。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 报错！！！</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(23)流程控制语句if</title>
    <url>/blog/javascript/23/</url>
    <content><![CDATA[<hr>
<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>已知：JS代码是一行一行的向下执行的。但是在实际开发的实际需求中,  我们可能需要, 根据条件来判断, 执行那些语句。</p>
<blockquote>
<p>条件判断语句：if</p>
</blockquote>
<p>如果。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">14</span></span><br><span class="line">  <span class="keyword">if</span>(age &gt; <span class="number">18</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你已满18岁。&#x27;</span>)  <span class="comment">//不会输出, 因为年龄不满足</span></span><br><span class="line"></span><br><span class="line">  age = <span class="number">20</span></span><br><span class="line">  <span class="keyword">if</span>(age &gt; <span class="number">18</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你已满18岁。&#x27;</span>)  <span class="comment">//会输出。因为年龄满足了。</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;if语句只能控制紧随其后的&#x27;一条&#x27;语句&quot;</span>)</span><br><span class="line">  age = <span class="number">10</span></span><br><span class="line">  <span class="keyword">if</span>(age &gt; <span class="number">18</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你已满18岁。&#x27;</span>)  <span class="comment">//不会输出, 因为年龄不满足</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;谁也管不了我&#x27;</span>)  <span class="comment">//会输出, 因为if语句只能控制紧随其后的一条语句。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>那想要控制多行语句, 就需要将其放在一个代码块中{}。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;将多条语句放进代码块中, 都会受到条件语句的限制&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你已满18岁。&#x27;</span>)</span><br><span class="line">    <span class="comment">//不会输出, 因为年龄不满足</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;谁也管不了我&#x27;</span>)</span><br><span class="line">    <span class="comment">//不会输出, 它在if所控制的代码块中。</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;除了可以以age &gt; 18的条件形式判断, 还可以进行多条件判断, age &gt; 18 &amp;&amp; age &lt; 70, 只要最终得出Boolean类型的值即可&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>else</p>
</blockquote>
<p>否则：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">61</span></span><br><span class="line">  <span class="keyword">if</span> (age &gt; <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你已经退休了~~&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    onsole.<span class="title function_">log</span>(<span class="string">&#x27;好好工作&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这就和之前的 三元表达式类似了。满足则执行前一个代码块, 不满足就执行后一个代码块。&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>else if</p>
</blockquote>
<p>或者：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">22</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你未成年&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(age &gt;= <span class="number">18</span> &amp;&amp; age &lt; <span class="number">44</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好青年人&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(age &gt;= <span class="number">44</span> &amp;&amp; age &lt; <span class="number">59</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好中年人&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">//除了以上情况的请他情况</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好老年人&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(24)条件分支语句switch</title>
    <url>/blog/javascript/24/</url>
    <content><![CDATA[<hr>
<h3 id="条件分支语句switch"><a href="#条件分支语句switch" class="headerlink" title="条件分支语句switch"></a>条件分支语句switch</h3><p>switch(条件1)…case(条件2), case个数不限,  这个语句会依次将条件1和条件2进行全等比较。 当全等满足时, 会执行case后面的全部语句, 包括其他case中的语句,  所以每个case需要添加退出语句, break。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">  <span class="keyword">switch</span>(num)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;二&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;三&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;非法数字&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> num = +<span class="title function_">prompt</span>(<span class="string">&quot;请输入成绩&quot;</span>)</span><br><span class="line">  <span class="keyword">switch</span>(<span class="built_in">parseInt</span>(num/<span class="number">10</span>))&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;合格&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不合格&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(26)数学</title>
    <url>/blog/javascript/26/</url>
    <content><![CDATA[<hr>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><blockquote>
<p>水仙花数</p>
</blockquote>
<p>水仙花数, 它是一个三位数, 每一个位数上的数字, 的三次方之和, 等于它本身。abc &#x3D; a^3 + b^3 + c^3。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;100-1000之间的水仙花数：&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//取百位数</span></span><br><span class="line">    <span class="keyword">var</span> bai = <span class="built_in">parseInt</span>(i/<span class="number">100</span>)</span><br><span class="line">    <span class="comment">//取十位数</span></span><br><span class="line">    <span class="keyword">var</span> shi = <span class="built_in">parseInt</span>((i - bai*<span class="number">100</span>)/<span class="number">10</span>)</span><br><span class="line">    <span class="comment">//取个位数</span></span><br><span class="line">    <span class="keyword">var</span> ge = i%<span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(bai*bai*bai+shi*shi*shi+ge*ge*ge == i)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>质数</p>
</blockquote>
<p>质数：只能被它自己和1整除的数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//取出1-1000的质数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;TimeConsuming&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> flag</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">    flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> g = <span class="number">2</span>; g&lt;i ; g++)&#123; </span><br><span class="line">      <span class="comment">//取出有可能整除i的数g</span></span><br><span class="line">      <span class="keyword">if</span>(i%g == <span class="number">0</span>)&#123;</span><br><span class="line">        flag = <span class="literal">false</span> </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;TimeConsuming&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(25)循环语句while</title>
    <url>/blog/javascript/25/</url>
    <content><![CDATA[<hr>
<h3 id="循环语句while"><a href="#循环语句while" class="headerlink" title="循环语句while"></a>循环语句while</h3><p>输出1-10。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n++)</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">  <span class="comment">//不太聪明的样子</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>while语句在执行时, 会先对条件进行求值判断,  如果为true则执行循环体中的语句。执行完毕以后,  继续对表达式进行判断。如果为false则终止循环。也可以使用break终止循环。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(n &lt;= <span class="number">10</span>)&#123; <span class="comment">//条件表达式</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">//循环体</span></span><br><span class="line">    n++ <span class="comment">//更新表达式</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;console.log(n++)你也可以将更新表达式放进循环体中(自增会更变原变量的值)&quot;</span>)</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>do…while</p>
</blockquote>
<p>do{循环体}while(条件表达式)。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num++)</span><br><span class="line">  &#125;<span class="keyword">while</span>(num &lt;= <span class="number">10</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;看似和前面的while没什么区别&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>但是while会先判断条件再执行循环体。而do…while, 会先执行一次循环体, 在进行判断</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我不会输出&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;while判断后执行, 所以上面没有输出。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我会输出&quot;</span>)</span><br><span class="line">  &#125;<span class="keyword">while</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;而do while会先执行一次再判断, 所以上面输出了。&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>for</p>
</blockquote>
<p>在while中, 是先定义一个初始值, 然后加上一个条件表达式, 还有一个跟新表达式。在for中, 可以将这三个放在一个地方。</p>
<pre><code>for(1.初始化表达式/初始化执行(循环时不执行); 2.条件表达式; 4.更新表达式)&#123;
  3.语句...
&#125;
</code></pre>
<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, sum = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">      sum = sum + i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1-100的奇数和：&quot;</span> + sum)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(27)break和continue</title>
    <url>/blog/javascript/27/</url>
    <content><![CDATA[<hr>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break能终止循环。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;break能终止, 离它最近的循环&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">//只会输出一次, for就被终止。</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>break能终止离它最近的循环。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;break会终止定义b的那个for循环, 对最外层的for没有影响&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> a = <span class="number">0</span>;a &lt; <span class="number">5</span>; a++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> b = <span class="number">0</span>;b &lt; <span class="number">5</span>; b++)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>为for循环定义一个label名称, 利用循环名使break终止指定循环。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;为for定义一个label, 使break可以终止指定的for循环&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="attr">otterFor</span>:</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> a = <span class="number">0</span>;a &lt; <span class="number">5</span>; a++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> b = <span class="number">0</span>;b &lt; <span class="number">5</span>; b++)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b)</span><br><span class="line">      <span class="keyword">break</span> otterFor</span><br><span class="line">      <span class="comment">//终止外层循环otterFor,只会输出一次a和一次b</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue与break不同, break是终止循环, 而continue是跳过本次循环, 但不影响接下来的循环。当然他们都只会对离它最近的循环有效。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> a = <span class="number">0</span>;a &lt; <span class="number">5</span>; a++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> b = <span class="number">0</span>;b &lt; <span class="number">5</span>; b++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(b==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;内层循环, 不会输出2, 当b=2时, 跳过了这一次循环, 但b=3、b=4依然会执行。&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>跳过指定循环。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="attr">outterFor</span>:</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> a = <span class="number">0</span>;a &lt; <span class="number">5</span>; a++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> b = <span class="number">0</span>;b &lt; <span class="number">5</span>; b++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(b==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span> outterFor</span><br><span class="line">        <span class="comment">//当b=2时, 跳过最外层的循环。</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;与break一样, continue也可以跳过, 指定的循环。&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="性能优化1"><a href="#性能优化1" class="headerlink" title="性能优化1"></a>性能优化1</h3><p>在前面的取出质数中, 即使已经确定了该数不是质数, 还是会对该数内所有的数值进行判断。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//取出1-1000的质数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;TimeConsuming&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> flag</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">    flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> g = <span class="number">2</span>; g&lt;i ; g++)&#123; </span><br><span class="line">      <span class="comment">//取出有可能整除i的数g</span></span><br><span class="line">      <span class="keyword">if</span>(i%g == <span class="number">0</span>)&#123;</span><br><span class="line">        flag = <span class="literal">false</span> </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;TimeConsuming&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>优化：在已经确定了该数不是质数的情况下, 终止本次循环。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//取出1-1000的质数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;TimeConsuming&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> flag</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">    flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> g = <span class="number">2</span>; g&lt;i ; g++)&#123; </span><br><span class="line">      <span class="keyword">if</span>(i%g == <span class="number">0</span>)&#123;</span><br><span class="line">        flag = <span class="literal">false</span> </span><br><span class="line">        <span class="keyword">break</span> <span class="comment">// 确定非质数, 终止循环</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;TimeConsuming&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="性能优化2"><a href="#性能优化2" class="headerlink" title="性能优化2"></a>性能优化2</h3><p>最终结果中, 发现1000以内最大的质数是997。虽然我们加了break跳出了多余的循环。但是质数997的情况, 仍然多循环了990多次。说明, i还是太大了。</p>
<p>我们知道：2×6&#x3D;12 3×4&#x3D;12 | 4×3&#x3D;12 6×2&#x3D;12<br>发现, 其实两边除了位置不同, 其实是对称的。多判断了一倍以上的数字。<br>我们可以优化i的大小。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//取出1-1000的质数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;TimeConsuming&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> flag</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">    flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> g = <span class="number">2</span>; g&lt;<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(i) ; g++)&#123; </span><br><span class="line">      <span class="comment">// 不再是小于i判断, 而是小于i的平方根</span></span><br><span class="line">      <span class="keyword">if</span>(i%g == <span class="number">0</span>)&#123;</span><br><span class="line">        flag = <span class="literal">false</span> </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;TimeConsuming&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>查看上面几个示例的TimeConsuming, 发现耗时总是本次最低。说说明代码执行的效率更高。其实求1000以内的质数, 还看不出太大的区别, 如果将1000改成10000的话, 你会发现效率将高出百倍。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(28)对象的认识</title>
    <url>/blog/javascript/28/</url>
    <content><![CDATA[<hr>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>前面已经知晓了JS中的数据类型包括</p>
<blockquote>
<p>基本数据类型</p>
</blockquote>
<p>只要不是这五种, 其他的都是对象。</p>
<pre><code>String 字符串
Number 数值
Boolean 布尔值
Null 空值
Undifined 未定义
</code></pre>
<blockquote>
<p>引用数据类型</p>
</blockquote>
<p>在栈内存中保存的是一个地址(数据在堆内存中的地址)。</p>
<pre><code>Object 对象
</code></pre>
<blockquote>
<p>基本数据类型的不足, 他们都是单一的值, 值和值之间没有任何联系</p>
</blockquote>
<p>当需要表示一个人的信息时, 如name, age, gender……., 虽然基本数据类型可以定义, 但, 这三个变量其实是没有任何联系的。这并不能表明这些信息, 是属于同一个人的。</p>
<pre><code>var name = &quot;zhangsan&quot;
var age = 18
var gender = &#39;男&#39;
</code></pre>
<p>我们可以将其放入对象中, 来表明这是同一个人的信息。对象属于一种复合数据类型, 对象中可以保存不同类型的数据。</p>
<hr>
<h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><blockquote>
<p>内建对象</p>
</blockquote>
<p>由ES标准中定义的对象, 在任何的ES实现中, 都可以使用。比如：</p>
<pre><code>Math、String、Boolean、Function...
</code></pre>
<blockquote>
<p>宿主对象</p>
</blockquote>
<p>由JS的运行环境提供的对象, 比如浏览器中, 由浏览器提供的BOM(浏览器对象模型) DOM(文档对象模型), 在浏览器运行环境中。我们可以直接使用, 而无需创建该对象。</p>
<pre><code>console.log()     //浏览器提供的对象
document.write()  //浏览器提供的对象
//这就是宿主对象
</code></pre>
<blockquote>
<p>自定义对象</p>
</blockquote>
<p>由开发人员自己创建的对象。</p>
<pre><code>var obj = &#123;
  name: &quot;xiaoming&quot;,
  age: 18,
  gender: &quot;不详&quot;
&#125;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(3)数据类型</title>
    <url>/blog/javascript/3/</url>
    <content><![CDATA[<hr>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>变量可以定义的数据类型、或者说字面量有哪些数据类型。</li>
<li>例如：变量名、函数名、属性名, 都属于标识符。</li>
<li>在JS中一共有6种数据类型。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;hello&quot;</span>; <span class="comment">// 字符串：String</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">123</span>;  <span class="comment">// 数值：Number</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> c = <span class="literal">true</span>;  <span class="comment">// 布尔值：Boolean</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> d = <span class="literal">null</span>;  <span class="comment">// 空值：Null</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> e = <span class="literal">undefined</span>;  <span class="comment">// 未定义：Undefined</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> f = &#123;&#125;;  <span class="comment">// 对象：Object</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d,e,f)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>其中, 前五种属于基本数据类型。而Object属于引用数据类型。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(29)自定义对象</title>
    <url>/blog/javascript/29/</url>
    <content><![CDATA[<hr>
<h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><p>要使用对象, 第一步就需要创建对象。</p>
<blockquote>
<p>new</p>
</blockquote>
<p>使用new关键字调用的函数, 是构造函数, constructor。构造函数, 是专门用来创建对象的函数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;创建了对象后, 这个对象还是一个空的对象&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;使用typeof检查一个对象时, 会返回object&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>给对象添加属性</strong>。</p>
<p>对象创建完毕, 就可以往对象中添加东西了。</p>
<p>对象.属性名 &#x3D; 属性值。</p>
<p>这个时候, 之前var单独创建的三个值就有了联系, 他们都属于同一个对象。obj</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  obj.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span></span><br><span class="line">  obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>读取对象属性</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  obj.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span></span><br><span class="line">  obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>修改对象属性</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  obj.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span></span><br><span class="line">  obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  </span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>删除对象属性</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  obj.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span></span><br><span class="line">  obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">delete</span> obj.<span class="property">name</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="对象的属性名"><a href="#对象的属性名" class="headerlink" title="对象的属性名"></a>对象的属性名</h3><p>对象的属性名, 不强制使用标识符的规范, 什么乱七八糟的名字都可以使用, 你甚至可以用关键字作为属性名, 但在实际项目中不建议这样做, 除非你自己用, 否则在实际工作项目开发中, 对命名是有规范要求的。</p>
<pre><code>&lt;script&gt;
  var obj = new Object()
  obj.var = &quot;你好&quot; // 关键字作为属性名(不建议)
  console.log(obj.var)
&lt;/script&gt;
</code></pre>
<p>但有些特殊属性名会报错, 比如用数值作为属性名。</p>
<pre><code>&lt;script&gt;
  var obj = new Object()
  obj.123 = 456 // 报错
  console.log(obj.123)
&lt;/script&gt;
</code></pre>
<p>如果非要使用特殊的属性名, 不能用.点的方式来操作属性, 用中括号obj[‘123’]的方式进行操作, 但在实际项目中不建议这样命名。</p>
<pre><code>&lt;script&gt;
  var obj = new Object()
  obj[&quot;123&quot;] = 456 // 中括号的方式操作。(不建议用数字作为属性名)
  console.log(obj[&quot;123&quot;])
&lt;/script&gt;
</code></pre>
<p>中括号操作属性的方式更加灵活, 比如我们可以向中括号中, 传入一个变量, 通过操作变量的值, 来达到读取不同属性值的效果。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj[<span class="string">&quot;nihao&quot;</span>] = <span class="string">&quot;你好&quot;</span></span><br><span class="line">  obj[<span class="string">&quot;zaijian&quot;</span>] = <span class="string">&quot;再见&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> key =  <span class="string">&quot;nihao&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]) <span class="comment">// 你好</span></span><br><span class="line">  </span><br><span class="line">  key =  <span class="string">&quot;zaijian&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]) <span class="comment">// 再见</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>对象的属性值, 可以是任何数据类型, 包括属性值也是一个对象, 我们可以创建2个对象, 然后将对象2放进对象1中。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj1.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj2.<span class="property">name</span> = <span class="string">&quot;猪八戒&quot;</span></span><br><span class="line">  </span><br><span class="line">  obj1.<span class="property">obj2</span> = obj2</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj1)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="对象属性的检查"><a href="#对象属性的检查" class="headerlink" title="对象属性的检查"></a>对象属性的检查</h3><p>在实际项目开发中, 使用的很多对象都是别人创建好的。要怎么确定一个对象是否有某属性?</p>
<p>‘属性名’ in 对象</p>
<p>会得到一个布尔值, 为真说明存在该属性, 为假说明不存在该属性。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  <span class="keyword">var</span> key = <span class="string">&quot;dage&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key <span class="keyword">in</span> obj)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;会得到一个布尔值, 为真说明存在该属性, 为假说明不存在该属性。&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(30)基本数据类型和引用数据类型</title>
    <url>/blog/javascript/30/</url>
    <content><![CDATA[<hr>
<p>前面说到JS中有5个<strong>基本数据类型</strong>, <code>String、Number、Boolean、Null、Undifined</code>, 一个<strong>引用数据类型</strong>。那到底什么是基本数据类型, 什么是引用数据类型。<code>Object</code>。</p>
<blockquote>
<p>基本数据类型</p>
</blockquote>
<p>基本数据类型：虽然b的值是由a赋值的, 但是a的改变, b并不受到影响。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">  <span class="keyword">var</span> b = a</span><br><span class="line">  a++</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a) <span class="comment">// 124</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b) <span class="comment">// 123</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>引用数据类型</p>
</blockquote>
<p>操作对象obj1中a属性的值, obj2中a属性的值也发生了变化。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj1.<span class="property">a</span>  = <span class="number">123</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj2 = obj1</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1.a=&quot;</span>+obj1.<span class="property">a</span>)  <span class="comment">// 123</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj2.a=&quot;</span>+obj2.<span class="property">a</span>)  <span class="comment">// 123</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;修改obj1.a的值&quot;</span>)</span><br><span class="line">  obj1.<span class="property">a</span> = <span class="number">124</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1.a=&quot;</span>+obj1.<span class="property">a</span>)  <span class="comment">// 124</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj2.a=&quot;</span>+obj2.<span class="property">a</span>)  <span class="comment">// 124 obj2.a的值也变了</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>这就是基本数据类型和引用数据类型之间的区别。<strong>JS中的变量</strong>都是保存在<code>栈内存</code>中的, 基本数据类型的值, 会直接在栈内存中存储。当 var b &#x3D; a的时候, 它会复制一份a的值到新的栈内存中。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js2.png" alt="js2"></p>
<p>而<strong>对象的值</strong>, 是保存在<code>堆内存</code>中的, <strong>每创建一个对象, 就会在堆内存中开辟一个新的空间。</strong><code>对象的值</code>, 保存的其实是, 这个堆内存空间的<code>内存地址</code>。对象的值<code>引用的是一个地址</code>, 也就是对象是引用数据类型的原因。</p>
<p>两个obj的值<code>指向的是同一个堆内存地址</code>, 所以修改obj.name的值, obj2.name的值也会发生变化。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js3.png" alt="js3"></p>
<hr>
<h3 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h3><p>对对象直接赋值操作。这个时候操作obj2, 又不影响obj1了。注意。obj2 &#x3D; null操作的是对象值。这个值只是一个内存地址。相当于obj2取消了, 指向堆内存中的, 内存地址。而obj1指向的地址不受影响。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj1.<span class="property">a</span>  = <span class="number">123</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj2 = obj1</span><br><span class="line">  </span><br><span class="line">  obj2 = <span class="literal">null</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1=&quot;</span>+obj1) <span class="comment">// &#123;a:123&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj2=&quot;</span>+obj2) <span class="comment">// null</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js4.png" alt="js4"></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这是栈内存中值的比较&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a == b : &quot;</span> + (a == b))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  <span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj1.<span class="property">name</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">  obj2.<span class="property">name</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1 == obj2 : &quot;</span> + (obj1 == obj2))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;一个为true一个为false, 一定要记住, 基本数据类型在栈内存中保存的是值, 而引用数据类型保存的只是一个堆内存地址, 当我们new一个对象时, 就会在堆内存中生成一个新的内存地址, 虽然看起来一样, 但他们的内存地址不同。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span> == obj2.<span class="property">name</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;如果对堆内存中的值进行比较, 那他们就是一样的。&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js5.png" alt="js5"></p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(31)对象字面量</title>
    <url>/blog/javascript/31/</url>
    <content><![CDATA[<hr>
<h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p>对象字面量也是一种创建对象的方式。之前创建对象,  是通过new关键字创建的。</p>
<pre><code>var obj = new Object() 
</code></pre>
<p>我们可以<code>使用对象字面量来创建一个对象</code>。</p>
<pre><code>var obj = &#123;&#125;
</code></pre>
<p>这个<code>&#123;&#125;</code>大括号就是, 对象字面量, 这种创建对象的方式, 和new Object(), 本质上是一样的。但这种创建方式更简洁。</p>
<blockquote>
<p>使用对象字面量创建对象的优点</p>
</blockquote>
<p>使用字面量创建对象, 可以在创建时, 直接指定对象属性。</p>
<pre><code>var obj = &#123;
  name: &quot;zhangsan&quot;,
  age: 18,
  gender: &quot;男&quot;
&#125;
</code></pre>
<hr>
<h3 id="枚举对象"><a href="#枚举对象" class="headerlink" title="枚举对象"></a>枚举对象</h3><blockquote>
<p>枚举对象中的属性</p>
</blockquote>
<p>枚举对象中的属性。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">// 枚举属性</span></span><br><span class="line">    <span class="comment">// name</span></span><br><span class="line">    <span class="comment">// age</span></span><br><span class="line">    <span class="comment">// gender</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>枚举对象中的属性值</p>
</blockquote>
<p>注意：枚举对象中的属性值, 不能使用.点的方式, 这是一个变量, 只能用中括号obj[key]。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]) <span class="comment">// 枚举属性值</span></span><br><span class="line">    <span class="comment">// zhangsan</span></span><br><span class="line">    <span class="comment">// 18</span></span><br><span class="line">    <span class="comment">// 男</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(32)函数的简介</title>
    <url>/blog/javascript/32/</url>
    <content><![CDATA[<hr>
<h3 id="函数的简介"><a href="#函数的简介" class="headerlink" title="函数的简介"></a>函数的简介</h3><p>之前学到, js中除了5个基本数据类型, 其他的都是对象, 那么<strong>函数</strong>, <strong>它也是一个对象</strong>。之前使用的<strong>document、console都是对象</strong>。<code>那函数和普通对象有什么区别</code>？</p>
<p>普通对象object, 就像一个容器, 它只能装入属性。而函数这个对象, 它可以封装一些功能(代码)。在需要时, 可以执行这些功能。比如我们在一个代码块中, 写入一些语句。</p>
<pre><code>&#123;
  var a = 123
  console.log(a)
&#125;
</code></pre>
<p>需求是, 我在<strong>需要的时候</strong>！！！<strong>才执行它</strong>, <strong>可能不止执行一次</strong>。也许可以复制解决, 但后期的维护修改, 就相当混乱麻烦了。</p>
<p>所以我们可以将它统一的存到一个函数里。如何创建一个函数对象?</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(func, <span class="keyword">typeof</span> func) <span class="comment">// 输出函数结构和函数类型</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>那要怎么将函数语句封装进去呢？可以将要封装的代码, 以字符串的形式传递给构造函数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(&#x27;我被传入了函数&#x27;)&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>但传入的语句并没有执行, 我们可以在需要的时候调用函数func(), 它才会执行。</p>
<p>既然函数也是对象, 那么函数也具有普通对象的所有功能, 比如给函数添加一个属性(注意不能使用name, name这是函数的默认属性)。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(&#x27;我被传入了函数&#x27;)&quot;</span>)</span><br><span class="line">  func.<span class="property">name1</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">name1</span>) <span class="comment">// zhangsan</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="函数的创建"><a href="#函数的创建" class="headerlink" title="函数的创建"></a>函数的创建</h3><blockquote>
<p>构造函数创建函数</p>
</blockquote>
<p>在上面的简介中, 我们就是使用的构造函数, 来创建函数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>但在实际开发中, 我们很少使用构造函数来创建函数, 一般使用下面两种方式, 创建函数。</strong></p>
<blockquote>
<p>函数声明创建函数</p>
</blockquote>
<p>形参表示, 可以传递参数, 个数不限, 也可以不传。</p>
<pre><code>function funcName ( [...形参] ) &#123; 
  语句...
&#125;
</code></pre>
<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//创建函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是函数声明创建的函数&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//调用函数</span></span><br><span class="line">  <span class="title function_">func2</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>使用函数表达式创建函数</p>
</blockquote>
<p>使用函数表达式创建函数。</p>
<pre><code>var funcName = function( [...形参] )&#123;
  语句...
&#125;
</code></pre>
<p>它实际上是声明了一个匿名函数。</p>
<p>function( […形参] ){<br>语句…<br>}</p>
<p>然后将这个匿名函数赋值给变量funcName, 当然效果和函数声明创建函数是一样的。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//创建函数</span></span><br><span class="line">  <span class="keyword">var</span> funcName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是函数表达式创建的函数&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//调用函数</span></span><br><span class="line">  <span class="title function_">funcName</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(33)函数的参数</title>
    <url>/blog/javascript/33/</url>
    <content><![CDATA[<hr>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>形参：形式上的参数, 没有值。</p>
<pre><code>&lt;script&gt;
  function func(...形参)&#123;

  &#125;
&lt;/script&gt;
</code></pre>
<p>实参：在调用函数时, 传入的参数。</p>
<pre><code>func(...实参)
</code></pre>
<p>实参与形参一一对应。</p>
<blockquote>
<p>例1</p>
</blockquote>
<p>需求：定义一个求和的函数。</p>
<pre><code>&lt;script&gt;
  function sum(a, b)&#123;
    console.log(a + b)
  &#125;
  sum(3, 7) // 10
  
  // 其中a和3对应, b和7对应。
&lt;/script&gt;
</code></pre>
<blockquote>
<p>注意1</p>
</blockquote>
<p>调用函数时, 解析器不会检查实参的类型。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sum</span>(<span class="string">&quot;3&quot;</span>, <span class="number">7</span>) <span class="comment">// &quot;37&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 得到字符串37</span></span><br><span class="line">  <span class="comment">// 相加的操作变成了字符串拼接的操作。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>注意2 </p>
</blockquote>
<p>调用函数时解析器也不会检查实参的数量。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, hello, <span class="literal">true</span>) <span class="comment">// 10</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 得到数值10</span></span><br><span class="line">  <span class="comment">// a对应3, b对应7, 而多余的参数不影响结果。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>注意3</p>
</blockquote>
<p>参数不足也会导致结果异常。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sum</span>(<span class="number">3</span>) <span class="comment">// NaN</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// a对应3, b未传入为undefined</span></span><br><span class="line">  <span class="comment">// number + undefined = NaN (not a number)</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>注意4：</p>
</blockquote>
<p>函数的形参, 可以是任意数据类型。甚至可以是一个函数。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(34)函数的返回值return</title>
    <url>/blog/javascript/34/</url>
    <content><![CDATA[<hr>
<p>创建一个计算三个数和的函数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这里虽然可以输出结果, 但是在调用函数后, <strong>要如何拿到这个结果呢</strong>？</p>
<hr>
<h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>可以使用关键字return, 将计算结果返回。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 6</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意1：在函数中return后面的代码语句都不会再执行了</p>
</blockquote>
<p>函数执行到return, 就不会再执行函数后面的语句了。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sum1</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我不会执行&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="title function_">sum1</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 6</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意2：return undefined</p>
</blockquote>
<p>直接使用<code>return不带值</code>,  会得到一个undefined的值, 它与<code>return undefined</code>甚至都<code>不写return</code>效果是一样的。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// undefined</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意3：return 的值类型, 可以是任何类型</p>
</blockquote>
<p>只要return后面跟了值, 不管怎么类型都可以返回。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(35)函数和方法的区别</title>
    <url>/blog/javascript/35/</url>
    <content><![CDATA[<hr>
<h3 id="函数和方法的区别"><a href="#函数和方法的区别" class="headerlink" title="函数和方法的区别"></a>函数和方法的区别</h3><blockquote>
<p>函数</p>
</blockquote>
<p>直接定义的函数就是函数。</p>
<pre><code>&lt;script&gt;
  function sum()&#123;
    console.log(&quot;这是一个函数&quot;)
  &#125;
&lt;/script&gt;
</code></pre>
<blockquote>
<p>方法</p>
</blockquote>
<p>对象中的函数就是方法。</p>
<p>我们知道对象的属性可以是任意类型, 当然也可以是一个函数, 这种作为对象属性的函数, 被称之为这个对象的方法method。</p>
<pre><code>&lt;script&gt;
  var obj = new Object()
  obj.name = &quot;zhangsan&quot;
  obj.run = function()&#123;
    console.log(&quot;这是一个方法&quot;)
  &#125;
&lt;/script&gt;
</code></pre>
<p>调用对象中的这个函数, <strong>称之为</strong>调用这个<strong>对象的方法</strong>！</p>
<pre><code>&lt;script&gt;
  var obj = new Object()
  obj.name = &quot;zhangsan&quot;
  obj.age = 18
  obj.run = function()&#123;
    console.log(&quot;zhangsan is running&quot;)
  &#125;
  obj.run() // 调用对象方法
&lt;/script&gt;
</code></pre>
<p><strong>函数和方法这只是名称上的区别, 没有本质上的差别</strong>。</p>
<pre><code>比如之前用到的 console.log()就是调用console对象的log方法
document.write()就是调用document对象的write方法
除此之外, 他们还有很多其他的方法。
</code></pre>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(36)作用域</title>
    <url>/blog/javascript/36/</url>
    <content><![CDATA[<hr>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域一般指, 变量的作用范围。</p>
<hr>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p><strong>直接写在script标签中的JS代码, 都在全局作用域中</strong>。全局作用域在页面打开时创建, 在页面关闭时销毁。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;定义在全局的a, 可以在任何地方使用。包括那个叫func的函数, 也是全局函数。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>在全局作用域中有一个<strong>全局对象window</strong>,可以直接使用。它指浏览器的窗口, 由浏览器创建。在全局作用域中, 创建的变量<strong>都会作为window对象的属性保存</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;在全局作用域中, 创建的变量都会作为window对象的属性保存&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;访问不存在的变量会报错。&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;访问window对象不存在的变量会打印undefined。&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">c</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="拓展：var声明提前"><a href="#拓展：var声明提前" class="headerlink" title="拓展：var声明提前"></a>拓展：var声明提前</h3><p>在打印a之前：声明a并赋值, 正常打印, 也正常的得出结果。本来嘛, js就是一行一行按顺序执行的。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在打印b之前：声明b但不赋值, 得出undefined, 说明声明一个变量不赋值, 会返回undefined<br><strong>但是！！</strong> c在声明并赋值之前打印c, 也得出undefined。说明在打印c的时候, c已经被定义了, 只是还没赋值, 这种情况就称为, <strong>声明提前</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;打印一个尚未赋值的变量, 得到undefined&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> b</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;但在声明c之前, 打印c, 也得到了undefined。说明在打印前, c已经被定义了, 只是还没赋值, 这种情况就称为, 声明提前&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c = &quot;</span> + c)</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">123</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>当然你不能打印一个<strong>从来都没有声明过的变量</strong>, 否则得到的就不是undefined, 而是直接报错了。</p>
<p>总之, 声明提前的情况, 就是下面写法</p>
<pre><code>声明提前：在打印b之前, b会被提前声明, 但不会赋值。
console.log(b)
var b = 123

等同于：
var b
console.log(b)
b = 123
</code></pre>
<hr>
<h3 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h3><p>使用<strong>函数声明形式</strong>创建的函数, 会在所有代码执行之前被创建。<br>这种方式创建的函数。不管写在哪里都是一样的</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="title function_">func1</span>() <span class="comment">//提前调用</span></span><br><span class="line">          </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是func1&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>函数表达式</strong>创建的函数, func2<strong>会被提前声明, 但还没赋值</strong>(还没声明函数, 参照var声明提前)<br>所以提前调用func2, 此时func2还不是函数, 调用func2()会报错。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="title function_">func2</span>() <span class="comment">//提前调用, 报错！！！！</span></span><br><span class="line">          </span><br><span class="line">  <span class="keyword">var</span> func2 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是func2&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>函数作用域。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;在函数内部定义的a, 只在函数内部有效, 在全局是无效的, 所以a的作用域, 只在func函数的内部&quot;</span>)</span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;全局中没有变量a&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：每调用一次函数, 就会创建一个新的作用域。它们之间是互相独立的</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;虽然存在全局变量a, 但是函数内部, 它还是会先在自身的作用域中, 找有没有变量a, 有就直接使用, 没有才会去找全局。&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>() </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;如果在函数内部想直接访问全局的变量a, 而在自身的作用域中又有变量a了, 可以通过window对象访问, console.log(window.a)&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在<strong>函数的作用域中</strong>, <strong>var关键字</strong>声明的变量, <strong>也有声明提前的特性</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;在函数的作用域中, var关键字声明的变量, 也有声明提前的特性&quot;</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">10</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">    c = <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;func1()中输出的c是, 访问的全局的c&quot;</span>)</span><br><span class="line">  <span class="title function_">func1</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;全局输出c时。在函数中的c没有使用var定义, 它会去全局找c, 并重新赋值。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意了！！！！！</strong><br>我们知道, 在全局中访问一个没有声明过的变量, 会报错。<br>但是在函数中的变量, 没有使用var关键字定义, 则会设置为全局变量。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    d = <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func2</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(37)this</title>
    <url>/blog/javascript/37/</url>
    <content><![CDATA[<hr>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>解析器每次在调用函数时, 都会向函数内部传递进一个隐含的参数, 这个隐含的参数就是<strong>this</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>() </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>this指向的是一个对象, 这个对象称为, 函数执行的上下文对象</strong>。<br>根据函数的<strong>调用方式不同</strong>, this会指向<strong>不同的对象</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>()  <span class="comment">// window对象</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//创建一个对象</span></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: func</span><br><span class="line">  &#125;</span><br><span class="line">  obj.<span class="title function_">sayName</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>注意, 这里说的是调用方式不同, 跟函数的创建方式没关系。<br>1、以函数的形式调用时, this永远都是window, 事实上函数形式调用就是, window.func()<br>2、以方法的形式调用时, this就是调用方法的对象！！。<br><strong>那么前面总结的两个点, 可以直接归纳为, 函数作为谁的方法调用, this就指向谁。</strong></p>
<hr>
<h3 id="this-1"><a href="#this-1" class="headerlink" title="this"></a>this</h3><p>this补充</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;全局的name&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj1的name : zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: func</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj1的name : lisi&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: func</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">  obj1.<span class="title function_">sayName</span>() </span><br><span class="line">  obj2.<span class="title function_">sayName</span>() </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>再次重申！！函数作为哪个对象的方法被调用, this就指向哪个对象！！</strong>。<br>**另外！！当以构造函数调用时, this就是新创建的那个对象。var xxx &#x3D; new Xxx()**。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(38)工厂方法创建对象</title>
    <url>/blog/javascript/38/</url>
    <content><![CDATA[<hr>
<h3 id="工厂方法创建对象"><a href="#工厂方法创建对象" class="headerlink" title="工厂方法创建对象"></a>工厂方法创建对象</h3><p>如果我们需要大量创建结构类似的对象时, 按以前的方式。</p>
<pre><code>var obj1 = &#123;
  name: &quot;zhangsan&quot;,
  age: 18,
  gender: &quot;男&quot;,
  sayName: function()&#123;
    console.log(this.name)
  &#125;
&#125;
obj1.sayName() //zhangsan

var obj2 = &#123;
  name: &quot;lisi&quot;,
  age: 18,
  gender: &quot;男&quot;,
  sayName: function()&#123;
    console.log(this.name)
  &#125;
&#125;
obj2.sayName() //lisi

var obj3 = &#123;
  name: &quot;wangwu&quot;,
  age: 18,
  gender: &quot;男&quot;,
  sayName: function()&#123;
    console.log(this.name)
  &#125;
&#125;
obj3.sayName() //wangwu
</code></pre>
<p>这种需要创建多个差不多的对象的方式(大量的重复代码), 显得麻烦。不方便大批量对象的生成。</p>
<hr>
<h3 id="使用工厂方法创建对象"><a href="#使用工厂方法创建对象" class="headerlink" title="使用工厂方法创建对象"></a>使用工厂方法创建对象</h3><p>使用工厂方法创建对象。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> createPerson = <span class="keyword">function</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">name</span> = name</span><br><span class="line">    obj.<span class="property">age</span> = age</span><br><span class="line">    obj.<span class="property">gender</span> = gender</span><br><span class="line">    obj.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> obj1 = <span class="title function_">createPerson</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> obj2 = <span class="title function_">createPerson</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">28</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> obj3 = <span class="title function_">createPerson</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">38</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  obj1.<span class="title function_">sayName</span>()</span><br><span class="line">  obj2.<span class="title function_">sayName</span>()</span><br><span class="line">  obj3.<span class="title function_">sayName</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj1)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>这样在需要创建一个新的对象时, 就方便了许多。但这种方式也用得不多。<br><strong>新的需求, 有了创建人的对象, 还需要一个创建狗的对象</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> createDog = <span class="keyword">function</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">    obj.<span class="property">name</span> = name</span><br><span class="line">    obj.<span class="property">age</span> = age</span><br><span class="line">    obj.<span class="property">wangWang</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;汪汪~~&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj4 = <span class="title function_">createDog</span>(<span class="string">&quot;旺财&quot;</span>, <span class="number">3</span>)</span><br><span class="line">  obj4.<span class="title function_">wangWang</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj4)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>发现了没, 无论是创建人的对象, 还是狗的对象, 他们的类型都是object, 如果仅从类型上去判断, 是难以区分, 哪个对象是人, 而哪个是狗子, 因为工厂函数中new的就是object, 导致无法区分多种不同的对象。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(4)字符串：String</title>
    <url>/blog/javascript/4/</url>
    <content><![CDATA[<hr>
<h3 id="字符串：String"><a href="#字符串：String" class="headerlink" title="字符串：String"></a>字符串：String</h3><blockquote>
<p>变量可以定义的数据类型</p>
</blockquote>
<p>变量可以定义的数据类型、或者说字面量有哪些数据类型。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;我是字符串str&quot;</span>  <span class="comment">// √双引号;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> str1 = <span class="string">&#x27;我是字符串str1&#x27;</span>;  <span class="comment">// √单引号;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str1);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  var str2 = &quot;这还是字符串str2吗&#x27;;</span></span><br><span class="line"><span class="language-xml">  console.log(str2);  // ×单双引号混用报错了</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>引号的使用</p>
</blockquote>
<p>双引号和双引号不能嵌套使用, 单引号和单引号不能嵌套使用。但双引号和单引号可以嵌套使用。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;×：&quot;</span>这是一个字符串<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);  <span class="comment">//双引号嵌套双引号报错</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> str1 = <span class="string">&#x27;×：&#x27;</span>这是一个字符串<span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str1);  <span class="comment">//单引号嵌套单引号报错</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> str2 = <span class="string">&#x27;√：&quot;单、双嵌套, 这才是一个字符串&quot;&#x27;</span>; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str2);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> str3 = <span class="string">&quot;√：&#x27;双、单嵌套, 这也是一个字符串&#x27;&quot;</span>; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str3);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>如果非要用相同的引号嵌套使用, 可以使用, 作为转义字符。</p>
</blockquote>
<p>\“ 表示 &quot;<br>\‘ 表示 &#39;</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;1：\&quot;这是一个字符串\&quot;&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">  <span class="comment">// 如果非要用同一种引号嵌套</span></span><br><span class="line">  <span class="comment">// 可以使用 \转义符号进行转义</span></span><br><span class="line">  <span class="comment">// 其中\&quot; 就表示这不是&quot;引号, 只是单纯的一个字符串</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> str1 = <span class="string">&quot;2：\&quot;这是\n一个字符串\&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 除了引号, 其他特殊的字符</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 也可以使用转义符号转义</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 可以发现在\n的地方发生了换行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>除此之外:<br>\t 制表符：相当于按了一下Tab键<br>\\ 表示 \</p>
<hr>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>关于重新赋值, 例1：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;我是字符串&quot;</span>;</span><br><span class="line">  a = <span class="literal">true</span>;</span><br><span class="line">  a = <span class="number">123</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="comment">// a的值是最后一次赋的值。</span></span><br><span class="line">  <span class="comment">// 说明js是从上到下逐行执行。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>根据以上, 可以看出js是从上到下, 按顺序执行。例2：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;我是字符串&quot;</span>;</span><br><span class="line">  a = <span class="literal">true</span>;</span><br><span class="line">  a = <span class="number">123</span>;</span><br><span class="line">  <span class="title function_">alert</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="comment">//运行代码, alert弹出a的值以后, 在你点击确定以前</span></span><br><span class="line">  <span class="comment">//console.log方法不会执行。因为alert方法尚未执行完毕。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(39)构造函数</title>
    <url>/blog/javascript/39/</url>
    <content><![CDATA[<hr>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>接着上一篇：在使用工厂模式创建对象时, 都是object对象。我们希望创建人或者其他对象的时候, 有所区分。</p>
<p>比如, 我希望创建人的时候new一个Person(), 创建狗的时候new一个Dog()。</p>
<p><strong>但是, 我们还没有Person()和Dog()这些构造函数。</strong>既然没有就自己写一个构造函数。构造函数就是一个普通的函数,  创建方式和普通函数没有区别。</p>
<p>不同的是：</p>
<p><strong>构造函数习惯上函数名的首字母大写</strong>。<br><strong>与普通函数的调用方式不同</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;普通函数调用, 还记得return那一节嘛, 即使不写return, 调用函数时还是会返回undefined, 所以per1是undefined&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> per1 = <span class="title class_">Person</span>() </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(per1) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;构造函数调用, 则返回了一个Person对象&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(per2)</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>构造函数中并没有return对象出来, 这个Person对象什么时候返回的呢？这就需要了解构造函数的执行流程。</p>
<ol>
<li>只要调用了构造函数(new), 它会立即创建一个新的对象。</li>
<li>将新建的对象, 设置为函数中的this。</li>
<li>逐行执行函数中的代码。</li>
<li>将新建的对象返回。</li>
</ol>
<p>注意到了第3点, 调用构造函数时, 还会逐行执行一次代码, 试试。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用构造函数时, 我被执行了。&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="当函数以构造函数形式调用的时候-this就是新创建的对象。"><a href="#当函数以构造函数形式调用的时候-this就是新创建的对象。" class="headerlink" title="当函数以构造函数形式调用的时候, this就是新创建的对象。"></a>当函数以构造函数形式调用的时候, this就是新创建的对象。</h3><p><strong>在构造函数中, 可以用this, 来引用新建的对象</strong>。<br>搞清楚了构造函数的运行流程, 是时候添加内容了。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> per3 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">28</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> per4 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">38</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;看起来和工厂方法创建的函数很类似啊, 其实不然, console.log(per2), 可以在浏览器控制台查看, 输出的对象是Person&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(per2)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js6.png" alt="js6"></p>
<p>我们还可以创建一个Dog的构造函数。在浏览器中查看, 也可以明确区分这两种对象的类别。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">wangwang</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~~汪汪&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dog)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>使用同一个构造函数创建的对象, 我们称为一类对象。<br>所以, 我们也将<strong>构造函数</strong>称为！！<strong>类</strong>！。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js7.png" alt="js7"></p>
<hr>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>使用instanceof可以检查一个对象, 是否是一个类的。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;instanceof检查per2是否属于Person类&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;per2 instanceof Person : &quot;</span> + (per2 <span class="keyword">instanceof</span> <span class="title class_">Person</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;当然, 即便是Person类的实例, 它也是Object的后代&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;per2 instanceof Object : &quot;</span> + (per2 <span class="keyword">instanceof</span> <span class="title class_">Object</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(40)构造函数的优化</title>
    <url>/blog/javascript/40/</url>
    <content><![CDATA[<hr>
<h3 id="构造函数的优化"><a href="#构造函数的优化" class="headerlink" title="构造函数的优化"></a>构造函数的优化</h3><p>在Person构造函数中, 为<strong>每一个对象</strong>都添加了一个<strong>sayName方法</strong>。目前这个sayName方法, 是在对象内部创建的。也就是说, 构造函数<strong>每执行一次</strong>, <strong>都会创建一个sayName方法</strong>。<strong>他们占用了不同的堆空间</strong>。都是独立的。大量创建时, <strong>创建了大量一样的方法</strong>, 显然这不合适。浪费内存</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> per1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">28</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;即便看起来方法都一模一样, 但他们都占用了内存, 内存地址也不一样。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;per1.sayName == per2.sayName：&quot;</span>, per1.<span class="property">sayName</span> == per2.<span class="property">sayName</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>所以可以对这个构造函数进行优化。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = saySomeThing</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">saySomeThing</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> per1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">28</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这样就可以在只占用了一处内存, 而构造函数中, 只引用了这个函数的内存地址, 这下无论new多少个构造函数, 都不会造成内存的太多浪费。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;per1.sayName == per2.sayName：&quot;</span>, per1.<span class="property">sayName</span> == per2.<span class="property">sayName</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(41)原型对象1</title>
    <url>/blog/javascript/41/</url>
    <content><![CDATA[<hr>
<h3 id="原型对象1"><a href="#原型对象1" class="headerlink" title="原型对象1"></a>原型对象1</h3><p>在上一节中, 我们对构造函数进行了优化。但是<strong>在全局定义saySomeThing</strong>, <strong>会污染全局作用域的命名空间</strong>。一旦别的函数也叫saySomeThing这个名字, 就会将其覆盖掉。而且定义在全局作用域中, 也很不安全。</p>
<pre><code>&lt;script&gt;
  function Person(name, age, gender)&#123;
    this.name = name
    this.age = age
    this.gender = gender
    this.sayName = saySomeThing
  &#125;
  function saySomeThing()&#123;
    console.log(this.name)
  &#125;
  var per1 = new Person(&quot;zhangsan&quot;, 18, &quot;男&quot;)
  var per2 = new Person(&quot;lisi&quot;, 28, &quot;男&quot;)
  
  console.warn(&quot;这样就可以在只占用了一处内存, 而构造函数中, 只引用了这个函数的内存地址, 这下无论new多少个构造函数, 都不会造成内存的太多浪费。&quot;)
  console.log(&quot;per1.sayName == per2.sayName：&quot;, per1.sayName == per2.sayName)
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="原型prototype"><a href="#原型prototype" class="headerlink" title="原型prototype"></a>原型prototype</h3><p>这就引出了另一个概念, 原型prototype。我们所创建的每一个函数, 解析器都会向函数中添加一个属性prototype, 这个属性prototype对应一个对象, 而这个对象就是所谓的<strong>原型对象</strong>。它是浏览器解析器加进去的。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123; </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>如果函数作为普通函数调用, prototype没有任何作用。</p>
<p>但是当函数以构造函数调用时, 它所创建的对象中都会有一个隐含的属性, 指向该构造函数的原型对象。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123; </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这是函数的原型对象&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> per1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这是通过构造函数创建的对象, 对应的原型对象&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(per1.<span class="property">__proto__</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;看看他们是不是对应的同一个对象&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;per1.__proto__ == Person.prototype ---&gt; &quot;</span> + (per1.<span class="property">__proto__</span> == <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js8.png" alt="js8"></p>
<p><code>通过构造函数创建的对象, 隐含属性就是__proto__</code>。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js9.png" alt="js9"></p>
<p><code>原型对象就相当于一个公共区域, 所有同一个类的实例都可以访问到这个原型对象</code>。我们可以将对象中, 共有的内容, 统一设置到原型对象中。</p>
<p>当我们<strong>访问对象的一个属性或方法</strong>时, 它会现在<strong>对象的自身中找</strong>, 如果有就使用。如果没有, 还会<strong>去对象的原型对象中找</strong>, 如果有也会直接使用。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="number">123</span></span><br><span class="line">  <span class="keyword">var</span> mc = <span class="keyword">new</span> <span class="title class_">MyClass</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mc.<span class="property">a</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>所以我们可以继续对构造函数进行优化, 这样saySomeThing方法就不会污染全局作用域的命名空间了。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">saySomeThing</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> per1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">28</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  per1.<span class="title function_">saySomeThing</span>()</span><br><span class="line">  per2.<span class="title function_">saySomeThing</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>以后我们创建构造函数时, 就可以<strong>将这些对象共有的属性和方法</strong>。<strong>统一添加到构造函数的原型对象中</strong>。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(42)原型对象2</title>
    <url>/blog/javascript/42/</url>
    <content><![CDATA[<hr>
<h3 id="原型对象2"><a href="#原型对象2" class="headerlink" title="原型对象2"></a>原型对象2</h3><p>前面学习了通过构造函数创建对象, 同时可以通过prototype在对象的原型对象中添加属性或方法。</p>
<pre><code>&lt;script&gt;
  function MyClass()&#123;
  
  &#125;
  var mc = new MyClass()
  console.warn(&quot;mc对象还没有name属性&quot;)
  console.log(&quot;mc.name = &quot; + mc.name)
  
  console.warn(&quot;在构造函数MyClass的原型对象上添加name属性&quot;)
  MyClass.prototype.name = &quot;zhangsan&quot;
  console.log(&quot;mc.name =&quot;, mc.name)
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="对象属性的检查"><a href="#对象属性的检查" class="headerlink" title="对象属性的检查"></a>对象属性的检查</h3><p>我们知道检查一个对象是否含有某属性, 可用(‘属性’ in 对象)进行检查。但是如果对象中没有, 而原型中有, 也会返回true。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">  <span class="keyword">var</span> mc = <span class="keyword">new</span> <span class="title class_">MyClass</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&quot;name&quot; in mc:&#x27;</span>, <span class="string">&quot;name&quot;</span> <span class="keyword">in</span> mc)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>但是如果只想检查对象自身, 是否有某属性, 而不检查原型对象, 可以用<code>hasOwnProperty</code>方法进行检查。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">  <span class="keyword">var</span> mc = <span class="keyword">new</span> <span class="title class_">MyClass</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mc.hasOwnProperty(&quot;name&quot;):&#x27;</span>, mc.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>那这个hasOwnProperty哪来的呢？</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> mc = <span class="keyword">new</span> <span class="title class_">MyClass</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;mc对象中没有这个方法&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mc.hasOwnProperty(&quot;hasOwnProperty&quot;):&#x27;</span>, mc.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;hasOwnProperty&quot;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;mc原型对象中也没有这个方法&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mc.__proto__.hasOwnProperty(&quot;hasOwnProperty&quot;):&#x27;</span>, mc.<span class="property">__proto__</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;hasOwnProperty&quot;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>我们知道<strong>原型对象, 也是对象</strong>！！！是对象就有原型, <strong>所以原型对象也有原型</strong>, 所以原型对象也有一个__proto__对象。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js10.png" alt="js10"></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> mc = <span class="keyword">new</span> <span class="title class_">MyClass</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;mc原型对象的, 原型对象中有这个方法&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mc.__proto__.__proto__.hasOwnProperty(&quot;hasOwnProperty&quot;):&#x27;</span>, mc.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;hasOwnProperty&quot;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;mc原型对象的, 原型对象, 还有原型对象吗？&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mc.__proto__.__proto__.__proto__ =&#x27;</span>, mc.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> )</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>上例可见hasOwnProperty在原型的原型中, 而这个原型对象, 就是object的原型对象。原型并不是无限套娃的, 由</p>
<pre><code>mc.__proto__.__proto__.__proto__ = null
</code></pre>
<p>可知object原型对象后面, 没有原型对象了。object的原型对象就已经是祖先原型对象了。祖先原型对象不再有祖先。这么一看, hasOwnProperty其实就是object中的方法。</p>
<p><strong>所以！！！</strong>, 当我们访问<strong>对象的一个属性或方法</strong>时, 它会现在对象的<code>自身中找</code>, 如果有就使用。如果没有, 还会去<code>对象的原型对象中找</code>, 如果有也会直接使用。如果原型中没有, 则会去<code>原型的原型中去寻找</code>。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(43)toString</title>
    <url>/blog/javascript/43/</url>
    <content><![CDATA[<hr>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>toString方法。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> per1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(per1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(per1.<span class="title function_">toString</span>())</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;在一些浏览器打印per1和per1.toString(), 在控制台查看都是[object Object], 看不到对象的详细数据。可以使用JSON.stringify(per1), 将其转换为字符串, 查看对象的详细数据。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(per1))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>toString</strong>和hasOwnProperty一样, 都是object中的方法。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> per1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;per1.__proto__.__proto__.hasOwnProperty(&quot;toString&quot;) ---&gt; &#x27;</span> + (per1.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;toString&quot;</span>))) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(44)垃圾回收GC</title>
    <url>/blog/javascript/44/</url>
    <content><![CDATA[<hr>
<h3 id="垃圾回收GC"><a href="#垃圾回收GC" class="headerlink" title="垃圾回收GC"></a>垃圾回收GC</h3><p>程序在运行过程中也会产生垃圾。这些垃圾积攒过多时, 就会影响程序的运行速度。</p>
<p><strong>程序的垃圾是什么？</strong></p>
<pre><code>var obj = new Object()
</code></pre>
<p>当创建一个对象时, 会在栈内存中创建一个变量obj。并在堆内存中开辟一个区域保存对象, 同时这个对象的内存地址, 由变量obj的值对应。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js11.png" alt="js11"></p>
<pre><code>var obj = new Object()
obj = null
</code></pre>
<p>当设置obj为空时。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js12.png" alt="js12"></p>
<p>当不再有对象对其引用以后。这个对象也无法进行操作了。堆内存中的那个对象, 就称为垃圾。如果堆内存中有大量的没有被引用的对象, 会导致程序运行速度变慢。所以这种垃圾, 必须清理。</p>
<p>在JS中, 有自动垃圾回收机制。它会自动将内存中, 没有引用的对象, 进行清理。我们不需要也不能进行手动回收。</p>
<p>注意！！JS只能自动回收没有引用的对象。如果创建一个对象, 即使不使用, JS也不会进行回收。因为新创建的对象, 有一个变量在引用这个对象的内存地址。所以我们需要做的只是, 将这些不再需要使用的对象, 设置为null即可。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(45)数组的认识</title>
    <url>/blog/javascript/45/</url>
    <content><![CDATA[<hr>
<h3 id="数组的认识"><a href="#数组的认识" class="headerlink" title="数组的认识"></a>数组的认识</h3><p>在前面的对象的认识一节中, 我们认识了对象的分类</p>
<ol>
<li>内建对象</li>
<li>宿主对象</li>
<li>自定义对象</li>
</ol>
<p>前面讲了那么多, 基本都是自定义对象, 下面来了解一下 内建对象和宿主对象。</p>
<hr>
<h3 id="内建对象：ES标准制定的对象"><a href="#内建对象：ES标准制定的对象" class="headerlink" title="内建对象：ES标准制定的对象"></a>内建对象：ES标准制定的对象</h3><p><strong>数组(Array)：</strong>数组也是一个对象。它与普通对象的功能类似,  也是用来储存一些值的。</p>
<p>普通对象存储的是键值对, 通过字符串name来操作属性。</p>
<pre><code>var obj = &#123;
  name: &quot;zhangsan&quot;
&#125;
</code></pre>
<p>而<strong>数组是使用数字索引, 来操作属性</strong>(在数组中, 严格的说不应该叫属性, 而是<strong>叫元素</strong>。)</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js13.png" alt="js13"></p>
<p>数组的功能, 其实和对象的功能是有重复的。但数组的存储性能比对象要好, 所以在开发中, 我们经常使用数组来存储一些数据。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印数组 : &quot;</span> + arr)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;检查数组类型 : &quot;</span> + (<span class="keyword">typeof</span> arr)) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;向数组中添加元素arr[0] = &quot;zhangsan&quot;,arr[1] = 18&#x27;</span>)</span><br><span class="line">  arr[<span class="number">0</span>] = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">  arr[<span class="number">1</span>] = <span class="number">18</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印数组 : &quot;</span> + arr)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;读取数组中的元素console.log(arr[0])&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr[0] = &quot;</span> + arr[<span class="number">0</span>])</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;获取数组长度arr.length&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>不按索引的顺序给数组添加元素, 未添加元素的位置自动留空了, 获取留空的位置会返回undefined, 所以尽量不要创建非连续数组。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">  arr[<span class="number">0</span>] = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">  arr[<span class="number">1</span>] = <span class="number">18</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;不按索引的顺序给数组添加元素, arr[5] = &quot;hello&quot;, 以及手动设置数组的长度&#x27;</span>)</span><br><span class="line">  arr[<span class="number">5</span>] = <span class="string">&quot;hello&quot;</span></span><br><span class="line">  arr.<span class="property">length</span> = <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr = &quot;</span> + arr)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;发现未添加元素的位置自动留空了, 获取留空的位置会返回undefined&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr[4] = &quot;</span> + arr[<span class="number">4</span>])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;所以尽量不要创建非连续数组&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>总是向数组的最后添加元素</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">  arr[<span class="number">0</span>] = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">  arr[<span class="number">1</span>] = <span class="number">18</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;总是向数组的最后添加元素&#x27;</span>)</span><br><span class="line">  arr[arr.<span class="property">length</span>] = <span class="number">4</span></span><br><span class="line">  arr[arr.<span class="property">length</span>] = <span class="number">5</span></span><br><span class="line">  arr[arr.<span class="property">length</span>] = <span class="number">6</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(46)数组字面量</title>
    <url>/blog/javascript/46/</url>
    <content><![CDATA[<hr>
<p><strong>数组也能添加属性</strong>, 并赋值。<code>但一般不这么做</code>。没有意义, 不如直接用对象, 这样做容易产生混乱。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">  arr.<span class="property">hello</span> = <span class="number">123</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">hello</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h3><p>使用数组字面量创建数组 <code>[] </code>, <strong>可以在创建时就给数组添加元素。</strong></p>
<pre><code>var arr1 = [1, 2, 3, 4]
</code></pre>
<p>当然, 使用构造函数创建数组, 可以创建时添加元素。</p>
<pre><code>var arr2 = new Array(1, 2, 3, 4)
</code></pre>
<p>数组的数是相对于索引来说的,并不表示数组只能存放数字。它可以是任意数据类型。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>, <span class="literal">null</span>, <span class="literal">undefined</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;数据为null和undefined时, 不会显示任何值。除非它后面还有值&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr3 = &quot;</span> + arr3)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;还可以存储对象和函数&quot;</span>)</span><br><span class="line">  arr3[arr3.<span class="property">length</span>] = &#123;<span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>&#125;</span><br><span class="line">  arr3[arr3.<span class="property">length</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是保存在数组中的函数&quot;</span>)&#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(47)数组的方法</title>
    <url>/blog/javascript/47/</url>
    <content><![CDATA[<hr>
<h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h3><p>创建一个数组</p>
<pre><code>var arr = [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]
</code></pre>
<hr>
<h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>向数组末尾添加一个或多个元素, 并返回数组新的长度。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;向数组末尾添加一个或多个元素, 并返回数组新的长度。&quot;</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;返回数组长度&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>(<span class="string">&#x27;c&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>删除数组的最后一个元素</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;删除数组的最后一个元素&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> delEl= arr.<span class="title function_">pop</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;返回删除的元素&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(delEl)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>向数组的开头添加一个或多个元素, 并返回新的长度</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;向数组的开头添加一个或多个元素, 并返回新的长度&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> returnArrLength = arr.<span class="title function_">unshift</span>(<span class="string">&quot;啊哈&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;返回新的长度&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(returnArrLength)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p>删除数组的第一个元素, 并将删除的元素返回</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;删除数组的第一个元素, 并将删除的元素返回&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> delEl = arr.<span class="title function_">shift</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;删除的元素&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(delEl)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>从某个已有的数组返回选定的元素。slice(开始索引(必须), 结束索引(可选))。这个区间包含开始索引, 不包含结束索引。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;索引0对应&#x27;a&#x27;, 索引2对应&#x27;c&#x27;。但是得到的是&#x27;a&#x27;,&#x27;b&#x27;, 这就是包含开始索引, 不包含结束索引的意思&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr.slice(0, 2) = &quot;</span> + arr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;不写第二个参数, 那么就会从开始的索引位置, 到往后所有的元素&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr.slice(2) = &quot;</span> + arr.<span class="title function_">slice</span>(<span class="number">2</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;如果第二个参数是负数, 开始位置没有问题, 结束位置为负表示从后往前计算索引。-2就表示倒数第二个元素的位置。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr.slice(1, -2) = &quot;</span> + arr.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">2</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p><strong>splice(开始索引, 从开始索引开始删除的元素数量, …添加的元素)</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;arr.splice(1, 2)从索引1的位置开始, 删除2个元素&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> delEl = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;返回删除的元素&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(delEl)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;arr.splice(1, 0)从索引1位置开始, 删除0个元素, 这个操作可以在后面, 添加插入的元素。即可在指定的索引位置插入元素。arr.splice(1, 0, &#x27;A&#x27;)&quot;</span>)</span><br><span class="line">  arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;A&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="concat-不会影响原数组"><a href="#concat-不会影响原数组" class="headerlink" title="concat()不会影响原数组"></a>concat()不会影响原数组</h3><p>连接两个或更多的数组, 并返回结果。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr1 = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">  <span class="keyword">var</span> arr2 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;连接arr1和arr2, 并返回结果&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> res = arr1.<span class="title function_">concat</span>(arr2)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;连接多个数组, arr1、arr2、arr3&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> arr3 = [<span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>]</span><br><span class="line">  res = arr1.<span class="title function_">concat</span>(arr2,arr3)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;连接单独的元素&quot;</span>)</span><br><span class="line">  res = arr1.<span class="title function_">concat</span>(arr2,arr3, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;元素&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="join-不会影响原数组"><a href="#join-不会影响原数组" class="headerlink" title="join()不会影响原数组"></a>join()不会影响原数组</h3><p>把数组的<strong>所有元素放入一个字符串</strong>, 元素<strong>通过指定分隔符进行分割</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr1 = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;join将数组转换成字符串arr1.join()&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> res = arr1.<span class="title function_">join</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res + <span class="string">&quot; ---&gt; type = &quot;</span> + <span class="title function_">typeof</span>(res))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;转换String时, 指定元素连接符arr1.join(&#x27;-&#x27;)&quot;</span>)</span><br><span class="line">  res = arr1.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;指定元素连接符arr1.join(&#x27;&#x27;)&quot;</span>)</span><br><span class="line">  res = arr1.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="reverse-影响原数组"><a href="#reverse-影响原数组" class="headerlink" title="reverse()影响原数组"></a>reverse()影响原数组</h3><p>颠倒数组中元素的顺序</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr1 = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;颠倒数组中元素的顺序&quot;</span>)</span><br><span class="line">  arr1.<span class="title function_">reverse</span>()</span><br><span class="line">  <span class="comment">// 影响原数组的值,不需要变量接收</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="sort-影响原数组"><a href="#sort-影响原数组" class="headerlink" title="sort()影响原数组"></a>sort()影响原数组</h3><p>对数组元素进行排序</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;对数组元素进行排序&quot;</span>)</span><br><span class="line">  arr.<span class="title function_">sort</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> arr1 = [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;对数组元素进行排序&quot;</span>)</span><br><span class="line">  arr1.<span class="title function_">sort</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> arr2 = [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;但是下面这个就没对了, 原因是, sort也是按照Unicode编码进行排序的。&quot;</span>)</span><br><span class="line">  arr2.<span class="title function_">sort</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>sort是按照Unicode编码进行排序的</strong>, 所以有时候直接使用sort可能导致一些排序不是我们想要的。</p>
<ol>
<li>sort中可以传入一个回调函数。这个回调函数有2个参数。</li>
<li>当参数a是索引为0的元素时, b就是索引为1的元素。当参数a是索引为1的元素时, b就是索引为2的元素。</li>
<li>a永远在b前面。</li>
</ol>
<p>a. sort在执行回调函数时, 会根据回调函数的返回值, 来决定元素的顺序。<br>b. 当返回一个大于0的值时, 这两个元素会交换位置。<br>c. 当返回值小于等于0时, 这两个元素位置不变。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;升序排列&quot;</span>)</span><br><span class="line">  arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  </span><br><span class="line">  arr = [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;降序排列, 事实上有了升序, 降序可以直接reverse()实现, 但这里还是通过回调去实现以下。&quot;</span>)</span><br><span class="line">  arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> b-a</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="toSource"><a href="#toSource" class="headerlink" title="toSource()"></a>toSource()</h3><p>返回该对象的源代码字符串。</p>
<hr>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>将数组转换为字符串。</p>
<hr>
<h3 id="toLocalString"><a href="#toLocalString" class="headerlink" title="toLocalString()"></a>toLocalString()</h3><p>把数组转换为本地数组, 并返回结果。</p>
<hr>
<h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><p>返回数组对象的原始值。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(48)数组的遍历</title>
    <url>/blog/javascript/48/</url>
    <content><![CDATA[<hr>
<h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>数组的遍历。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 创建一个数组</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;所谓的遍历就是将数组中的元素, 都取出来。&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>练习：</p>
<pre><code>function Person(name, age)&#123; 
  this.name = name
  this.age = age
&#125;
var per1 = new Person(&#39;zhangsan&#39;, 16)
var per2 = new Person(&#39;lisi&#39;, 21)
var per3 = new Person(&#39;wangwu&#39;, 14)

var perArr = [per1, per2, per3]
</code></pre>
<p><strong>需求：取出年龄大于等于18岁的人</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> per1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">  <span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lisi&#x27;</span>, <span class="number">21</span>)</span><br><span class="line">  <span class="keyword">var</span> per3 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;wangwu&#x27;</span>, <span class="number">14</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> perArr = [per1, per2, per3]</span><br><span class="line">  <span class="comment">//实现</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">gerAdult</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = []</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i].<span class="property">age</span> &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="title function_">gerAdult</span>(perArr)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="forEach-IE9"><a href="#forEach-IE9" class="headerlink" title="forEach (IE9+)"></a>forEach (IE9+)</h3><p>一般我们都是使用for循环去遍历数组。但JS还为我们提供了另一种方法来遍历数组, <strong>forEach</strong>。forEach()方法需要一个函数作为参数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>) </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;打印了3次hello&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>参数中的function由我们创建, 但是我们并没有运行它, 是由forEach去调用的。这种由我们创建, 但是不由我们调用的函数, 我们称为<strong>回调函数</strong>。<br>输出了3次hello的原因是, forEach是根据数组的长度对每一个元素进行遍历, 有多少个元素就遍历多少次。</p>
<p>forEach在每次遍历时, 会给回调函数传入3个参数, 第一个是当前遍历的元素, 第二个是当前遍历元素的索引, 第三个是当前遍历的数组本身。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, c</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;索引&quot;</span> + index + <span class="string">&quot;的元素是：&quot;</span> + item, <span class="string">&quot;遍历的数组是：&quot;</span> + c)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><pre><code>var arr = [1, 2, 3, 2, 1, 3, 4, 2, 5]
</code></pre>
<p>需求：去除重复元素</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] == arr[j])&#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(j,<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;发现如果有连续相同的元素时, 不能正确删除重复数据。这是因为arr.splice(j,1)在删除重复数据时, 后面的元素会占据删除元素的位置, 如果如果占位的元素还和删除的元素重复, 就会被j++跳过。所以我们可以回到原来的位置再判断一次(j--)。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] == arr[j])&#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(j,<span class="number">1</span>)</span><br><span class="line">        j--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(49)call()和apply()</title>
    <url>/blog/javascript/49/</url>
    <content><![CDATA[<hr>
<h3 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a>call()和apply()</h3><p>一般我们定义一个函数, 都是直接调用函数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是func函数&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>但是函数还隐含了两个方法。</p>
<p><code>call()</code>。<br><code>apply()</code>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是func函数&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;call()方法&quot;</span>)</span><br><span class="line">  func.<span class="title function_">call</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;apply()方法&quot;</span>)</span><br><span class="line">  func.<span class="title function_">apply</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>函数对象调用这两个方法, <strong>都会执行函数</strong>, 这与func()效果一样。那他们有什么区别？调用call()和apply()可以将一个对象指定为第一个参数<br>我们稍微修改以下这个函数。</p>
<pre><code>function func()&#123;
  console.log(this)
&#125;
</code></pre>
<p>看看他们的this有什么不同。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;直接调用func()&quot;</span>)</span><br><span class="line">  <span class="title function_">func</span>() <span class="comment">// window</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;call(obj)方法&quot;</span>)</span><br><span class="line">  func.<span class="title function_">call</span>(obj) <span class="comment">// Object&#123; &#125;</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;apply(obj)方法&quot;</span>)</span><br><span class="line">  func.<span class="title function_">apply</span>(obj) <span class="comment">// Object&#123; &#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>直接调用函数时, 函数中的this就是window。</p>
<p>call()和apply()传入一个对象作为参数, 而函数运行时的this, 就变成了这个对象。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">&quot;我是obj1&quot;</span>&#125;</span><br><span class="line">  <span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">&quot;我是obj2&quot;</span>&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;传入obj1对象&quot;</span>)</span><br><span class="line">  func.<span class="title function_">call</span>(obj1) <span class="comment">// 我是obj1</span></span><br><span class="line">  func.<span class="title function_">apply</span>(obj1) <span class="comment">// 我是obj1</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;传入obj2对象&quot;</span>)</span><br><span class="line">  func.<span class="title function_">call</span>(obj2) <span class="comment">// 我是obj2</span></span><br><span class="line">  func.<span class="title function_">apply</span>(obj2) <span class="comment">// 我是obj2</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  obj1.<span class="title function_">sayName</span>() <span class="comment">// obj1</span></span><br><span class="line">  obj1.<span class="property">sayName</span>.<span class="title function_">call</span>(obj2) <span class="comment">// obj2</span></span><br><span class="line">  obj1.<span class="property">sayName</span>.<span class="title function_">apply</span>(obj2) <span class="comment">// obj2</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>所以call和apply方法可以指定函数执行时的this</strong>, 那call和apply的区别又是什么呢？。我们知道函数可以传递参数, call和apply的区别就是<strong>传递参数的方式不同</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a + b = &#x27;</span> + (a+b))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;call方法在传递的对象后面, 依次传递函数的实参&quot;</span>)</span><br><span class="line">  func.<span class="title function_">call</span>(obj1, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;而apply方法是在传递的对象后面, 传递一个数组, 数组中包含传递的实参&quot;</span>)</span><br><span class="line">  func.<span class="title function_">apply</span>(obj1, [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(5)数值：Number</title>
    <url>/blog/javascript/5/</url>
    <content><![CDATA[<hr>
<h3 id="数值：Number"><a href="#数值：Number" class="headerlink" title="数值：Number"></a>数值：Number</h3><p>在js中所有的数值都是Number。包括整数、浮点数(有效的小数, 不包括5.12.12, 这不是有效的小数, 它有2个小数点)</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>以上输出的都是123, 但他们的类型不一样。可以使用<code>typeof运算符</code>, 获取变量类型。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(a) + <span class="string">&quot; ： a =&quot;</span> + a); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(b) + <span class="string">&quot; ： b =&quot;</span> + b); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>最大值：<code>Number.MAX_VALUE</code>获取js中可以表达的最大数值。比Number.MAX_VALUE还大的数, 在js中以<strong>Infinity</strong>表示, Infinity是一个字面量, <strong>专门用来表示</strong>无穷大的数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果比最大值还大, a会是什么？</span></span><br><span class="line">  a = a + a;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  <span class="comment">//Infinity表示无穷大,Infinity是一个字面量</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//使用typeof检查Infinity时,也是Number类型</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof a = &quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>最小值：<code>Number.MIN_VALUE</code>, 可以获取js中可以表达的<strong>最小的小数</strong>。这个最小的数是：大于0小于1的最小的小数。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果a是比最小值还小的值, a会是什么？</span></span><br><span class="line">  a = -<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>*<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  <span class="comment">//-Infinity表示无穷小,-Infinity也是一个字面量</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//使用typeof检查-Infinity时,也是Number类型</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof a = &quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Number类型的变量可以进行运算。如果使用字符串类型进行运算呢？</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span> * <span class="string">&quot;bcd&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a的值是：&quot;</span> + a); </span><br><span class="line">  <span class="comment">//得出a = NaN</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//NaN是一个特殊的数字, 表示 Not A Number。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;但NaN的类型也是：&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//NaN也是一个字面量, 可以直接赋值给变量</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="title class_">NaN</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b的值类型是：&quot;</span> + <span class="keyword">typeof</span> b);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>数值类型的运算</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;在js中关于整数的运算, 基本可以保证精确。常用数值位数以内的运算都不会有什么问题。&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">51415214</span> + <span class="number">54812544</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;整数计算a的值是：&quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;但是浮点数的运算, 可能得到一个不够精确的结果。事实上所有的语言都有这个问题。例：在十进制的数值中, 如 1/3 , 是无法精确表达的。js中的表达式, 转到二进制中进行运算时, 二进制中, 无法精确表达 1/10。所以浮点数在二进制中运算, 都是不精确的。&quot;</span>)</span><br><span class="line">  a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小数计算0.1 + 0.2的值是：&quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//toFixed四舍五入, 保留一位小数。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;一般情况下, 这种不精确的运算, 我们可以舍去后面的值。但一些数据是不能舍去的, 比如涉及到钱, 或者对精确度要求很高的数据。这种结果一般通过服务器运算返回。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a的值通过toFixed四舍五入保留1位是：&quot;</span> + a.<span class="title function_">toFixed</span>(<span class="number">1</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;如果知道浮点数的位数, 可以把浮点数转为正整数的方式进行运算。&quot;</span>)</span><br><span class="line">  a = (<span class="number">0.1</span> * <span class="number">10</span> + <span class="number">0.2</span> * <span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;将小数变成整数计算再除以10, &quot;</span> + a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(50)this的情况</title>
    <url>/blog/javascript/50/</url>
    <content><![CDATA[<hr>
<h3 id="this的情况"><a href="#this的情况" class="headerlink" title="this的情况"></a>this的情况</h3><blockquote>
<p>以函数形式调用时, this永远都是窗口Window</p>
</blockquote>
<p>以函数形式调用时, this永远都是窗口Window。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这里的this指window对象&quot;</span>)</span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以方法的形式调用时, this是调用方法的对象</p>
</blockquote>
<p>以方法的形式调用时, this是调用方法的对象。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">say</span>: func</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这里的this指obj对象&quot;</span>)</span><br><span class="line">  obj.<span class="title function_">say</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以构造函数的形式调用时, this是新创建的那个对象</p>
</blockquote>
<p>以构造函数的形式调用时, this是新创建的那个对象。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">MyObject</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">func</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> myobj = <span class="keyword">new</span> <span class="title class_">MyObject</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这里的this指myobj对象&quot;</span>)</span><br><span class="line">  myobj.<span class="title function_">func</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以call和apply方法调用时, this是指定的那个对象</p>
</blockquote>
<p>以call和apply方法调用时, this是指定的那个对象。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">func</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这里的this指obj2对象&quot;</span>)</span><br><span class="line">  obj1.<span class="property">func</span>.<span class="title function_">call</span>(obj2)</span><br><span class="line">  obj1.<span class="property">func</span>.<span class="title function_">apply</span>(obj2)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(51)参数arguments</title>
    <url>/blog/javascript/51/</url>
    <content><![CDATA[<hr>
<h3 id="参数arguments"><a href="#参数arguments" class="headerlink" title="参数arguments"></a>参数arguments</h3><p>前面讲了每次调用函数时, 浏览器每次都会给函数传递一个隐含的参数, <strong>函数的上下文this</strong>。事实上, 它还会传递一个<strong>封装实参的对象arguments</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>这个arguments是什么呢？arguments是一个<strong>类数组对象</strong>, 意思是像数组一样的对象, <strong>但不是数组</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span> <span class="keyword">instanceof</span> <span class="title class_">Array</span>)</span><br><span class="line">    <span class="comment">// 或者console.log(Array.isArray(arguments))</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;检查arguments是不是数组&quot;</span>)</span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>虽然arguments不是数组, 但是它也可以<strong>通过索引来操作数据</strong>, 也可以<strong>获取长度</strong>。在调用函数时, 我们所传递的参数, 都会封装到arguments中。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;不传参数, arguments的长度为0&quot;</span>)</span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;传1个参数, arguments的长度为1&quot;</span>)</span><br><span class="line">  <span class="title function_">func</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;传2个参数, arguments的长度为2&quot;</span>)</span><br><span class="line">  <span class="title function_">func</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>通过索引操作取出, argument保存的实参。即使函数<strong>没有定义形参</strong>, 只要传递了实参都可以取出。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;还可以取出arguments保存的实参&quot;</span>)</span><br><span class="line">  <span class="title function_">func</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>所以arguments中保存的实参, 与函数是否定义形参没有太大关系。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arguments.length = &quot;</span> + <span class="variable language_">arguments</span>.<span class="property">length</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arguments[0] = &quot;</span> + <span class="variable language_">arguments</span>[<span class="number">0</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>上例：即便函数定义了2个形参, 但是只传入1个实参。而arguments的长度也只是1, 且只保存了传入的参数。arguments只会保存调用时传入的形参。</p>
<hr>
<h3 id="arguments的callee属性"><a href="#arguments的callee属性" class="headerlink" title="arguments的callee属性"></a>arguments的callee属性</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>(<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>上例：发现直接打印了函数对象。arguments的callee属性, <strong>对应一个函数对象, 就是当前正在执行的函数对象</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span> == func) </span><br><span class="line">    <span class="comment">// 验证 arguments.callee保存的函数对象是不是函数本身。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>(<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(53)对象Math</title>
    <url>/blog/javascript/53/</url>
    <content><![CDATA[<hr>
<h3 id="对象Math"><a href="#对象Math" class="headerlink" title="对象Math"></a>对象Math</h3><p>Math和其他对象不同, 它不是一个构造函数。它属于<strong>工具类</strong>, <strong>不用创建对象</strong>, 它里面封装了数学运算相关的属性和方法。</p>
<hr>
<h3 id="Math对象属性"><a href="#Math对象属性" class="headerlink" title="Math对象属性"></a>Math对象属性</h3><p>Math.E | Math.LN2 | Math.LN10 | Math.LOG2E</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.E返回算术常量e,即自然对数的底数&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">E</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.LN2返回2的自然对数&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LN2</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.LN10返回10的自然对数&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LN10</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.LOG2E返回以2为底的e的对数&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LOG2E</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Math.LOG10E | Math.PI | Math.SQRT1_2 | Math.SQRT2</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.LOG10E返回以10为底的e的对数&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LOG10E</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.PI返回圆周率&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.SQRT1_2返回2的平方根的倒数&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">SQRT1_2</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.SQRT2返回2的平方根&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">SQRT2</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="Math对象的方法"><a href="#Math对象的方法" class="headerlink" title="Math对象的方法"></a>Math对象的方法</h3><p>Math.abs(x) 返回数的绝对值</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.abs返回数的绝对值&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">1</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Math.ceil(x) 对数进行上舍入, 向上取整, 小数位只要有值就进位</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.ceil(x) 对数进行上舍入, 向上取整, 小数位只要有值就进位&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.01</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.99</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Math.floor(x) 对数进行下舍入, 向下取整, 不管小数位有没有值都舍去</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.floor(x) 对数进行下舍入, 向下取整, 不管小数位有没有值都舍去&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.01</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.99</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Math.round(x) 四舍五入</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.round(x) 四舍五入&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.4</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.5</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Math.random() 生成随机数</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.random() 随机生成0-1之间的数, 不包含0和1&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.random()*10 随机生成0-10之间的数.不包含0和10&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.round(Math.random()*10) 随机生成0-10之间的整数.包含0和10&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.round(Math.random()*(y-x) + x) 随机生成x-y之间的整数.包含x和y&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">8</span> + <span class="number">2</span>))</span><br><span class="line">  <span class="comment">// 2-10</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Math.max() 获取多个数中的最大值</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.max() 获取多个数中的最大值&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Math.min() 获取多个数中的最小值</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.min() 获取多个数中的最小值&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Math.pow(x,y) x的y次方</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.pow(x,y) x的y次方&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>Math.sqrt(x) 对x开平方, 即求x的平方根</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Math.sqrt(x) 对x开平方, 即求x的平方根&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">4</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(52)对象Date</title>
    <url>/blog/javascript/52/</url>
    <content><![CDATA[<hr>
<h3 id="对象Date"><a href="#对象Date" class="headerlink" title="对象Date"></a>对象Date</h3><p>在JS中使用<strong>Date</strong>表示一个时间。如果直接使用构造函数创建一个Date对象, 则会封装为当前代码执行的时间。意思是, 这句<strong>代码什么时候执行</strong>的, <strong>就是什么时候的时间</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(d))</span><br><span class="line">  <span class="comment">// 如果在浏览器控制插件查看, 可以直接console.log(d)</span></span><br><span class="line">  <span class="comment">// 这里因为插件的问题, console.log(d)显示的是date对象。</span></span><br><span class="line">  <span class="comment">// 所以用String(d)作了一下转换</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>创建一个<strong>指定的时间</strong>对象, 需要在构造函数中传递一个表示时间的字符串作为参数。日期的格式为 <strong>月份&#x2F;日&#x2F;年 时:分:秒</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;12/03/2016&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(d2))</span><br><span class="line">  </span><br><span class="line">  d2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;12/03/2016 11:29:59&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(d2))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>年份位置只写了16, 但是还是显示2016, 如果用IE打开可能就显示1916了, <code>所以年份位置, 一定要写完整</code>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;12/03/16 11:29:59&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(d2))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Date对象的方法"><a href="#Date对象的方法" class="headerlink" title="Date对象的方法"></a>Date对象的方法</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> dn = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;12/13/2016 11:29:59&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;getDate()获取当前日期对象是几号&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dn.<span class="title function_">getDate</span>())</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;getDay()获取当前日期对象是星期几, 它会返回0-6的值, 0表示星期日, 1表示星期一, 2表示星期二......&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dn.<span class="title function_">getDay</span>())</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;getMonth()获取当前日期对象是几月, 它会返回0-11的值, 0表示1月, 1表示2月, 2表示3月......11表示12月&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dn.<span class="title function_">getMonth</span>())</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;getFullYear()获取当前日期对象的年份&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dn.<span class="title function_">getFullYear</span>())</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>时间戳:是指从<strong>格林威治标准时间</strong>1970年1月1日0时0分0秒, <strong>到当前日期的毫秒数</strong>。<br>1秒&#x3D;1000毫秒</p>
<p><strong>！！为什么他要用时间戳！！</strong>, 要用一串数字来表示时间呢。<br>事实上我们的时间表示其实是很复杂的、比如<strong>年份的进制是12</strong>, <strong>月份的进制可能是28、29、30或者31</strong>。天的<strong>进制是24小时</strong>, <strong>小时的进制是60</strong>, 这就导致计算机在保存时间的时候特别麻烦。而时间戳表示一个时间段, 更利于计算机保存。所以<strong>计算机底层</strong>保存时间<strong>都是使用时间戳</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> dn = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;12/13/2016 11:29:59&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;getTime()获取时间戳&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dn.<span class="title function_">getTime</span>())</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> dn = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;1/1/1970 0:0:0&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;那既然时间戳是从1970年开始的, 那这个dn应该等于0咯。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dn.<span class="title function_">getTime</span>()) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;获取当前的时间戳就不用getTime()了&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(time)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>发现dn &#x3D; -28800000, 按理说, 应该是从0开始的才对、注意、这个1970说的是<strong>格林威治标准时间</strong>, 我们传入的这个时间, 是北京时间的标准。北京时间和格林威治标准时间, 是有8小时的时差的。而-28800000就是8个小时, 导致这个问题的原因是, 现在我使用的是<strong>中文系统</strong>, 系统默认使用的是北京时间。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(54)包装类</title>
    <url>/blog/javascript/54/</url>
    <content><![CDATA[<hr>
<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>基本数据类型</p>
<pre><code>String Number Boolean Null Undefined
</code></pre>
<p>引用数据类型</p>
<pre><code>Object
</code></pre>
<p><code>在JS中, 为我们提供了三个包装类。通过这三个包装类, 可以将基本数据类型转换为对象</code>。</p>
<hr>
<h3 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h3><p>将基本数据类型转换为String对象。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;创建了一个String类型的对象str&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;既然是对象, 就可以给对象添加属性&quot;</span>)</span><br><span class="line">  str.<span class="property">hello</span> = <span class="string">&quot;good morning&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">hello</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h3><p>Number()将基本数据类型转换为Number对象。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;创建了一个Number类型的对象&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;既然是对象, 就可以给对象添加属性&quot;</span>)</span><br><span class="line">  num.<span class="property">baibai</span> = <span class="string">&quot;good bye&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="property">baibai</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h3><p>Boolean()将基本数据类型转换为Boolean对象。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;创建了一个Boolean类型的对象&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bool)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> bool)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;既然是对象, 就可以给对象添加属性&quot;</span>)</span><br><span class="line">  bool.<span class="property">wangwang</span> = <span class="string">&quot;~~汪汪&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bool.<span class="property">wangwang</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>但是注意, 在实际的开发中, 我们不会使用基本数据类型的对象</p>
</blockquote>
<p>如果使用基本数据对象, 在做一些比较时, 可能会到来一下不可预期的结果。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> num1 = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;不同的对象有不同的内存地址, 虽然都是3, 但他们有不同的内存地址。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num1 =&quot;</span>, num1, <span class="string">&quot;num2 =&quot;</span>, num2)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num1 == num2:&quot;</span>, num1 == num2)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>既然不推荐使用 , 那这个包装类有什么用?下面的示例可以说明问题。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="number">123</span></span><br><span class="line">  s = s.<span class="title function_">toString</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>咋一看, 没太看懂, 需要注意的是, <strong>方法和属性</strong>只能<strong>添加给对象</strong>。<br>var声明的s不是对象, 它只是一个基本数据类型Number, 所以s是<strong>没有属性和方法的</strong>。<br>但是s.toString(), 调用了toString()方法, 还执行成功了, 且将其转换成了String。</p>
<p>所以, <strong>当我们用基本数据类型</strong>去<strong>调用属性和方法时</strong>。<br>浏览器会<strong>临时使用包装类</strong>, <strong>将其转换为对象</strong>, 然后再调用对象的属性和方法。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(55)字符串的方法</title>
    <url>/blog/javascript/55/</url>
    <content><![CDATA[<hr>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>我们声明的字符串</p>
<pre><code>var str = &#39;hello Atguigu&#39;
</code></pre>
<p>在底层字符串是以字符数组的形式保存的。</p>
<pre><code>[&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39; &#39;,&#39;A&#39;,&#39;t&#39;,&#39;g&#39;,&#39;u&#39;,&#39;i&#39;,&#39;g&#39;,&#39;u&#39;]
</code></pre>
<p>所以我们才可以用str.length获取字符串的长度, 用索引获取字符串某位置的元素。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;hello Atguigu&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">0</span>])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">1</span>])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h3><blockquote>
<p>chatAt() charCodeAt() fromCharCode()  </p>
</blockquote>
<p>chatAt()可以根据索引获取字符, 与通过索引获取字符类似。charCodeAt()返回指定位置的字符的Unicode编码。fromCharCode()根据字符编码Unicode获取字符。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;hello Atguigu&#x27;</span></span><br><span class="line">   </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;charAt()返回指定位置的字符&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.charAt(0) = &quot;</span> + str.<span class="title function_">charAt</span>(<span class="number">0</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;charCodeAt()返回指定位置的字符的Unicode编码&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.charCodeAt(0) = &quot;</span> + str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;String.fromCharCode()根据字符编码Unicode获取字符。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;String.fromCharCode(104) = &quot;</span> + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">104</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>concat()  </p>
</blockquote>
<p>连接2个或多个字符串</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;concat()连接2个或多个字符串, 用得不多, 一般拼接字符串, 用 + 加号就很香了。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;Atguigu&quot;</span></span><br><span class="line">  <span class="keyword">var</span> res = str.<span class="title function_">concat</span>(<span class="string">&#x27;你好&#x27;</span>,<span class="string">&#x27;再见&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>indexOf()  </p>
</blockquote>
<p>indexOf()检索一个字符串中, 是否含有指定内容</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;hello Atguigu&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;返回-1表示该字符串中不包含指定内容&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.indexOf(&#x27;q&#x27;) = &quot;</span> + str.<span class="title function_">indexOf</span>(<span class="string">&#x27;q&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;返回其他值表示该指定内容在字符串中的索引值, 注意l在字符串中有2个, 只返回了第一个l的索引, 第二个并没有检索。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.indexOf(&#x27;l&#x27;) = &quot;</span> + str.<span class="title function_">indexOf</span>(<span class="string">&#x27;l&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;indexOf(&#x27;检索内容&#x27;, 开始检索的位置), 如下, 从第二个字符开始检索的话, h就检索不到了, 所以返回-1&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.indexOf(&#x27;h&#x27;, 1) = &quot;</span> + str.<span class="title function_">indexOf</span>(<span class="string">&#x27;h&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>lastIndexOf()</p>
</blockquote>
<p>lastIndexOf()检索一个字符串中, 是否含有指定内容, 不过是从后向前检索。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;hello Atguigu&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;从后向前检索&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.lastIndexOf(&#x27;h&#x27;) = &quot;</span> + str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;h&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;指定开始查找的位置&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.lastIndexOf(&#x27;h&#x27;, 1) = &quot;</span> + str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;h&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;不包含指定内容&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.lastIndexOf(&#x27;q&#x27;) = &quot;</span> + str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;q&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>slice()  </p>
</blockquote>
<p>slice()从字符串中截取指定内容。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;hello Atguigu&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;与数组方法中slice用法一样&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;包含开始位置, 不包含结束位置。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.slice(0,2) = &quot;</span> + str.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;结束位置为负, 从最后字符串的最后开始计算索引&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.slice(1,-1) = &quot;</span> + str.<span class="title function_">slice</span>(<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>substring()  </p>
</blockquote>
<p>substring()也可以从字符串中截取一个字符串。</p>
<p>与slice类似。也是包含开始位置, 不包含结束位置。不同的是, substring的结束位置, <strong>不接受负值</strong>, 如果为负, 则默认为0, 就变成了str.substring(1,0)。</p>
<p>同时substring还会自动调整参数的位置。如果第二个参数小于第一个参数。则自动交换。这时str.substring(1,0)就变成了。str.substring(0,1)。所以这里str.substring(1,-1)得出的结果是H</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;hello Atguigu&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;包含开始位置, 不包含结束位置&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.substring(0, 2) = &quot;</span> + str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;结束位置为负, 从最后字符串的最后开始计算索引&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.substring(1,-1) = &quot;</span> + str.<span class="title function_">substring</span>(<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line">  <span class="comment">// substring不接受负值, 如果为负数则默认为0</span></span><br><span class="line">  <span class="comment">// 同时substring的开始位置数, 大于结束位置数, 则会自动交换</span></span><br><span class="line">  <span class="comment">// 这里就变成, str.substring(0,1), 所以结果是h</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>substr()</p>
</blockquote>
<p>还是用来截取字符串<font color=#FF0000 >但在ES中没有对该方法进行标准化</font>。<code>因此一般情况下我们不使用它</code>。</p>
<p>第一个参数表示开始位置, 包含开始位置。<br><strong>但是！！！第二个参数</strong>表示的就不是结束位置了, 它表示的是<strong>从开始位置开始, 截取的长度</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;hello Atguigu&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;第一个参数表示开始位置, 第二个参数表示截取长度&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>split()  </p>
</blockquote>
<p>split()将一个字符串, 拆分成数组。</p>
<p>一个<strong>有规律的字符串</strong>, 而刚好我们也想根据这个规律, <strong>将字符串转换成数组</strong>。<br>需要一个字符串作为参数, 将会根据这个字符串去拆分数组<br>如果传一个空值, 则会将每一个字符都拆分为数组中的一个元素</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;abc,bcd,e,fgt&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;根据字符串中的逗号拆分&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> res = str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;传一个空值, 拆分每一个元素&quot;</span>)</span><br><span class="line">  res = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>toLowerCase()和toUpperCase()</p>
</blockquote>
<p>字符串大小写转换。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;aBc&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;toUpperCase()转换为大写&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> res = str.<span class="title function_">toUpperCase</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;toLowerCase()转换为小写&quot;</span>)</span><br><span class="line">  res = str.<span class="title function_">toLowerCase</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(56)正则表达式简介</title>
    <url>/blog/javascript/56/</url>
    <content><![CDATA[<hr>
<h3 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h3><p><strong>正则表达式用于定义一些字符串的规则。计算机可以根据正则表达式, 来检查一个字符串是否符合规则。或者将字符串中符合规则的内容提取出来</strong>。</p>
<p>语法： var 表达式变量名 &#x3D; new RegExp(‘正则表达式’,’匹配模式’)<br>检查： 表达式变量名.test(字符串)<br>结果： 返回true说明字符串符合该正则表达式, 返回false说明不符合  </p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;这个/a/就是正则表达式, 它也是一个对象, 这个正则表达式可以检查一个字符串是否有a, 且严格区分大小写。&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;检查str是否符合reg正则表达式&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))</span><br><span class="line">  </span><br><span class="line">  str = <span class="string">&#x27;cbad&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;检查str是否符合reg正则表达式&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))</span><br><span class="line">  </span><br><span class="line">  str = <span class="string">&#x27;gfAh&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;检查str是否符合reg正则表达式&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在正则表达式的构造函数中, <strong>可以传入一个匹配模式作为第二个参数</strong>。</p>
<p><code>i:忽略大小写</code>。<br><code>g:全局匹配模式</code>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;gfAh&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;加了修饰符i表示忽略大小写, 检查str是否符合reg正则表达式&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这是正则表达式最简单的匹配规则, <strong>找什么就写什么</strong>。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(57)正则表达式语法1</title>
    <url>/blog/javascript/57/</url>
    <content><![CDATA[<hr>
<h3 id="正则表达式字面量"><a href="#正则表达式字面量" class="headerlink" title="正则表达式字面量"></a>正则表达式字面量</h3><p>在前面的对象学习中。我们知道可以根据字面量来创建。比如 <strong>数组可以用 []来创建</strong>,  <strong>对象可以用 {}直接来创建</strong>。</p>
<p>前面学习创建正则表达式是通过构造函数创建的。</p>
<pre><code>var reg = new RegExp(&#39;a&#39;,&#39;i&#39;)
</code></pre>
<p>其实我们也可以使用字面量来创建正则表达式, 使用两个反斜杠：<code>//</code>, 即 /匹配规则/匹配模式。前面的正则就可以写成下面这样。这个和构造函数创建的正则表达式, 是一样的。</p>
<pre><code>var reg1 = /a/i
</code></pre>
<p>无论是使用构造函数创建还是通过字面量创建。他们各有千秋。</p>
<p>使用<strong>字面量创建正则表达式更加简单</strong>。<br>使用<strong>构造函数创建正则表达式更加灵活</strong>, 匹配规则即可以是字符串, 也可以是变量。</p>
<hr>
<h3 id="正则表达式语法1"><a href="#正则表达式语法1" class="headerlink" title="正则表达式语法1"></a>正则表达式语法1</h3><blockquote>
<p>| [ ]：检查多个</p>
</blockquote>
<p>当需要匹配的内容不止一个时, 就需要使用<code>或</code>的方式来检查了, | [ ]这两个都可以检查字符串中是否包含某A或某B。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;创建正则reg = /a|b/i , 检查字符串中是否含有a或者b, 且忽略大小写&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/a|b/i</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;使用中括号这么写 [ab] == a|b  也是或的关系&quot;</span>)</span><br><span class="line">  reg = <span class="regexp">/[ab]/i</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>检查是否有字母</p>
</blockquote>
<p>检查是否有字母, 不需要 [abcdefghij…] 全部都写完, 直接<code>[a-z]</code> 即可, 表示从a到z全部的字母都需要匹配检查。当然这只是检查小写字母。那么同理大写字母的检查, 可以写成 <code>[A-Z]</code>。通过既要检查小写又要检查大写, 可以写成 <code>[A-z]</code>的方式。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;创建正则reg = /[a-z]/ , 任意小写字母&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/[a-z]/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;创建正则reg = /[A-Z]/ , 任意大写字母&quot;</span>)</span><br><span class="line">  reg = <span class="regexp">/[A-Z]/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;Q&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;我们知道正则加上修饰符i可以忽略大小写, reg = /[a-z]/i可以reg = /[A-Z]/i也可以, 但还有更简单的写法, reg = /[A-z]/大写A小写z, 表示表示所有的字母, 包括大小写。&quot;</span>)</span><br><span class="line">  reg = <span class="regexp">/[A-z]/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;R&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;r&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><code>需求</code>：查一个字符串中是否有abc或adc或aec。就前面学到的内容, 我们可以这么写。</p>
<pre><code>reg = /abc|adc|aec/
</code></pre>
<p>不过这中写法还是不够简便, 这三个都是a开头c结尾, 只有中间三个不同, 可以这么写。</p>
<pre><code>reg = /a[bde]c/
</code></pre>
<blockquote>
<p>[^]：除了</p>
</blockquote>
<p>表示除了包含的元素, 还有其他的元素。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;找除了a和b以外的东西/[^ab]/&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/[^ab]/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>匹配数字</p>
</blockquote>
<p>匹配数组可以使用 <code>[0-9]</code>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;匹配数字/[0-9]/&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/[0-9]/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;4&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;6&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;除了数字还有其他的元素/[^0-9]/&quot;</span>)</span><br><span class="line">  reg = <span class="regexp">/[^0-9]/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;4&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;4a&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(58)字符串和正则相关的方法</title>
    <url>/blog/javascript/58/</url>
    <content><![CDATA[<hr>
<h3 id="字符串和正则相关的方法"><a href="#字符串和正则相关的方法" class="headerlink" title="字符串和正则相关的方法"></a>字符串和正则相关的方法</h3><blockquote>
<p>split()：将一个字符串拆分为一个数组</p>
</blockquote>
<p>前面学习了使用split将字符串拆分成数组</p>
<pre><code>var str = &quot;1a2b3c4d5f6g&quot;
var res = str.split(&quot;c&quot;)
console.log(res) // [&quot;1a2b3&quot;,&quot;4d5f6g&quot;]
</code></pre>
<p>但是如果我们想根据任意字母, 将这个字符串拆分成数组就不太灵活了。<strong>split()方法中, 可以传递一个正则表达式, 作为参数。这样split方法就可以根据正则表达式去拆分字符串。</strong></p>
<p>**注意, **使用split即使不使用全局匹配, 它还是会全局拆分。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;1a2b3c4d5f6g&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;不分区大小写, 按字母拆分&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> res = str.<span class="title function_">split</span>(<span class="regexp">/[A-z]/</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>search()：可以搜索字符串中是否含有指定内容, 类似indexOf()</p>
</blockquote>
<p>search()如果搜索到指定的内容, 则会返回该指定内容<strong>第一次出现的索引</strong>。如果<strong>没有搜索到指定内容, 则会返回-1 <strong>。</strong>到目前为止, search还是和indexOf是一样的效果</strong>。</p>
<p><code>但是search()可以接收一个正则表达式作为参数</code>, 然后会根据正则表达式去检索字符串的内容。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;hello abc hello abc&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;找到abc的位置, a的索引为6, 第二个abc就直接略过了&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> res = str.<span class="title function_">search</span>(<span class="string">&quot;abc&quot;</span>) </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;搜索字符串是否含有abc aec afc, 这里第一个满足匹配规则的是abc, 所以直接就返回了6.其他的就不再检索&quot;</span>)</span><br><span class="line">  str = <span class="string">&quot;hello abc hello aec afc&quot;</span></span><br><span class="line">  res = str.<span class="title function_">search</span>(<span class="regexp">/a[bef]c/</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;search只会查找第一个, 不会全局匹配(即使指定了全局匹配也不行)&quot;</span>)</span><br><span class="line">  res = str.<span class="title function_">search</span>(<span class="regexp">/a[bef]c/g</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>match()</p>
</blockquote>
<p>可以根据正则表达式, 从一个字符串中, 将符合条件的内容提取出来。</p>
<pre><code>var str = &quot;1a2b3c4d5f6g&quot;
</code></pre>
<p>需求：<strong>提取所有的字母</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;1a2b3c4d5f6g&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;匹配字母, 忽略大小写&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[A-z]/</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;默认情况下, match只会找到第一个符合要求的内容, 到以后, 就会停止检索。所以需要加上修饰符g全局匹配规则&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[A-z]/g</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>match会将匹配到的内容封装到一个数组中返回, 那怕只匹配到一个</code>。</p>
<blockquote>
<p>replace()：可以将字符串中指定的内容, 替换为新的内容。</p>
</blockquote>
<p>replace()接收2个参数<br>replace(“指定的内容或者正则表达式”,”新的内容”)</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;1a2a3a4d5f6gA&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;指定的内容a, 替换为@符&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;@&quot;</span>)) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;发现只替换了一个a, 相比指定的内容, 正则表表达式更灵活, /a/g可以设置全局替换&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="regexp">/a/g</span>,<span class="string">&quot;@&quot;</span>)) </span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;还可以添加多个修饰符, 比如i忽略大小写&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="regexp">/a/gi</span>,<span class="string">&quot;@&quot;</span>)) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果不想替换, <strong>仅仅是要删除</strong>, 那第二个参数, 可以<strong>设置为一个空字符串</strong>。</p>
<pre><code>var str = &quot;1a2a3a4d5f6gA&quot;
var res = str.replace(/[a-z]/gi,&quot;&quot;)
console.log(res) // 123456
</code></pre>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(59)正则表达式语法2</title>
    <url>/blog/javascript/59/</url>
    <content><![CDATA[<hr>
<p>创建一个正则表达式, 检查字符串中是否含有aaa。如果要匹配的内容重复, 且个数较多时, 这么写也比较麻烦。比如要匹配100个连续的a…。总不能写100个a。</p>
<pre><code>&lt;script&gt;
  var reg = /aaa/
  console.log(reg.test(&#39;abc&#39;))
  console.log(reg.test(&#39;aaabc&#39;))
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="正则表达式语法2"><a href="#正则表达式语法2" class="headerlink" title="正则表达式语法2"></a>正则表达式语法2</h3><blockquote>
<p>量词{n}：通过量词可以设置一个内容出现的次数。</p>
</blockquote>
<p><strong>{n} 正好出现n次</strong>。比如上面的需求, 检查连续100个a, 就可以写成<code>/a&#123;100&#125;/</code>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;reg = /a&#123;3&#125;/ 表示a连续出现3次&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/a&#123;3&#125;/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;aaabc&#x27;):&quot;</span>, reg.<span class="title function_">test</span>(<span class="string">&#x27;aaabc&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;aabc&#x27;):&quot;</span>, reg.<span class="title function_">test</span>(<span class="string">&#x27;aabc&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>{n,m} 出现n到m次</strong>。比如检查a, 是否出现了1-3次, 正则为 <code>/a&#123;1,3&#125;/</code>。注意了, 这里表示的是一个次数区间范围, 不是严格的3次。且在字符串中检查a意思是, 连续的一个a, 连续的两个aa, 连续的三个aaa。因为最低是连续一个a, 则字符串中只要有a就满足了。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;reg = /a&#123;1,3&#125;/ 表示a连续出现1-3次&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/a&#123;1,3&#125;/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ababab&#x27;):&quot;</span>, reg.<span class="title function_">test</span>(<span class="string">&#x27;ababab&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<p><strong>{n,} 出现n次及以上</strong>。如果我们对连续出现的次数有最低要求, 但没有最高要求时, 可以留空m的值。{n,}表示匹配的字符串连续出现n及n次以上, 没有上限。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;reg = /a&#123;2,&#125;/ 表示a连续出现2次及以上&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/a&#123;2,&#125;/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;aab&#x27;):&quot;</span>, reg.<span class="title function_">test</span>(<span class="string">&#x27;aab&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;abab&#x27;):&quot;</span>, reg.<span class="title function_">test</span>(<span class="string">&#x27;abab&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<p>注意：<code>量词只会对它前面的一个内容起作用</code>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;reg = /ab&#123;3&#125;/ 表示检查b是否连续出现3次, 而不是检查ab&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/ab&#123;3&#125;/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ababab&#x27;):&quot;</span>, reg.<span class="title function_">test</span>(<span class="string">&#x27;ababab&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;abbb&#x27;):&quot;</span>, reg.<span class="title function_">test</span>(<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>如果非要连为一个整体去检查, 可以使用括号将其包裹起来, 表示一个整体。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/(ab)&#123;3&#125;/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ababab&#x27;):&quot;</span>, reg.<span class="title function_">test</span>(<span class="string">&#x27;ababab&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>量词+：至少包含1个。</p>
</blockquote>
<p><strong>相当于{1,}</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/ab+c/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;+表示出现1次及以上&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ac&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;ac&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;abc&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;abbbbbbbbbc&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;abbbbbbbbbc&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>量词*：包含0个或更多。</p>
</blockquote>
<p><strong>相当于{0,}</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/ab*c/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;*表示出现0次及以上&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ac&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;ac&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;abc&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;abbbbbbbbbc&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;abbbbbbbbbc&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>量词?：包含0个或1个, 多了不行。</p>
</blockquote>
<p><strong>相当于{0,1}</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/ab?c/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;?表示出现0次或1次, 多了不行&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ac&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;ac&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;abc&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;abbbbbbbbbc&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;abbbbbbbbbc&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>^：检查一个字符串是否以指定内容开头</p>
</blockquote>
<p>注意这个 ^ 和前面的[^a]不同。 ^a表示字符串以a字母开头。[^a]表示除了a</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^a/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;/^a/ 字符串是否以a开头&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ac&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;ac&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ca&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;ca&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>$：检查一个字符串是否以指定内容结尾</p>
</blockquote>
<p>检查一个字符串是否以指定内容结尾</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/a$/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;/a$/ 字符串是否以a结尾&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ac&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;ac&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;ca&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;ca&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;如果正则表达式同时使用^和$, 则要求字符串必须完全符合正则表达式&quot;</span>)</span><br><span class="line">  reg = <span class="regexp">/^a$/</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;aa&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reg.test(&#x27;a&#x27;) = &quot;</span> + reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>创建一个正则表达式, 检查一个字符串是否是一个手机号</p>
</blockquote>
<p>要使用正则判断是否为手机号。<strong>首先要知道手机号的规则</strong>。</p>
<ol>
<li>手机号都是11位</li>
<li>第一位都是1(国内的手机)  ^1</li>
<li>第二位是3-9的任意数字。  [3-9]</li>
<li>三位以后是任意数字9个 [0-9]{9}$</li>
</ol>
<p>得出匹配手机号的正则是 <code>/^1\[3-9\]\[0-9\]&#123;9&#125;$/</code>。</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(6)布尔值：Boolean</title>
    <url>/blog/javascript/6/</url>
    <content><![CDATA[<hr>
<h3 id="布尔值：Boolean"><a href="#布尔值：Boolean" class="headerlink" title="布尔值：Boolean"></a>布尔值：Boolean</h3><p>Boolean只有两个值, 一个true, 一个false。true表示逻辑上的真, false表示逻辑上的不成立, 为假。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bool的值是：&quot;</span> + bool); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bool的值类型是：&quot;</span> + <span class="keyword">typeof</span> bool); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  bool = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bool的值是：&quot;</span> + bool); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bool的值类型是：&quot;</span> + <span class="keyword">typeof</span> bool); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(60)正则表达式语法3</title>
    <url>/blog/javascript/60/</url>
    <content><![CDATA[<hr>
<h3 id="正则表达式语法3"><a href="#正则表达式语法3" class="headerlink" title="正则表达式语法3"></a>正则表达式语法3</h3><blockquote>
<p>.</p>
</blockquote>
<p>检查一个字符串中是否含有.点</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/./</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(&quot;.&quot;):&#x27;</span>, reg.<span class="title function_">test</span>(<span class="string">&quot;.&quot;</span>)) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(&quot;a.b&quot;):&#x27;</span>, reg.<span class="title function_">test</span>(<span class="string">&quot;a.b&quot;</span>)) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(&quot;ab&quot;):&#x27;</span>, reg.<span class="title function_">test</span>(<span class="string">&quot;ab&quot;</span>)) <span class="comment">// true没有.也返回了true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>实时上.<strong>点没有被正确匹配</strong>, 这里的.点, 表示查找单个字符(除了换行和行结束符)。说白了, 这个.点匹配任意字符！！<strong>我们需要告诉test方法, 这个.点, 就是一个点</strong>。这就涉及到转义了。</p>
<blockquote>
<p>\：转义字符</p>
</blockquote>
<p>当需要<code>匹配一些特殊字符</code>时, 我们需要使用转义字符先转义。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\./</span>  <span class="comment">// &lt;--- 将/./ 修改为 /\./</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(&quot;a.b&quot;) = &#x27;</span> + reg.<span class="title function_">test</span>(<span class="string">&quot;a.b&quot;</span>)) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(&quot;ab&quot;) = &#x27;</span> + reg.<span class="title function_">test</span>(<span class="string">&quot;ab&quot;</span>)) <span class="comment">// false</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>通过字面量</strong>创建正则时。<br><code>\. 表示.</code><br><code>\\ 表示\</code>, 两个斜杠, 第一个转义后一个转义符号, 表示转义符号本身。</p>
<p><strong>但是</strong>如果<strong>使用构造函数创建时</strong>, 也这样做。<code>就有问题了</code>。</p>
<pre><code>var reg = new RegExp(&quot;\.&quot;)
</code></pre>
<p>构造函数中<strong>正则的位置传入的是一个字符串</strong>, 转义符号会被认为是对 .点的转义,  最终变成 &#x2F;.&#x2F;<br>在字符串中, 我们还需要<strong>对转义符号本身进行转义</strong>。</p>
<pre><code>reg = new RegExp(&quot;\\.&quot;)  //这样才能得到正确的正则表达式 /\./ 
</code></pre>
<blockquote>
<p>\w、\W</p>
</blockquote>
<p><strong>\w 任意字母、数字、_ 相当于[A-z0-9_]</strong><br><strong>\W 除了字母、数字、_ 相当于[^A-z0-9_]</strong></p>
<blockquote>
<p>\d、\D</p>
</blockquote>
<p><strong>\d 任意数字 相当于[0-9]</strong><br><strong>\D 除了数字 相当于[^0-9]</strong></p>
<blockquote>
<p>\s、\S</p>
</blockquote>
<p><strong>\s 空格</strong><br><strong>\S 除了空格</strong></p>
<blockquote>
<p>\b、\B</p>
</blockquote>
<p><strong>\b 单词边界</strong><br><strong>\B 除了单词边界</strong></p>
<p>我们需要一个示例来解释什么叫单词边界。</p>
<p>需求：创建一个正则表达式检查一个字符串<strong>是否含有单词child</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/child/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;reg.test(&quot;child&quot;)&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;child&quot;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;reg.test(&quot;hello child&quot;)&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;hello child&quot;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;reg.test(&quot;hello children&quot;) 这就有问题了children和child是两个单词了&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;hello children&quot;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;reg.test(&quot;hellochildren&quot;)所以类似/child/ 这种正则的检查, 无论字符串中是不是一个独立的单词, 都是true, 这不对&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;hellochildren&quot;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>我们要求child的前面没有单词, child后面也不能有单词, <strong>前后空出的部分就叫做单词边界</strong>。<br>所以 上述需求就只能使用\b</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\bchild\b/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;reg.test(&quot;child&quot;)&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;child&quot;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;reg.test(&quot;hello child&quot;)&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;hello child&quot;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;reg.test(&quot;hello children&quot;)&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;hello children&quot;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;reg.test(&quot;hellochildren&quot;)&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;hellochildren&quot;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>去除字符串中的空格</p>
</blockquote>
<pre><code>var str = &quot;   abc   &quot;
</code></pre>
<p>需求：去除字符串中的空格</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;   abc   &quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;去掉字符串中的空格&quot;</span>)</span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str = &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(str))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;但是这仍然有个问题 , 也许字符串中需要的空格也被去掉了, 这显然不太合适, 所以一般我们只是去除字符串两边的空格&quot;</span>)</span><br><span class="line">  str = <span class="string">&quot;   hello world   &quot;</span></span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str = &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(str))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>去除字符串两边的空格</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;   hello world   &quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;先来去除开头的空格, ^\\s表示以空格开头, 同时要加上*号匹配0个或多个。&quot;</span>)</span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/^\s*/</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str = &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(str))</span><br><span class="line">  </span><br><span class="line">  str = <span class="string">&quot;   hello world   &quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;再来去除后面的空格, \\s*$表示匹配0个或多个空格, 并以空格结尾。&quot;</span>)</span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/\s*$/</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str = &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(str))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>来合并一下</strong></p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;   hello world   &quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;合并为/^\\s*|\\s*$/。发现只有前面的空格正确去除了, 后面的还是只去除了一个&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/^\s*|\s*$/</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str = &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(str))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;修改为全局配置/^\\s*|\\s*$/g。这样就正常了。&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str = &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(str))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>其中的*号也可以修改为+号, 匹配1个或多个。</p>
<pre><code>str = str.replace(/^\s*|\s*$/g,&quot;&quot;) 
</code></pre>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(63)事件的简介</title>
    <url>/blog/javascript/63/</url>
    <content><![CDATA[<hr>
<h3 id="事件的简介"><a href="#事件的简介" class="headerlink" title="事件的简介"></a>事件的简介</h3><p>事件, 就是文档或浏览器窗口中发生的一些特定的交互。JavaScript与html之间的交互是通过事件实现的, 对于web来说, 有一些常常遇到的事件, 比如点击某个元素, 将鼠标移动至某个元素上方, 按下键盘上的某个键等。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;button&#123;margin-<span class="attr">bottom</span>:5px&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;单击事件&#x27;)&quot;</span>&gt;</span>单击事件onclick<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">ondblclick</span>=<span class="string">&quot;console.log(&#x27;双击事件&#x27;)&quot;</span>&gt;</span>双击事件ondblclick<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这种将事件写在标签里的方式, 让文档结构和行为耦合, 不推荐使用<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>我们可以为按钮对应事件绑定处理函数的形式来相应事件。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;.<span class="property">btnClass</span>&#123;margin-<span class="attr">bottom</span>:5px;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btnClass&quot;</span>&gt;</span>单击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.btnClass&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">/*给Dom对象添加属性, 属性等于一个函数这个函数称为响应函数, 只有在满足条件时触发*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生点击事件&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(64)文档的加载</title>
    <url>/blog/javascript/64/</url>
    <content><![CDATA[<hr>
<h3 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h3><p>当我们把script标签放到head里面去以后, 虽然写法没变, 但是报错了, 错误信息显示：<strong>不能给一个为null的元素绑定onclick事件！！</strong>我们是在为btn按钮绑定单机相应事件, 为什么btn为null了呢。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  button&#123;margin-<span class="attr">bottom</span>:5px&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 获取id名为btn的按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 为这个按钮绑定一个单机相应函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生点击事件&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>这就涉及到浏览器加载页面的一个顺序问题了, 浏览器在加载一个页面时, 是按照自上向下的顺序加载的。读取到一行就运行一行。如果将script标签写到页面的上边。在代码执行时, 页面还没有加载。也就是说当我们var btn &#x3D; document.getElementById(“btn”)的时候, 按钮都还没有加载出来。也就获取不到该按钮元素。所以btn直接为null了。所以将js代码写在页面的下面。可以在页面加载完毕后, 再执行js代码。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;点我一下&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 获取id名为btn的按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 为这个按钮绑定一个单机相应函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生点击事件&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>如果非要将js代码放到head中, 也不是完全没办法, 事实上, 我们希望在head中的js代码, 在页面加载完成后再运行。而页面加载完成也是一个事件, 我们可以获取到文档加载完成的事件。<br>window.onload, 这样就不会出现dom获取不到的情况了。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  button&#123;margin-<span class="attr">bottom</span>:5px&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">alert</span>(<span class="string">&quot;发生点击事件&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(62)DOM简介</title>
    <url>/blog/javascript/62/</url>
    <content><![CDATA[<hr>
<h3 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h3><p>前面讲了对象有内建对象、宿主对象、自定义对象什么的。DOM就是浏览器提供的对象, 除此之外还有BOM, 它就是宿主对象。</p>
<p>在此之前, 我们需要先了解什么是DOM, DOM 是 Document Object Model的缩写。表示文档对象模型。<br>DOM的作用是将网页转为一个javascript对象, 从而可以使用JavaScript来对HTML文档进行操作。只要理解了DOM就可以随心所欲的操作WEB页面。</p>
<ul>
<li>Document文档：表示整个HTML网页文档</li>
<li>Object对象：表示网页中每一个部分都转换成了一个对象。(包括每一个标签, 每一行文本, 注释都会被转换成对象)</li>
<li>Model模型：使用模型来表示<strong>对象之间的关系</strong>(通常一个页面会有大量的对象, 不便管理, model模型就是来表示对象之间的关系), 方便管理获取对象。</li>
</ul>
<p>图示：</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/js14.png" alt="js14"></p>
<hr>
<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>节点Node, 是构成网页的最基本的组成部分, 网页中每一个部分都可以称为是一个节点。<br>比如：html标签, 标签属性, 标签文本, 整个文档等都是一个节点。</p>
<p>虽然都是节点, 但他们的具体类型是不同的。节点的类型不同, 属性和方法也都不尽相同。<br>常用的节点分为四类：</p>
<ol>
<li>文档节点：整个HTML文档</li>
<li>元素节点(标签节点)：HTML标签</li>
<li>属性节点：标签的属性</li>
<li>文本节点：标签中的文本</li>
</ol>
<p>怎么操作节点呢？浏览器已经为我们提供了文档节点对象, 这个对象是window的一个属性, 是全局变量, 可以在页面直接使用。</p>
<p><strong>节点的常用属性</strong></p>
<p>一般地, 节点至少拥有nodeType、nodeName和nodeValue这三个基本属性。</p>
<table>
<thead>
<tr>
<th></th>
<th>nodeName</th>
<th>nodeType</th>
<th>nodeValue</th>
</tr>
</thead>
<tbody><tr>
<td>文档节点</td>
<td>#document</td>
<td>9</td>
<td>null</td>
</tr>
<tr>
<td>元素节点</td>
<td>标签名</td>
<td>1</td>
<td>null</td>
</tr>
<tr>
<td>属性节点</td>
<td>属性名</td>
<td>2</td>
<td>属性值</td>
</tr>
<tr>
<td>文本节点</td>
<td>#text</td>
<td>3</td>
<td>文本内容</td>
</tr>
</tbody></table>
<hr>
<h3 id="文档节点"><a href="#文档节点" class="headerlink" title="文档节点"></a>文档节点</h3><figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;获取文档节点document&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;文档节点的nodeName&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">nodeName</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;文档节点的nodeType&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">nodeType</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;文档节点的nodeValue&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">nodeValue</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="元素节点-标签节点"><a href="#元素节点-标签节点" class="headerlink" title="元素节点(标签节点)"></a>元素节点(标签节点)</h3><p><strong>获取元素节点</strong></p>
<p>document.getElementById();</p>
<p>id名, 在实际开发中较少使用, 选择器中多用class, id一般只用在顶级层存在 不能太过依赖id</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;元素节点&quot;</span>,<span class="string">&quot;document.getElementById(&#x27;btn&#x27;)&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(el)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;元素节点的nodeName&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(el.<span class="property">nodeName</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;元素节点的nodeType&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(el.<span class="property">nodeType</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;元素节点的nodeValue&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(el.<span class="property">nodeValue</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>根据标签名查找元素<br><strong>document.getElementsByTagName();</strong><br>根据类名查找元素<br><strong>document.getElementsByClassName();</strong><br>根据name属性值查找元素, 一般不用。<br><strong>document.getElementsByName();</strong>  </p>
<p>css选择符模式, 返回与该模式匹配的第一个元素, 结果为一个元素;如果没找到匹配的元素, 则返回null。<br><strong>document.querySelector();</strong><br>css选择符模式, 返回与该模式匹配的所有元素, 结果为一个类数组。<br><strong>document.querySelectorAll()</strong>  </p>
<p><strong>最后再根据查询的资料总结一下：</strong><br>query选择符选出来的元素及元素数组是静态的, 而getElement这种方法选出的元素是动态的。静态的就是说选出的所有元素的数组, 不会随着文档操作而改变．<br>在使用的时候getElement这种方法性能比较好, query选择符则比较方便．</p>
<hr>
<h3 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h3><p>获取元素节点的属性节点。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;属性节点&quot;</span>,<span class="string">&quot;document.getElementById(&#x27;btn&#x27;).getAttributeNode(&#x27;id&#x27;)&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> attr = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">getAttributeNode</span>(<span class="string">&quot;id&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(attr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;属性节点的nodeName&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(attr.<span class="property">nodeName</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;属性节点的nodeType&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(attr.<span class="property">nodeType</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;属性节点的nodeValue&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(attr.<span class="property">nodeValue</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="文本节点"><a href="#文本节点" class="headerlink" title="文本节点"></a>文本节点</h3><p>获取文本节点</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;文本节点&quot;</span>,<span class="string">&quot;document.getElementById(&#x27;btn&#x27;).firstChild&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> txt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">firstChild</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(txt)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;文本节点的nodeName&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(txt.<span class="property">nodeName</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;文本节点的nodeType&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(txt.<span class="property">nodeType</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;文本节点的nodeValue&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(txt.<span class="property">nodeValue</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(65)DOM查询</title>
    <url>/blog/javascript/65/</url>
    <content><![CDATA[<hr>
<h3 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h3><p>练习：DOM查询</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  button&#123;margin-<span class="attr">bottom</span>:5px&#125;</span><br><span class="line">  li&#123;<span class="attr">display</span>:inline-block;background-<span class="attr">color</span>:lightBlue&#125;</span><br><span class="line">  hr&#123;<span class="attr">border</span>: 1px solid red;&#125;</span><br><span class="line">  input[type=<span class="string">&quot;text&quot;</span>]&#123;<span class="attr">width</span>:60px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你喜欢哪个城市？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你喜欢哪个单机游戏？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;rl&quot;</span>&gt;</span>红警<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>实况<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>极品飞车<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>魔兽<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你手机的操作系统是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>IOS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;android&quot;</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows phone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">男 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">女 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">名字 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abcd&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>查找#bj节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span>查找所有li节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn03&quot;</span>&gt;</span>查找name=gender的所有节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn01.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;通过document获取指定的id节点, 返回一个节点对象, document.getElementById(&#x27;bj&#x27;)&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;获取节点内的html, document.getElementById(&#x27;bj&#x27;).innerHTML&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>).<span class="property">innerHTML</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn02 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn02&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn02.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> obj = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;document.getElementsByTagName返回的是一个类数组对象, document.getElementsByTagName(&#x27;li&#x27;)&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn03 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn03&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn03.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> obj = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;gender&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;document.getElementsByName返回一个类数组对象, document.getElementsByName(&#x27;gender&#x27;)&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 读取节点属性, 直接使用。  元素.属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 但唯独class属性不能用这种方法。元素.className</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key], obj[key].<span class="property">value</span>, obj[key].<span class="property">className</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(66)图片切换</title>
    <url>/blog/javascript/66/</url>
    <content><![CDATA[<hr>
<h3 id="图片切换"><a href="#图片切换" class="headerlink" title="图片切换"></a>图片切换</h3><p>练习：图片切换</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .<span class="property">outter</span>&#123;&#125;</span><br><span class="line">  img&#123;<span class="attr">height</span>:100px;<span class="attr">display</span>:block;margin-<span class="attr">bottom</span>:10px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../../../../../../../../../blog/static/blog/md/css.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;css&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;prev&quot;</span>&gt;</span>上一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> prev = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prev&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> next = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;next&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>)[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> imgarr=[<span class="string">&quot;../../../../../../../../../../blog/static/blog/md/css.svg&quot;</span>, <span class="string">&quot;../../../../../../../../../../blog/static/blog/md/hexo.svg&quot;</span>, <span class="string">&quot;../../../../../../../../../../blog/static/blog/md/javascript.svg&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> index = <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  prev.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    index--;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      index = imgarr.<span class="property">length</span> - <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    img.<span class="property">src</span> = imgarr[index];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  next.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    index++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(index&gt;imgarr.<span class="property">length</span>-<span class="number">1</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      index = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    img.<span class="property">src</span> = imgarr[index];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(61)邮件正则</title>
    <url>/blog/javascript/61/</url>
    <content><![CDATA[<hr>
<h3 id="邮件正则"><a href="#邮件正则" class="headerlink" title="邮件正则"></a>邮件正则</h3><p>要写电子邮件的正则, 首先要了解电子邮件的规则。</p>
<p>第一部分@第二部分.第三部分.第四部分</p>
<ol>
<li>第一部分应该是网站的邮箱用户名规则。一般是任意字母数字下划线, 用户名也可能有点加任意字母数字下划线, 当然这部分应该是可有可无的。</li>
<li>@符 就是@符</li>
<li>第二部分是网址, 应该是任意字母数字。</li>
<li>然后就是 点 + 第三部分 先设置为任意字母 2-5位</li>
<li>最后 还是 点 + 第四部分, 这部分也是可有可无的。</li>
</ol>
<p>得出以下正则表达式</p>
<pre><code>var emailReg = /^\w&#123;3,&#125;(\.\w&#123;1,&#125;)*@[A-z0-9]&#123;1,&#125;(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/
</code></pre>
<p>这不见得是最合适的表达式, 只是需要在学习的过程中, 了解并熟悉, 很多正则并不需要完全靠我们自己去写, 有很多常用的正则在网上都有别人已经写好了的。<code>但是在我们需要的时候</code>可以对别人做好的基础上, 根据需求做出适当的修改。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> emailReg = <span class="regexp">/^\w&#123;3,&#125;(\.\w&#123;1,&#125;)*@[A-z0-9]&#123;1,&#125;(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;emailReg.test(&quot;abc.abc@abc.com&quot;)&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(emailReg.<span class="title function_">test</span>(<span class="string">&quot;abc.abc@abc.com&quot;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;emailReg.test(&quot;abc.abc.a@456.12&quot;)&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(emailReg.<span class="title function_">test</span>(<span class="string">&quot;abc.abc.a@456.12&quot;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(67)获取元素节点</title>
    <url>/blog/javascript/67/</url>
    <content><![CDATA[<hr>
<h3 id="获取元素节点"><a href="#获取元素节点" class="headerlink" title="获取元素节点"></a>获取元素节点</h3><p>前面讲了通过document对象获取元素。</p>
<ol>
<li>document.getElementById()</li>
<li>document.getElementsByTagName()</li>
<li>document.getElementsByName()</li>
</ol>
<p>通过document对象获取到元素以后, 还可以通过元素再获取子节点元素。</p>
<ol>
<li>getElementsByTagName()</li>
<li>childNodes</li>
<li>firstChild</li>
<li>lastChild</li>
</ol>
<p>它有一个方法三个属性。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  button&#123;margin-<span class="attr">bottom</span>:5px&#125;</span><br><span class="line">  li&#123;<span class="attr">display</span>:inline-block;background-<span class="attr">color</span>:lightBlue&#125;</span><br><span class="line">  hr&#123;<span class="attr">border</span>: 1px solid red;&#125;</span><br><span class="line">  input[type=<span class="string">&quot;text&quot;</span>]&#123;<span class="attr">width</span>:60px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你喜欢哪个城市？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你喜欢哪个单机游戏？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;rl&quot;</span>&gt;</span>红警<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>实况<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>极品飞车<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>魔兽<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你手机的操作系统是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>IOS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;android&quot;</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows phone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">男 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">女 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">名字 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abcd&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>btn01:查找#bj节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span>btn02:查找所有li节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn03&quot;</span>&gt;</span>btn03:查找name=gender的所有节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn04&quot;</span>&gt;</span>btn04:查找#city下所有li节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn05&quot;</span>&gt;</span>btn05:返回#city下所有子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn06&quot;</span>&gt;</span>btn06:返回#phone的第一个子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var btn01 = document.getElementById(&quot;btn01&quot;)</span><br><span class="line">  btn01.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    console.warn(&quot;通过document获取指定的id节点, 返回一个节点对象, document.getElementById(&#x27;bj&#x27;)&quot;)</span><br><span class="line">    console.log(document.getElementById(&quot;bj&quot;))</span><br><span class="line">    console.warn(&quot;获取节点内的html, document.getElementById(&#x27;bj&#x27;).innerHTML&quot;)</span><br><span class="line">    console.log(document.getElementById(&quot;bj&quot;).innerHTML)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn02 = document.getElementById(&quot;btn02&quot;)</span><br><span class="line">  btn02.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var obj = document.getElementsByTagName(&quot;li&quot;)</span><br><span class="line">    console.warn(&quot;document.getElementsByTagName返回的是一个类数组对象, document.getElementsByTagName(&#x27;li&#x27;)&quot;)</span><br><span class="line">    console.log(obj)</span><br><span class="line">    Object.keys(obj).forEach(key =&gt;&#123;</span><br><span class="line">      console.log(obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn03 = document.getElementById(&quot;btn03&quot;)</span><br><span class="line">  btn03.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var obj = document.getElementsByName(&quot;gender&quot;)</span><br><span class="line">    console.warn(&quot;document.getElementsByName返回一个类数组对象, document.getElementsByName(&#x27;gender&#x27;)&quot;)</span><br><span class="line">    console.log(obj)</span><br><span class="line">    Object.keys(obj).forEach(key =&gt;&#123;</span><br><span class="line">      // 读取节点属性, 直接使用。  元素.属性</span><br><span class="line">      // 但唯独class属性不能用这种方法。元素.className</span><br><span class="line">      console.log(obj[key], obj[key].value, obj[key].className)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn04 = document.getElementById(&quot;btn04&quot;)</span><br><span class="line">  btn04.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getcity = document.getElementById(&quot;city&quot;)</span><br><span class="line">    var nodeList = getcity.getElementsByTagName(&quot;li&quot;)</span><br><span class="line">    console.warn(&quot;通过节点获取子节点。getElementsByTagName(), getcity.getElementsByTagName(&#x27;li&#x27;)&quot;)</span><br><span class="line">    console.log(nodeList)</span><br><span class="line">    Object.keys(nodeList).forEach(key =&gt;&#123;</span><br><span class="line">      console.log(nodeList[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn05 = document.getElementById(&quot;btn05&quot;)</span><br><span class="line">  btn05.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getcity = document.getElementById(&quot;city&quot;)</span><br><span class="line">    var nodeList = getcity.childNodes</span><br><span class="line">    console.warn(&quot;childNodes获取节点下, 包括文本节点在内的所有节点,注意：在IE8及以下, 不会获取文本节点。。getcity.childNodes&quot;)</span><br><span class="line">    console.log(nodeList, nodeList.length)</span><br><span class="line">    Object.keys(nodeList).forEach(key =&gt;&#123;</span><br><span class="line">      console.log(nodeList[key])</span><br><span class="line">    &#125;)</span><br><span class="line">    console.warn(&quot;children获取节点下的所有--&gt;元素&lt;--。getcity.children&quot;)</span><br><span class="line">    console.log(getcity.children, getcity.children.length)</span><br><span class="line">    Object.keys(getcity.children).forEach(key =&gt;&#123;</span><br><span class="line">      console.log(getcity.children[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn06 = document.getElementById(&quot;btn06&quot;)</span><br><span class="line">  btn06.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getDomPhone = document.getElementById(&quot;phone&quot;)</span><br><span class="line">    console.warn(&quot;firstChild,获取当前元素的第一个子节点, 包括文本节点。&quot;)</span><br><span class="line">    console.log(getDomPhone.firstChild)</span><br><span class="line">    console.warn(&quot;firstElementChild,获取当前元素的第一个--&gt;元素&lt;--, 不包括文本节点。注意IE8及以下不兼容&quot;)</span><br><span class="line">    console.log(getDomPhone.firstElementChild)</span><br><span class="line">    console.warn(&quot;lastChild,获取当前元素的最后一个节点, 包括文本节点&quot;)</span><br><span class="line">    console.log(getDomPhone.lastChild)</span><br><span class="line">    console.warn(&quot;lastElementChild,获取当前元素的最后一个--&gt;元素&lt;--, 不包括文本节点。注意IE8及以下不兼容&quot;)</span><br><span class="line">    console.log(getDomPhone.lastElementChild)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="获取父节点及兄弟节点"><a href="#获取父节点及兄弟节点" class="headerlink" title="获取父节点及兄弟节点"></a>获取父节点及兄弟节点</h3><ol>
<li>parentNode获取节点的父级节点</li>
<li>previousSibling获取上一个兄弟节点</li>
</ol>
<p>例：</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  button&#123;margin-<span class="attr">bottom</span>:5px&#125;</span><br><span class="line">  li&#123;<span class="attr">display</span>:inline-block;background-<span class="attr">color</span>:lightBlue&#125;</span><br><span class="line">  hr&#123;<span class="attr">border</span>: 1px solid red;&#125;</span><br><span class="line">  input[type=<span class="string">&quot;text&quot;</span>]&#123;<span class="attr">width</span>:60px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你喜欢哪个城市？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你喜欢哪个单机游戏？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;rl&quot;</span>&gt;</span>红警<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>实况<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>极品飞车<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>魔兽<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你手机的操作系统是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>IOS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;android&quot;</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows phone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">男 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">女 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">名字 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abcd&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>btn01:查找#bj节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span>btn02:查找所有li节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn03&quot;</span>&gt;</span>btn03:查找name=gender的所有节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn04&quot;</span>&gt;</span>btn04:查找#city下所有li节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn05&quot;</span>&gt;</span>btn05:返回#city下所有子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn06&quot;</span>&gt;</span>btn06:返回#phone的第一个子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn07&quot;</span>&gt;</span>btn07:返回#bj的父节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn08&quot;</span>&gt;</span>btn08:返回#android的前一个兄弟节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn09&quot;</span>&gt;</span>btn09:返回#username的value属性值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn10&quot;</span>&gt;</span>btn10:设置#username的value属性值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn11&quot;</span>&gt;</span>btn11:返回#bj的文本值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var btn01 = document.getElementById(&quot;btn01&quot;)</span><br><span class="line">  btn01.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    console.warn(&quot;通过document获取指定的id节点, 返回一个节点对象, document.getElementById(&#x27;bj&#x27;)&quot;)</span><br><span class="line">    console.log(document.getElementById(&quot;bj&quot;))</span><br><span class="line">    console.warn(&quot;获取节点内的html, document.getElementById(&#x27;bj&#x27;).innerHTML&quot;)</span><br><span class="line">    console.log(document.getElementById(&quot;bj&quot;).innerHTML)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn02 = document.getElementById(&quot;btn02&quot;)</span><br><span class="line">  btn02.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var obj = document.getElementsByTagName(&quot;li&quot;)</span><br><span class="line">    console.warn(&quot;document.getElementsByTagName返回的是一个类数组对象, document.getElementsByTagName(&#x27;li&#x27;)&quot;)</span><br><span class="line">    console.log(obj)</span><br><span class="line">    Object.keys(obj).forEach(key =&gt;&#123;</span><br><span class="line">      console.log(obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn03 = document.getElementById(&quot;btn03&quot;)</span><br><span class="line">  btn03.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var obj = document.getElementsByName(&quot;gender&quot;)</span><br><span class="line">    console.warn(&quot;document.getElementsByName返回一个类数组对象, document.getElementsByName(&#x27;gender&#x27;)&quot;)</span><br><span class="line">    console.log(obj)</span><br><span class="line">    Object.keys(obj).forEach(key =&gt;&#123;</span><br><span class="line">      // 读取节点属性, 直接使用。  元素.属性</span><br><span class="line">      // 但唯独class属性不能用这种方法。元素.className</span><br><span class="line">      console.log(obj[key], obj[key].value, obj[key].className)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn04 = document.getElementById(&quot;btn04&quot;)</span><br><span class="line">  btn04.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getcity = document.getElementById(&quot;city&quot;)</span><br><span class="line">    var nodeList = getcity.getElementsByTagName(&quot;li&quot;)</span><br><span class="line">    console.warn(&quot;通过节点获取子节点。getElementsByTagName(), getcity.getElementsByTagName(&#x27;li&#x27;)&quot;)</span><br><span class="line">    console.log(nodeList)</span><br><span class="line">    Object.keys(nodeList).forEach(key =&gt;&#123;</span><br><span class="line">      console.log(nodeList[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn05 = document.getElementById(&quot;btn05&quot;)</span><br><span class="line">  btn05.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getcity = document.getElementById(&quot;city&quot;)</span><br><span class="line">    var nodeList = getcity.childNodes</span><br><span class="line">    console.warn(&quot;childNodes获取节点下, 包括文本节点在内的所有节点,注意：在IE8及以下, 不会获取文本节点。。getcity.childNodes&quot;)</span><br><span class="line">    console.log(nodeList, nodeList.length)</span><br><span class="line">    Object.keys(nodeList).forEach(key =&gt;&#123;</span><br><span class="line">      console.log(nodeList[key])</span><br><span class="line">    &#125;)</span><br><span class="line">    console.warn(&quot;children获取节点下的所有--&gt;元素&lt;--。getcity.children&quot;)</span><br><span class="line">    console.log(getcity.children, getcity.children.length)</span><br><span class="line">    Object.keys(getcity.children).forEach(key =&gt;&#123;</span><br><span class="line">      console.log(getcity.children[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn06 = document.getElementById(&quot;btn06&quot;)</span><br><span class="line">  btn06.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getDomPhone = document.getElementById(&quot;phone&quot;)</span><br><span class="line">    console.warn(&quot;firstChild,获取当前元素的第一个子节点, 包括文本节点。&quot;)</span><br><span class="line">    console.log(getDomPhone.firstChild)</span><br><span class="line">    console.warn(&quot;firstElementChild,获取当前元素的第一个--&gt;元素&lt;--, 不包括文本节点。注意IE8及以下不兼容&quot;)</span><br><span class="line">    console.log(getDomPhone.firstElementChild)</span><br><span class="line">    console.warn(&quot;lastChild,获取当前元素的最后一个节点, 包括文本节点&quot;)</span><br><span class="line">    console.log(getDomPhone.lastChild)</span><br><span class="line">    console.warn(&quot;lastElementChild,获取当前元素的最后一个--&gt;元素&lt;--, 不包括文本节点。注意IE8及以下不兼容&quot;)</span><br><span class="line">    console.log(getDomPhone.lastElementChild)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn07 = document.getElementById(&quot;btn07&quot;)</span><br><span class="line">  btn07.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getbj = document.getElementById(&quot;bj&quot;)</span><br><span class="line">    console.warn(&quot;parentNode,获取节点的父节点&quot;)</span><br><span class="line">    console.log(getbj.parentNode)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn08 = document.getElementById(&quot;btn08&quot;)</span><br><span class="line">  btn08.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getandroidDom = document.getElementById(&quot;android&quot;)</span><br><span class="line">    console.warn(&quot;previousSibling,获取节点的前一个兄弟节点, 注意它也会获取标签之间的空白节点&quot;)</span><br><span class="line">    console.log(getandroidDom.previousSibling)</span><br><span class="line">    console.warn(&quot;previousElementSibling,获取节点的前一个兄弟节点, 但它不会获取标签之间的空白节点, 但是IE8及以下不支持。&quot;)</span><br><span class="line">    console.log(getandroidDom.previousElementSibling)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn09 = document.getElementById(&quot;btn09&quot;)</span><br><span class="line">  btn09.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getuname = document.getElementById(&quot;username&quot;)</span><br><span class="line">    console.warn(&quot;读取标签属性。节点.属性&quot;)</span><br><span class="line">    console.log(getuname.value)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn10 = document.getElementById(&quot;btn10&quot;)</span><br><span class="line">  btn10.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getuname = document.getElementById(&quot;username&quot;)</span><br><span class="line">    console.warn(&quot;设置标签属性。节点.属性=新值&quot;)</span><br><span class="line">    getuname.value = &quot;给input设置了新的值&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  var btn11 = document.getElementById(&quot;btn11&quot;)</span><br><span class="line">  btn11.onclick = function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var getuname = document.getElementById(&quot;bj&quot;)</span><br><span class="line">    console.warn(&quot;innerHTML, innerText, 获取id为bj标签的文本值, 这里因为bj里面没有html, 所以innerHTML和innerText获取的值是一样的。&quot;)</span><br><span class="line">    console.log(getuname.innerHTML, getuname.innerText)</span><br><span class="line">    console.warn(&quot;除此之外, 还可以通过firstChild来获取bj下的文本节点, 再通过节点的nodeValue来获取文本值&quot;)</span><br><span class="line">    console.log(getuname.firstChild.nodeValue)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(68)全选练习</title>
    <url>/blog/javascript/68/</url>
    <content><![CDATA[<hr>
<h3 id="全选练习"><a href="#全选练习" class="headerlink" title="全选练习"></a>全选练习</h3><p>全选练习。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  button&#123;margin-<span class="attr">bottom</span>:5px&#125;</span><br><span class="line">  li&#123;<span class="attr">display</span>:inline-block;background-<span class="attr">color</span>:lightBlue&#125;</span><br><span class="line">  hr&#123;<span class="attr">border</span>: 1px solid red;&#125;</span><br><span class="line">  input[type=<span class="string">&quot;text&quot;</span>]&#123;<span class="attr">width</span>:60px;&#125;</span><br><span class="line">  label&#123;user-<span class="attr">select</span>:none;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class="line">  &lt;label&gt;你爱好的运动是？&lt;/label&gt;</span><br><span class="line">  &lt;br /&gt;</span><br><span class="line">  &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;足球&quot;&gt;足球&lt;/label&gt;</span><br><span class="line">  &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;篮球&quot;&gt;篮球&lt;/label&gt;</span><br><span class="line">  &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;羽毛球&quot;&gt;羽毛球&lt;/label&gt;</span><br><span class="line">  &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;乒乓球&quot;&gt;乒乓球&lt;/label&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; id=&quot;checkAll&quot; value=&quot;全选&quot; /&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; id=&quot;checkNone&quot; value=&quot;全不选&quot; /&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; id=&quot;checkAllNone&quot; value=&quot;全选/全不选&quot; /&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; id=&quot;checkRevers&quot; value=&quot;反选&quot; /&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; id=&quot;sendbtn&quot; value=&quot;提交&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function myclick(strid, func)&#123;</span><br><span class="line">    var btn = document.getElementById(strid)</span><br><span class="line">    btn.onclick = func</span><br><span class="line">  &#125;</span><br><span class="line">  var click = false</span><br><span class="line">  </span><br><span class="line">  // 全选</span><br><span class="line">  myclick(&quot;checkAll&quot;,function()&#123;</span><br><span class="line">    // 通过getElementsByName获取这几个复选框</span><br><span class="line">    var items = document.getElementsByName(&quot;items&quot;)</span><br><span class="line">    Object.keys(items).forEach(key =&gt;&#123;</span><br><span class="line">      items[key].checked = true</span><br><span class="line">      click = true</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 全不选</span><br><span class="line">  myclick(&quot;checkNone&quot;,function()&#123;</span><br><span class="line">    var items = document.getElementsByName(&quot;items&quot;)</span><br><span class="line">    Object.keys(items).forEach(key =&gt;&#123;</span><br><span class="line">      items[key].checked = false</span><br><span class="line">      click = false</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 全选/全不选</span><br><span class="line">  myclick(&quot;checkAllNone&quot;,function()&#123;</span><br><span class="line">    var items = document.getElementsByName(&quot;items&quot;)</span><br><span class="line">    click = !click</span><br><span class="line">    Object.keys(items).forEach(key =&gt;&#123;</span><br><span class="line">      items[key].checked = click</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 反选</span><br><span class="line">  myclick(&quot;checkRevers&quot;,function()&#123;</span><br><span class="line">    var items = document.getElementsByName(&quot;items&quot;)</span><br><span class="line">    Object.keys(items).forEach(key =&gt;&#123;</span><br><span class="line">      items[key].checked = !items[key].checked</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 提交</span><br><span class="line">  myclick(&quot;sendbtn&quot;,function()&#123;</span><br><span class="line">    console.clear()</span><br><span class="line">    var items = document.getElementsByName(&quot;items&quot;)</span><br><span class="line">    Object.keys(items).forEach(key =&gt;&#123;</span><br><span class="line">      if(items[key].checked)&#123;</span><br><span class="line">        console.log(items[key].value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(69)练习：DOM查询</title>
    <url>/blog/javascript/69/</url>
    <content><![CDATA[<hr>
<h3 id="练习：DOM查询"><a href="#练习：DOM查询" class="headerlink" title="练习：DOM查询"></a>练习：DOM查询</h3><p>获取body&#x2F;html&#x2F;所有元素</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;input&#123;margin-<span class="attr">bottom</span>:6px;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;getbody&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取body&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gethtml&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取html&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;all&quot;</span> <span class="attr">value</span>=<span class="string">&quot;document.all&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;xing&quot;</span> <span class="attr">value</span>=<span class="string">&quot;document.getElementsByTagName(&#x27;*&#x27;)&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">myclick</span>(<span class="params">strid, func</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(strid)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = func</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;getbody&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;document.getElementsByTagName(&#x27;body&#x27;)[0]&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body.<span class="property">nodeName</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    body = <span class="variable language_">document</span>.<span class="property">body</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;document.body&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body.<span class="property">nodeName</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;gethtml&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="property">documentElement</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;document.documentElement&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(html.<span class="property">nodeName</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;all&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> all = <span class="variable language_">document</span>.<span class="property">all</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;document.all : all, typeof all, all.length&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(all, <span class="keyword">typeof</span> all, all.<span class="property">length</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;document.all为undefined, 但是它又有长度。我们可以通过遍历来查看, 发现document.all其实就是获取页面里的所有元素。&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;xing&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> all = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;document.getElementsByTagName(&#x27;*&#x27;) : 也是获取页面中所有元素, 和document.all效果一样, 但它不是undefined&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(all, <span class="keyword">typeof</span> all, all.<span class="property">length</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>document.getElementsByClassName()<strong>除非不考虑兼容性问题</strong>, <code>这个方法只有IE9及以上有效</code>。也就是说了IE8及以下不能使用该方法。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;input&#123;margin-<span class="attr">bottom</span>:6px;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取class为box的元素&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">myclick</span>(<span class="params">strid, func</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(strid)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = func</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;btn01&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;box&quot;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>css选择器的方式选择元素<br><code>document.querySelector()</code><br>它需要一个选择器的字符串作为参数, 可以根据一个css选择器来查询一个元素节点。<br><code>这个方法IE8及以上就可以支持了。但是请注意：！！！！当查询的样式名, 应用于多个DOM元素时, 它不会返回所有元素, 它只能返回第一个满足该查询条件的元素。</code></p>
<p><code>document.querySelectorAll()</code><br>可以用来查询全部满足条件的元素。即使满足条件的元素只有一个(比如通过id查询), 它仍然会返回一个数组。<br>这个方法也是IE8及以上支持。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;input&#123;margin-<span class="attr">bottom</span>:6px;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是样式为box的div里面的div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是样式为box的div里面的div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是样式为box的div里面的div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span> <span class="attr">value</span>=<span class="string">&quot;querySelector()&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span> <span class="attr">value</span>=<span class="string">&quot;querySelectorAll()&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">myclick</span>(<span class="params">strid, func</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(strid)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = func</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;btn01&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box div&quot;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;btn02&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.box&quot;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(70)DOM的增删改</title>
    <url>/blog/javascript/70/</url>
    <content><![CDATA[<hr>
<h3 id="一些DOM对象方法"><a href="#一些DOM对象方法" class="headerlink" title="一些DOM对象方法"></a>一些DOM对象方法</h3><p>除了前面学过的getElementById()、getElementsByTagName()、getElementsByClassName()等, DOM元素还包括一些方法, 可以对DOM进行操作。</p>
<ol>
<li>appendChild()  把新的子节点添加到指定节点</li>
<li>removeChild()  删除子节点</li>
<li>replaceChild()  替换子节点</li>
<li>insertBefore()  在指定的子节点前面插入新的节点</li>
<li>createAttribute()  创建属性节点</li>
<li>createElement()  创建元素节点</li>
<li>createTextNode()  创建文本节点</li>
<li>getAttribute()  返回指定的属性值</li>
<li>setAttribute()  把指定属性设置或修改为指定的值</li>
</ol>
<p>DOM的增删改</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  input&#123;margin-<span class="attr">top</span>:6px;&#125;</span><br><span class="line">  ul&#123;list-style :none;<span class="attr">margin</span>:<span class="number">0</span>;<span class="attr">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line">  li&#123;<span class="attr">display</span>:inline-block;background-<span class="attr">color</span>:lightBlue;<span class="attr">margin</span>:<span class="number">0</span> 2px 4px 2px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&#x27;bj&#x27;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>东京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>首尔<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span> <span class="attr">value</span>=<span class="string">&quot;创建一个&#x27;广州&#x27;节点, 添加到#city下&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span> <span class="attr">value</span>=<span class="string">&quot;将&#x27;广州&#x27;节点插入到#bj前面&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn03&quot;</span> <span class="attr">value</span>=<span class="string">&quot;使用&#x27;广州&#x27;节点替换#bj节点&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn04&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除#bj节点&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn05&quot;</span> <span class="attr">value</span>=<span class="string">&quot;读取#city内的HTML代码&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn06&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置#bj内的HTML代码&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">myclick</span>(<span class="params">strid, func</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(strid)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = func</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;btn01&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;广州&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    el.<span class="title function_">appendChild</span>(text)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    city.<span class="title function_">appendChild</span>(el)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;btn02&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;广州&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    el.<span class="title function_">appendChild</span>(text)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> bj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    city.<span class="title function_">insertBefore</span>(el, bj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;btn03&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;广州&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    el.<span class="title function_">appendChild</span>(text)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> bj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    city.<span class="title function_">replaceChild</span>(el, bj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;btn04&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> bj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    city.<span class="title function_">removeChild</span>(bj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;更常用的方式&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bj.parentNode.removeChild(bj)&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;btn05&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(city.<span class="property">innerHTML</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">myclick</span>(<span class="string">&quot;btn06&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> bj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    bj.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;#&#x27;&gt;昌平&lt;/a&gt;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;a href=&#x27;#&#x27;&gt;昌平&lt;/a&gt;&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(7)空值：Null</title>
    <url>/blog/javascript/7/</url>
    <content><![CDATA[<hr>
<h3 id="空值：Null"><a href="#空值：Null" class="headerlink" title="空值：Null"></a>空值：Null</h3><p>Null的值类型只有一个。就一个null。<strong>null这个值, 专门用来表示一个为空的对象</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a的值是：&quot;</span> + a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a的值类型是：&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(71)练习：添加删除记录</title>
    <url>/blog/javascript/71/</url>
    <content><![CDATA[<hr>
<h3 id="练习：添加删除记录"><a href="#练习：添加删除记录" class="headerlink" title="练习：添加删除记录"></a>练习：添加删除记录</h3><p>练习：</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  table&#123;border-<span class="attr">collapse</span>: collapse;border-<span class="attr">spacing</span>: <span class="number">0</span>;&#125;</span><br><span class="line">  td input&#123;<span class="attr">border</span>:none;<span class="attr">outline</span>:none;&#125;</span><br><span class="line">  td&#123;<span class="attr">border</span>:solid 1px #<span class="number">333</span>&#125;</span><br><span class="line">  #formDiv&#123;margin-<span class="attr">bottom</span>:10px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;formDiv&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>添加新员工<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>name:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>email:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bbb&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>age:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;24&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addEmpButton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;employeeTable&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>tom@table.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jerry<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>jerry@table.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Candy<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>candy@table.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> allA = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;a&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">delA</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> tr = <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> td = tr.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;td&quot;</span>)[<span class="number">0</span>].<span class="property">innerHTML</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> flag = <span class="title function_">confirm</span>(<span class="string">&quot;确认删除&quot;</span> + td + <span class="string">&quot;吗？&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(flag)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      tr.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(tr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 取消超链接的默认行为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allA.<span class="property">length</span>; i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    allA[i].<span class="property">onclick</span> = delA</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> employeeTable = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;employeeTable&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> addEmpButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;addEmpButton&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  addEmpButton.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;empName&quot;</span>).<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> email = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;email&quot;</span>).<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> age = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;age&quot;</span>).<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;tr&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> nameTd = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> emailTd = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ageTd = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> deleteTd = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    nameTd.<span class="property">innerText</span> = name</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    emailTd.<span class="property">innerText</span> = email</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ageTd.<span class="property">innerText</span> = age</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    deleteTd.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;Delete&lt;/a&gt;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    tr.<span class="title function_">appendChild</span>(nameTd)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    tr.<span class="title function_">appendChild</span>(emailTd)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    tr.<span class="title function_">appendChild</span>(ageTd)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    tr.<span class="title function_">appendChild</span>(deleteTd)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    deleteTd.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;a&quot;</span>)[<span class="number">0</span>].<span class="property">onclick</span> = delA</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    employeeTable.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;tbody&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(tr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(72)通过DOM操作内联样式</title>
    <url>/blog/javascript/72/</url>
    <content><![CDATA[<hr>
<h3 id="通过DOM操作内联样式"><a href="#通过DOM操作内联样式" class="headerlink" title="通过DOM操作内联样式"></a>通过DOM操作内联样式</h3><p>设置样式</p>
<ol>
<li>元素.style.样式名 &#x3D; 样式值</li>
<li>如果css样式名有 减号 - , 需要改成驼峰式命名法</li>
<li>注意：通过style修改的样式, 都是修改的内联样式,而内联样式有较高的优先级,所以通过js修改的样式通常会立即显示。但是如果在样式中, 写了 !important,通过js修改会无效。因为增加了!important的样式, 优先级更高于内联样式。</li>
</ol>
<p>读取样式</p>
<ol>
<li>元素.style.样式名</li>
<li><code>通过style读取样式时, 只能读取内联样式</code>！！！！,无法读取样式表中的样式。</li>
</ol>
<p>例:</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box1&#123;</span><br><span class="line">    <span class="attr">width</span>:100px;</span><br><span class="line">    <span class="attr">height</span>:100px;</span><br><span class="line">    background-<span class="attr">color</span>:lightblue;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>修改样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span>读取样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 点击按钮以后修改box1的大小。元素.style.样式名 = 样式值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn01.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box1.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;150px&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box1.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;150px&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 如果css样式名有 减号 - , 需要改成驼峰式命名法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box1.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;yellow&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 注意：通过style修改的样式, 都是修改的内联样式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 而内联样式有较高的优先级</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 所以通过js修改的样式通常会立即显示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn02 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn02&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn02.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;读取样式, 元素.style.样式名, 注意：带单位的样式, 读取出来也会带单位。&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">style</span>.<span class="property">width</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(73)获取元素样式</title>
    <url>/blog/javascript/73/</url>
    <content><![CDATA[<hr>
<h3 id="获取元素样式"><a href="#获取元素样式" class="headerlink" title="获取元素样式"></a>获取元素样式</h3><p>上一节知道了通过：元素.style.width, 只能获取到内联样式。如果元素的样式在样式表中, 则读取不到。我们可以通过另一个方式读取元素的样式。</p>
<hr>
<h3 id="元素样式名"><a href="#元素样式名" class="headerlink" title="元素样式名"></a>元素样式名</h3><p>注意！！它是用来读取当前元素正在显示的样式, 什么意思呢, 就是说它既不是专门用来读取内联样式的, 也不是专门用来读取样式表样式的, 而是读取正在显示, 或者说正在生效的样式。如果该元素没有设置要获取的样式, 则获取该样式的默认值。</p>
<p>currentStyle只兼容IE, 不兼容火狐和谷歌, 在其他浏览器中, 可以使用getComputedStyle()这个方法来获取元素当前样式。但是这个方法只有IE9+才支持。</p>
<p>所以<strong>这里只能对兼容性进行处理</strong>。</p>
<pre><code>var CurrentStyle = function (element) &#123;
  if(document.defaultView.getComputedStyle)&#123;
    return document.defaultView.getComputedStyle(element, null)
  &#125;else&#123;
    return element.currentStyle
  &#125;
&#125;
</code></pre>
<p>使用<code>CurrentStyle(元素).样式名</code>。</p>
<p>使用<code>getComputedStyle()</code>与<code>currentStyle</code>效果差不多, 不同的是, currentStyle获取未设置的样式值是, 默认值。比如未设置宽度, 则获取到auto。而getComputedStyle获取未设置的样式, 则是获取元素的真实值, 比如虽然未设置宽度, 但元素在页面上是有宽度体现的, 会获取到一个具体的宽度数值。</p>
<p>通过CurrentStyle和getComputedStyle读取到的样式都是只读的, 不能通过他们修改, 如果要修改只能通过style修改。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#box1&#123;<span class="attr">width</span>:100px;<span class="attr">height</span>:100px;background-<span class="attr">color</span>:lightblue;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// currentStyle只兼容IE, 不兼容火狐和谷歌</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 这里只能对兼容性进行处理。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> <span class="title class_">CurrentStyle</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">defaultView</span>.<span class="property">getComputedStyle</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">defaultView</span>.<span class="title function_">getComputedStyle</span>(element, <span class="literal">null</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> element.<span class="property">currentStyle</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn01.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.warn(&quot;元素.currentStyle.样式名&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">CurrentStyle</span>(box1).<span class="property">width</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="其他相关的属性"><a href="#其他相关的属性" class="headerlink" title="其他相关的属性"></a>其他相关的属性</h3><blockquote>
<p>只读属性clientWidth  clientHeight</p>
</blockquote>
<p>clientWidth、clientHeight与style 、currentStyle、getComputedStyle获取样式值不同, 后者获取的样式是什么, 值是多少就是多少。<code>而clientWidth和clientHeight</code>, 如果元素还有padding之类的设置。如例子中, 元素的宽高都是100.如果设置了padding:10px; 那么在页面中元素的实际宽高其实是120, 而clientWidth和clientHeight就会获取到包含padding的宽高, 也就是120。</p>
<p>所以，clientWidth、clientHeight获取到的值是<code>内容区 + 内边距(padding)</code>。</p>
<blockquote>
<p>只读属性clientWidth  clientHeight</p>
</blockquote>
<p>offsetWidth、offsetHeight获取到的值是<code>内容区 + 内边距(padding) + 边框(border)</code>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;button&#123;margin-<span class="attr">bottom</span>:10px;&#125;#box1&#123;<span class="attr">width</span>:100px;<span class="attr">height</span>:100px;background-<span class="attr">color</span>:lightblue;<span class="attr">padding</span>:10px;<span class="attr">border</span>:10px solid blue;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>clientWidth和clientHeight<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span>offsetWidth和offsetHeight<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn02 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn02&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn01, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;clientWidth,clientHeight元素的可见宽度和高度(内容区 + 内边距)&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">clientWidth</span>, box1.<span class="property">clientHeight</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn02, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;offsetWidth,offsetHeight元素的宽度和高度(内容区 + 内边距 + 边框)&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">offsetWidth</span>, box1.<span class="property">offsetHeight</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>offsetParent 获取离当前元素最近的、开启了定位的祖先元素</p>
</blockquote>
<p>offsetParent返回元素的偏移容器, 它可以获取离当前元素最近的、开启了定位的祖先元素, 只要该祖先元素的position不是static, 就是开启了定位。</p>
<p>下例中, box1的祖先元素未开启定位时,无论box1有多少祖先元素, offsetParent获取到的都是body。当box1的某一祖先元素开启定位时, box1获取到的offsetParent就是开启定位的那个元素。(多个祖先元素都开启时, 获取到的是最近的祖先元素)。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;button&#123;margin-<span class="attr">bottom</span>:10px;&#125;#box1,#box4&#123;<span class="attr">width</span>:100px;<span class="attr">height</span>:100px;background-<span class="attr">color</span>:lightblue;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>offsetParent祖先元素未定位<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span>offsetParent祖先元素有定位<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:relative;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box5&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:relative;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box4&quot;</span>&gt;</span>box4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn01, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">offsetParent</span>.<span class="property">nodeName</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn02 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn02&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box4 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box4&quot;</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn02, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box4.<span class="property">offsetParent</span>.<span class="property">id</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>offsetLeft  offsetTop</p>
</blockquote>
<p>offsetLeft, 当前元素相对于<strong>其定位元素</strong>水平的偏移量。offsetTop, 当前元素相对于<strong>其定位元素</strong>垂直的偏移量。注：其定位元素, 就是指它的offsetParent。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;button&#123;margin-<span class="attr">bottom</span>:10px;&#125;#box1,#box4&#123;<span class="attr">width</span>:110px;<span class="attr">height</span>:110px;background-<span class="attr">color</span>:lightblue;word-<span class="attr">break</span>:<span class="keyword">break</span>-all;font-<span class="attr">size</span>:12px;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>box1的offsetLeft<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1的祖先元素未定位, 那它的offsetParent是body, 那么它的offsetLeft就是相对于body来说的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span>box4的offsetLeft<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:relative;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box5&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:relative;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box4&quot;</span>&gt;</span>box4祖先元素有定位, 它的offsetParent是离它最近开启定位的box5, 它的offsetLeft就是相对于box5来说的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn01, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">offsetLeft</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn02 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn02&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box4 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box4&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn02, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box4.<span class="property">offsetLeft</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>scrollWidth scrollHeight scrollLeft scrollTop</p>
</blockquote>
<p>scrollWidth 返回元素的整体宽度。scrollHeight 返回元素的整体高度。scrollLeft 返回元素左边缘与视图之间的距离。scrollTop 返回元素上边缘与视图之间的距离。</p>
<p>当scrollHeight-scrollTop &#x3D; clientHeight时, 说明垂直滚动条滚到底了。<br>当scrollWidth-scrollLeft&#x3D;clientWidth时, 说明水平滚动条滚到最右侧了。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;button&#123;margin-<span class="attr">bottom</span>:10px;&#125;#box1&#123;<span class="attr">width</span>:200px;<span class="attr">height</span>:120px;<span class="attr">overflow</span>:auto;&#125;#box2&#123;<span class="attr">width</span>:300px;<span class="attr">height</span>:300px;background-<span class="attr">color</span>:lightgreen;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>box1的offsetLeft<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn01, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;box1.clientHeight = 滚动区域的可见高度-滚动条高度 =&quot;</span>, box1.<span class="property">clientHeight</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;box1.scrollHeight = 内部box2可滚动的高度 =&quot;</span>, box1.<span class="property">scrollHeight</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;box1.scrollTop = 内部box2已滚动的高度 =&quot;</span>, box1.<span class="property">scrollTop</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<p>例子，滚动条滚到最底判断。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;button&#123;margin-<span class="attr">bottom</span>:10px;&#125;label&#123;user-<span class="attr">select</span>:none;&#125;#info&#123;<span class="attr">height</span>:80px;<span class="attr">overflow</span>:auto;background-<span class="attr">color</span>:lightblue;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>请仔细阅读用户注册协议<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span>你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。你必须仔细阅读注册协议才能注册(将滚动条拉到底)。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;label&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span>同意&lt;/lebal&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> info = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;info&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(info, <span class="string">&quot;scroll&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">scrollHeight</span>-info.<span class="property">scrollTop</span>==info.<span class="property">clientHeight</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(info.<span class="property">scrollHeight</span>-info.<span class="property">scrollTop</span>==info.<span class="property">clientHeight</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      btn01.<span class="property">disabled</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      btn01.<span class="property">disabled</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(74)事件对象</title>
    <url>/blog/javascript/74/</url>
    <content><![CDATA[<hr>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>事件对象：当事件的响应函数被触发时,浏览器每次都会将一个事件对象作为实参传递进响应函数,可以用argument获取该参数,但一般情况下,我们都会自己定义一个形参,方便使用。</p>
<p>但是在IE8及以下浏览器中, 相应函数被触发时, 浏览器不会传递事件对象, 是将事件对象作为window对象的属性保存的。只能通过window.event.clientX获取, 但火狐又不兼容这种写法, 这时就只能根据情况判断了。</p>
<pre><code>if(!event)&#123;event = window.event&#125;
</code></pre>
<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#hoverDiv,#txtDiv,#txtDiv1&#123;<span class="attr">border</span>:solid 1px #<span class="number">000</span>;<span class="attr">width</span>:280px;font-<span class="attr">size</span>:12px;&#125;#hoverDiv&#123;<span class="attr">height</span>:100px;user-<span class="attr">select</span>:none;&#125;#txtDiv,#txtDiv1&#123;margin-<span class="attr">top</span>:10px;<span class="attr">height</span>:20px;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hoverDiv&quot;</span>&gt;</span>鼠标移动到这个区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;txtDiv1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;txtDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> hoverDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;hoverDiv&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> txtDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txtDiv&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> txtDiv1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txtDiv1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(hoverDiv, <span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(!event)&#123;event = <span class="variable language_">window</span>.<span class="property">event</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    txtDiv.<span class="property">innerHTML</span> = <span class="string">&#x27;pageX=&#x27;</span> + event.<span class="property">pageX</span> + <span class="string">&#x27; pageY=&#x27;</span> + event.<span class="property">pageY</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    txtDiv1.<span class="property">innerHTML</span> = <span class="string">&#x27;clientX=&#x27;</span> + event.<span class="property">clientX</span> + <span class="string">&#x27; clientY=&#x27;</span> + event.<span class="property">clientY</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="div跟随鼠标移动"><a href="#div跟随鼠标移动" class="headerlink" title="div跟随鼠标移动"></a>div跟随鼠标移动</h3><p>clientX,clientY获取的是鼠标在当前的可视窗口的坐标。当body的高度出现滚动条时, 拉动滚动条, 就会发现跟随鼠标的div会出现一点偏差。</p>
<pre><code>event = event || window.evnet
var left = event.clientX
var top = event.clientY
</code></pre>
<p>所以这里可以使用pageX和pageY, 他们获取的是鼠标相对于页面的坐标。</p>
<pre><code>event = event || window.evnet
var left = event.pageX
var top = event.pageY
</code></pre>
<p>但是, IE8及以下浏览器不支持pageX和pageY。所以如果要兼容IE8及以下的浏览器, 还需要兼容性的写法。clientY造成的偏移量, 是因为滚动条滚动了导致的。这个偏移量就是滚动的距离。我们可以通过scrollTop来获取滚动的距离。但是chrome认为浏览器滚动条是body的(给body设置了高度), 可以通过document.body.scrollTop来获取滚动量。但是火狐和IE不这么认为, 高度是body的, 那么滚动条就应该是body的父元素html的。所以在这两个浏览器中, 不能通过document.body.scrollTop来获取滚动量,而只能通过document.documentElement.scrollTop来获取。</p>
<pre><code>event = event || window.evnet
var scrollH = document.body.scrollTop || document.documentElement.scrollTop
var scrollW = document.body.scrollLeft || document.documentElement.scrollLeft
var left = event.clientX + scrollH
var top = event.clientY + scrollW
</code></pre>
<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;body&#123;<span class="attr">height</span>:1000px;<span class="attr">width</span>:1000px;&#125;#followDiv&#123;<span class="attr">width</span>:50px;<span class="attr">height</span>:50px;background-<span class="attr">color</span>:lightblue;<span class="attr">position</span>:absolute;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;followDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> followDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;followDiv&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(<span class="variable language_">document</span>, <span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">evnet</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> scrollW = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> scrollH = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> left = event.<span class="property">clientX</span> + scrollW</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> top = event.<span class="property">clientY</span> + scrollH</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    followDiv.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    followDiv.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="事件Bubble"><a href="#事件Bubble" class="headerlink" title="事件Bubble"></a>事件Bubble</h3><p>事件Bubble：<br>元素绑定事件：span、div、body, 都绑定了单击响应函数。<br>元素之间关系：子级、父级、祖先。点击span的响应函数时。三个元素的点击事件都被触发。<br>事件触发顺序：span、div、body。</p>
<pre><code>&lt;div id=&quot;box1&quot;&gt;我是box1
  
  &lt;span id=&quot;s1&quot;&gt;我是span&lt;/span&gt;
  
&lt;/div&gt;
</code></pre>
<p>这种现象就叫做事件Bubble。所谓的冒泡指的就是, Bubble向上传导, 当后代元素上的时间被触发时, 其祖先元素上相同的事件也会触发。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#box1&#123;<span class="attr">width</span>:200px;<span class="attr">height</span>:100px;background-<span class="attr">color</span>:lightblue;&#125;#s1&#123;background-<span class="attr">color</span>:lightyellow;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  我是box1</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> s1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;s1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(s1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;span被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(<span class="variable language_">document</span>.<span class="property">body</span>, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;body被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>从开发的角度讲。</p>
<p>大部分情况Bubble都是有用的。比如上一节的div跟随鼠标移动。试想, 页面中还有一个静止的div, 当鼠标移动到该div的内部时, 跟随鼠标的那个div还会跟着移动吗？要知道此时鼠标已经是在那么div中移动了, 并不是在document中移动(移动事件是绑定给document的。), 但是跟随鼠标移动的那个div还是会跟着鼠标移动, 这就是Bubble带来的好处了。</p>
<p>但是在上一个例子中, 很明显, 我们点击span时, 只希望span的点击事件被触发, 不希望它的父级乃至祖先元素被触发, 这个时候就需要取消Bubble。</p>
<pre><code>event.cancelBubble = true
</code></pre>
<p>cancelBubble这个属性本身是IE的属性, 但现在很多浏览器也都支持, 包括chrome等。所以cancelBubble基本不会有什么兼容性问题。例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#box1&#123;<span class="attr">width</span>:200px;<span class="attr">height</span>:100px;background-<span class="attr">color</span>:lightblue;&#125;#s1&#123;background-<span class="attr">color</span>:lightyellow;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  我是box1</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> s1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;s1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(s1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;span被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(<span class="variable language_">document</span>.<span class="property">body</span>, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;body被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>div跟随鼠标示例中, 取消Bubble, 再移动鼠标到里面试试。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;body&#123;<span class="attr">height</span>:1000px;<span class="attr">width</span>:1000px;&#125;#followDiv&#123;<span class="attr">width</span>:50px;<span class="attr">height</span>:50px;background-<span class="attr">color</span>:lightblue;<span class="attr">position</span>:absolute;&#125;#s1,#s2&#123;<span class="attr">padding</span>:10px;background-<span class="attr">color</span>:lightgreen&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>取消Bubble<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s2&quot;</span>&gt;</span>没取消Bubble<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;followDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> followDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;followDiv&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> s1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;s1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(<span class="variable language_">document</span>, <span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">evnet</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> scrollW = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> scrollH = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> left = event.<span class="property">clientX</span> + scrollW</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> top = event.<span class="property">clientY</span> + scrollH</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    followDiv.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    followDiv.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(s1, <span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">evnet</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(75)bubble</title>
    <url>/blog/javascript/75/</url>
    <content><![CDATA[<hr>
<h3 id="bubble"><a href="#bubble" class="headerlink" title="bubble"></a>bubble</h3><p>事件冒泡(Bubble)：<br>元素绑定事件：<strong>span div  body</strong>, 都绑定了单击响应函数<br>元素之间关系：<strong>子级 父级 祖先</strong>。<code>点击span的响应函数时。三个元素的点击事件都被触发</code>。<br>事件触发顺序：<strong>span div  body</strong>。</p>
<pre><code>&lt;body&gt;
    &lt;div id=&quot;box1&quot;&gt;
        我是box1
        &lt;span id=&quot;s1&quot;&gt;我是span&lt;/span&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>这种现象就叫做<code>事件冒泡(Bubble)。</code>所谓的冒泡指的就是, 事件向上传导, 当后代元素上的时间被触发时, 其祖先元素上相同的事件也会触发。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#box1&#123;<span class="attr">width</span>:200px;<span class="attr">height</span>:100px;background-<span class="attr">color</span>:lightblue;&#125;#s1&#123;background-<span class="attr">color</span>:lightyellow;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  我是box1</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> s1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;s1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(s1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;span被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(<span class="variable language_">document</span>.<span class="property">body</span>, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;body被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>从开发的角度讲</strong>。<br>大部分情况冒泡都是有用的。比如上一节的div跟随鼠标移动。试想, 页面中还有一个静止的div, 当鼠标移动到该div的内部时, 跟随鼠标的那个div还会跟着移动吗？要知道此时鼠标已经是在那么div中移动了, 并不是在document中移动(移动事件是绑定给document的。), 但是跟随鼠标移动的那个div还是会跟着鼠标移动, 这就是冒泡带来的好处了。</p>
<p><strong>但是在上一个例子中</strong>, 很明显, 我们点击span时, 只希望span的点击事件被触发, 不希望它的父级乃至祖先元素被触发, 这个时候就需要取消冒泡。</p>
<pre><code>event.cancelBubble = true
</code></pre>
<p>cancelBubble这个属性本身是IE的属性, 但现在很多浏览器也都支持, 包括chrome等。所以cancelBubble基本不会有什么兼容性问题。</p>
<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#box1&#123;<span class="attr">width</span>:200px;<span class="attr">height</span>:100px;background-<span class="attr">color</span>:lightblue;&#125;#s1&#123;background-<span class="attr">color</span>:lightyellow;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  我是box1</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> s1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;s1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(s1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;span被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(<span class="variable language_">document</span>.<span class="property">body</span>, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;body被点击了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>div跟随鼠标示例中, 取消冒泡, 再移动鼠标到里面试试。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;body&#123;<span class="attr">height</span>:1000px;<span class="attr">width</span>:1000px;&#125;#followDiv&#123;<span class="attr">width</span>:50px;<span class="attr">height</span>:50px;background-<span class="attr">color</span>:lightblue;<span class="attr">position</span>:absolute;&#125;#s1,#s2&#123;<span class="attr">padding</span>:10px;background-<span class="attr">color</span>:lightgreen&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>取消冒泡<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s2&quot;</span>&gt;</span>没取消冒泡<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;followDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> followDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;followDiv&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> s1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;s1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(<span class="variable language_">document</span>, <span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">evnet</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> scrollW = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> scrollH = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> left = event.<span class="property">clientX</span> + scrollW</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> top = event.<span class="property">clientY</span> + scrollH</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    followDiv.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    followDiv.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(s1, <span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">evnet</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="动态绑定事件"><a href="#动态绑定事件" class="headerlink" title="动态绑定事件"></a>动态绑定事件</h3><p>我们有一些超链接, 在初始化页面的时候就给他们绑定了单击响应函数。还有一个按钮可以动态添加超链接。但是新添加的超链接是没绑定点击事件的, 还需要去重新绑定。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn_a&quot;</span>&gt;点击添加超链接&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul_a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> allA = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;a&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn_a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn_a&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> ul_a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ul_a&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(allA).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">bind</span>(allA[key], <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是a的单击响应函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn_a, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    li.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;超链接&lt;/a&gt;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">bind</span>(li.<span class="property">firstChild</span>, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是a的单击响应函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ul_a.<span class="title function_">appendChild</span>(li)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>需求:我们希望只绑定一次事件, 即可应用到多个元素上, 即使元素是动态添加的。</p>
<p>事件的委派:我们可以尝试将其绑定给元素的共同祖先元素ul上, 这样点击任意a标签, 会一直冒泡到祖先元素上的点击事件。从而通过祖先元素的响应函数来处理事件。事件的委派是利用了冒泡, 可以减少事件绑定的次数, 提高出现的性能。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn_b&quot;</span>&gt;点击添加超链接&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;u1_b&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> u1_b = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;u1_b&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn_b = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn_b&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(u1_b, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是ul的单击响应函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn_b, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    li.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;超链接&lt;/a&gt;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    u1_b.<span class="title function_">appendChild</span>(li)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>但是点击除了a以外的其他部分, 也会触发ul的点击事件, 不仅点击a会冒泡到ul的点击事件上, 点击li也会冒泡到ul的点击事件上, 我们期望的是, 触发事件的对象是我们期望的元素则执行, 不是的话就不执行。这就需要判断当前点击的元素, 我们知道”onclick”事件是绑定在ul上的, 那点击时的this就是ul, 则不能通过this获取当前点击的元素。</p>
<hr>
<h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p>可以返回触发事件的元素target。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn_c&quot;</span>&gt;点击添加超链接&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;u1_c&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> u1_c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;u1_c&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn_c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn_c&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(u1_c, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 当然a的class可能不仅仅有link, 还可能有多的className, 这里还需要进行判断。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 这就利用冒泡, 实现事件的委派, 而不需要对期望的元素进行多次事件绑定。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(event.<span class="property">target</span>.<span class="property">className</span> == <span class="string">&quot;link&quot;</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">firstChild</span>.<span class="property">nodeValue</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn_c, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    li.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27; class=&#x27;link&#x27;&gt;超链接&lt;/a&gt;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    u1_c.<span class="title function_">appendChild</span>(li)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><p><strong>对象.事件 &#x3D; 函数</strong>。</p>
<p>我们给按钮绑定了2个onclick事件, 但是第一个绑定的事件被第二个绑定的事件覆盖了。它只能同时为一个元素的一个事件绑定一个响应函数, 不能绑定多个。</p>
<p><strong>但是有时候我们就需要为元素的一个事件, 绑定多个函数, 这种方式绑定就不够灵活了</strong>。<code>addEventListener()</code> 通过这个方法, 也可以为元素绑定响应函数。</p>
<p><strong>参数</strong>:</p>
<p>事件类型：不要on<br>回调函数, 当事件被触发时该函数会被调用。<br>是否在捕获阶段触发事件。需要一个布尔值, 一般都传false。</p>
<p><strong>它就可以给元素的一个事件, 绑定多个响应函数。</strong><code>但是, 这个方法IE8及以下的浏览器不支持</code>。</p>
<pre><code>var btn01 = document.getElementById(&quot;btn01&quot;)
btn01.addEventListener(&quot;click&quot;,function()&#123;
    console.log(1)
&#125;,false)
btn01.addEventListener(&quot;click&quot;,function()&#123;
    console.log(2)
&#125;,false)
// 1, 2
</code></pre>
<p>如果需要兼容IE8及以下的浏览器, 就不能直接使用addEventListener。</p>
<p>使用<code>attachEvent()</code> IE5以上浏览器支持。它也可以为元素的一个事件绑定多个响应函数。</p>
<p><strong>参数</strong></p>
<p>事件类型：<strong>它要on</strong><br>回调函数。</p>
<p>兼容IE8及以下浏览器的attachEvent()需要加on在前面。</p>
<pre><code>var btn01 = document.getElementById(&quot;btn01&quot;)
btn01.attachEvent(&quot;onclick&quot;,function()&#123;
    console.log(1)
&#125;)
btn01.attachEvent(&quot;onclick&quot;,function()&#123;
    console.log(2)
&#125;)
// 2, 1
</code></pre>
<p>attachEvent与addEventListener不同的是, <strong>它是后绑定, 先执行</strong>, 和addEventListener方式绑定的执行顺序不同。当然既然已经用不同的响应事件分开处理了, 大部分情况下他们的执行顺序不同, 不会有太大的影响。</p>
<p><strong>虽然IE支持了</strong>, 但是火狐和chrome又不支持attachEvent了。</p>
<hr>
<p><strong>定义一个函数, 用来为制定元素绑定响应函数</strong>。<br>涉及几个参数：</p>
<p>obj 要绑定事件的对象<br>eventStr 事件类型的字符串, 不要on<br>callback 回调函数<br>需要注意addEventListener()中的this, 是绑定事件的对象, attachEvent()中的this是window对象, 需要统一两个方法中的this。</p>
<pre><code>function bind(obj, eventStr, callback)&#123;
  if(obj.addEventListener)&#123;
    // 大部分浏览器的情况
    obj.addEventListener(eventStr, callback, false)
  &#125;else&#123;
    // IE8及以下:obj.attachEvent(&quot;on&quot; + eventStr, callback)
    // 统一this：我们知道了attachEvent()中的this是window对象
    // 这个回调函数是由浏览器去调用的。我们需要拿回，调用回调函数的权利。
    // 利用callback.call(obj)的方式, 指定this对象。
    // 可以先让浏览器去回调一个匿名函数, 而在匿名函数中
    // 我们就可以重新指定回调函数的调用方式
    obj.attachEvent(&quot;on&quot; + eventStr, function()&#123;
      callback.call(obj)
    &#125;)
  &#125;
&#125;
</code></pre>
<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn01&quot;</span>&gt;点我一下&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn01, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(btn01, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(76)事件的传播</title>
    <url>/blog/javascript/76/</url>
    <content><![CDATA[<hr>
<h3 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h3><p>关于事件的传播, 网景公司和微软有不同的理解。微软公司认为事件应该是由内向外传播, 也就是当事件触发时, 应该先触发当前元素上的事件, 然后再向当前元素的祖先元素传播。<strong>也就是说, 事件应该在Bubble阶段就执行</strong>。<br>网景公司认为, 事件应该是由外向内传播的。也就是说应该先触发, 当前元素最外层的祖先元素的事件。然后再向内传播给后代元素。<strong>称为事件的捕获阶段</strong>。<br>最终W3C综合了两个公司的方案, 将事件的传播分成了三个阶段。</p>
<p><strong>捕获阶段：在捕获阶段, 从最外层的祖先元素, 向目标元素进行事件的捕获, 但是默认此时不会触发事件。</strong>(祖先元素：W3C默认设计的是document, 但是大部分浏览器都设计成了从window开始)。<br><strong>目标阶段：事件捕获到了目标元素。捕获结束, 开始在目标元素上触发事件</strong>。<br><strong>Bubble阶段：事件从目标元素, 开始向它的祖先元素传递。依次触发祖先元素上的事件</strong>。</p>
<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#box1&#123;<span class="attr">width</span>:280px;<span class="attr">height</span>:160px;background-<span class="attr">color</span>:lightblue&#125;#box2&#123;<span class="attr">width</span>:240px;<span class="attr">height</span>:120px;background-<span class="attr">color</span>:lightgreen&#125;#box3&#123;<span class="attr">width</span>:200px;<span class="attr">height</span>:80px;background-<span class="attr">color</span>:lightyellow&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box2&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box3&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是box1的响应函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box2, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是box2的响应函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box3, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是box3的响应函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p><strong>如果希望在捕获阶段就触发事件</strong></p>
<p>可以将addEventListener()的第三个参数, 设置为true。</p>
<pre><code>function bind(obj, eventStr, callback)&#123;
    if(obj.addEventListener)&#123;
        obj.addEventListener(eventStr, callback, true)
    &#125;else&#123;
        obj.attachEvent(&quot;on&quot; + eventStr, function()&#123;
            callback.call(obj)
        &#125;)
    &#125;
&#125;
</code></pre>
<p>例：</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box1&#123;<span class="attr">width</span>:280px;<span class="attr">height</span>:160px;background-<span class="attr">color</span>:lightblue&#125;</span><br><span class="line">  #box2&#123;<span class="attr">width</span>:240px;<span class="attr">height</span>:120px;background-<span class="attr">color</span>:lightgreen&#125;</span><br><span class="line">  #box3&#123;<span class="attr">width</span>:200px;<span class="attr">height</span>:80px;background-<span class="attr">color</span>:lightyellow&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box2&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box3&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是box1的响应函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box2, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是box2的响应函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">bind</span>(box3, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是box3的响应函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj, eventStr, callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">addEventListener</span>(eventStr, callback, <span class="literal">true</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        callback.<span class="title function_">call</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p><strong>但是一般情况下, 我们不会希望在捕获阶段触发事件。</strong>(IE8及以下浏览器, 没有捕获阶段。)</p>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(77)拖拽练习</title>
    <url>/blog/javascript/77/</url>
    <content><![CDATA[<hr>
<h3 id="拖拽练习"><a href="#拖拽练习" class="headerlink" title="拖拽练习"></a>拖拽练习</h3><p>当鼠标在目标元素上按下时, 开始拖拽。onmousedown<br>当鼠标移动时, 目标元素跟着鼠标移动。onmousemove<br>当鼠标松开时, 目标元素固定在当前位置。onmouseup</p>
<p>点击拖拽一个div, 跟着鼠标移动。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#box1&#123;<span class="attr">width</span>:100px;<span class="attr">height</span>:100px;background-<span class="attr">color</span>:lightblue;<span class="attr">position</span>:absolute;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1. 当鼠标在目标元素上按下时, 开始拖拽。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  box1.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 点击时鼠标相对box1的偏移量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 鼠标的.clientX - 元素.offsetLeft</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 鼠标的.clientY - 元素.offsetTop</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ol = event.<span class="property">clientX</span> - box1.<span class="property">offsetLeft</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ot = event.<span class="property">clientY</span> - box1.<span class="property">offsetTop</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 当鼠标移动时, 目标元素跟着鼠标移动。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> x = event.<span class="property">clientX</span> - ol</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> y = event.<span class="property">clientY</span> - ot</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      box1.<span class="property">style</span>.<span class="property">left</span> = x + <span class="string">&quot;px&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      box1.<span class="property">style</span>.<span class="property">top</span> = y + <span class="string">&quot;px&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. 当鼠标松开时, 目标元素固定在当前位置。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(78)proxy</title>
    <url>/blog/javascript/78/</url>
    <content><![CDATA[<hr>
<h3 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h3><p><strong>vue大概的基本原理</strong>：</p>
<pre><code>数据劫持---&gt;观察者---&gt;数据解析、指令、js对象, diff算法---&gt;dom
</code></pre>
<p><strong>那么vue是通过什么进行数据劫持的呢</strong>？</p>
<pre><code>vue2 是通过Object.defineProperty。IE8以下不兼容
vue3 则是通过proxy。IE9以下都不兼容。Edge 12+
</code></pre>
<p><strong>为什么要用vue3去取代vue2</strong>, 或者说, 为什么要用proxy去替换Object.defineProperty, 这是因为Object.defineProperty不能对数组进行监听, 我们用到的如push, pop一类的操作方法能够实现响应式, 是因为, vue本身对该方法进行了重写。诸如arr[0] &#x3D; 1,这种写法就无法实现监听了。而Proxy可以实现对数组的监听。</p>
<p><strong>什么是proxy？</strong></p>
<p>直接的理解, Proxy就是<strong>代理</strong>的意思。它可以实现对, 对象、数组、方法等的代理。</p>
<p>proxy另一方面, 还可以理解为<strong>拦截</strong>的意思。proxy提供了13中方法进行拦截。而Object.defineProperty只有两种, get&#x2F;set。</p>
<hr>
<h3 id="proxy的参数"><a href="#proxy的参数" class="headerlink" title="proxy的参数"></a>proxy的参数</h3><p><strong>Proxy:它有2个参数</strong>：</p>
<pre><code>new Proxy(target,handler)

target:目标对象
handler：具体的操作, 实际上是一个对象。
</code></pre>
<hr>
<h3 id="proxy的拦截器"><a href="#proxy的拦截器" class="headerlink" title="proxy的拦截器"></a>proxy的拦截器</h3><blockquote>
<p>handler的set拦截</p>
</blockquote>
<p>触发set拦截, 就是对对象属性重新赋值时才会触发。set拦截有四个参数。我们来打印一下set拦截中的几个参数分别是什么。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> newTarget = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">target, p, value, receiver</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set拦截的参数：&quot;</span>, target, p, value, receiver) </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 触发set拦截</span></span><br><span class="line">  newTarget.<span class="property">a</span> = <span class="number">10</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>根据console的情况可知：</strong></p>
<p>target 原对象 (obj)<br>p表示设置的值的key, 比如我们设置的是a的值, 那么这个p表示的key就是a。<br>value表示, 新的值。<br>receiver表示, 原对象的proxy格式。</p>
<p><code>我们通过new Proxy代理一个对象, 每当我们通过这个代理设置对象属性时, 都能通过set进行拦截</code>！！</p>
<blockquote>
<p>handler的get拦截</p>
</blockquote>
<p>触发get拦截, 就是获取对象属性值时触发。get拦截有三个参数。我们来打印一下get拦截中的几个参数分别是什么。</p>
<p>实际测试时, 添加, receiver怎么会循环触发get拦截。且receiver显示未定义。</p>
<pre><code>&lt;script&gt;
  let obj = &#123;
      a: 1,
      b: 0
  &#125;
  
  let newTarget = new Proxy(obj, &#123;
      get(target, p, receiver)&#123;
          console.log(&quot;get拦截的参数：&quot;, target, p, receiver) 
      &#125;
  &#125;)
  
  //触发get拦截
  newTarget.a
&lt;/script&gt;
</code></pre>
<p>去掉receiver进行测试。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> newTarget = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params">target, p</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get拦截的参数：&quot;</span>, target, p) </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//触发get拦截</span></span><br><span class="line">  newTarget.<span class="property">a</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>根据console的情况可知：</strong></p>
<p>target 原对象 (obj)<br>p表示设置的值的key, 比如我们设置的是a的值, 那么这个p表示的key就是a。<br>receiver应该是原对象的proxy格式。</p>
<blockquote>
<p>handler的has拦截</p>
</blockquote>
<p>当判断某一个属性是不是属于这个对象时, 会触发has拦截。has拦截有两个参数。看看has的两个个参数分别是什么。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> newTarget = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">has</span>(<span class="params">target, p</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;has&quot;</span>, target, p)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//触发has拦截</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> newTarget)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><code>以上三个拦截都是比较常用的proxy拦截。除此之外, 还包括</code>…</p>
<blockquote>
<p>deleteProperty拦截</p>
</blockquote>
<p>当对代理对象进行delete操作时, 就会触发deleteProperty拦截。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> newTarget = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target, p</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;deleteProperty&quot;</span>, target, p)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//deleteProperty触发</span></span><br><span class="line">  <span class="keyword">delete</span> newTarget[<span class="string">&quot;a&quot;</span>]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><code>注意</code>：包括前面的set、get、has、deleteProperty拦截, 设置新值、获取、删除等操作。并没有真正的对对象进行了相关操作。因为我们拦截了以后, 只做了console操作, 并没有真正的进行设置新值、删除操作。</p>
<p>因为我们已经写了set和deleteProperty拦截器了, 那我们就只能在拦截器中自行处理, <code>一旦我们主动进行了拦截, 那么我们就需要自行实现拦截后的数据处理逻辑</code>。</p>
<p>如果<code>没有自行拦截, 而直接进行对象的操作的话, 那对象就会直接被修改</code>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> newTarget = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="comment">//没有进行拦截</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//a真正被删除。与delete obj[&quot;a&quot;]是一样的效果</span></span><br><span class="line">  <span class="keyword">delete</span> newTarget[<span class="string">&quot;a&quot;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newTarget)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Reflect：反射</p>
</blockquote>
<p><code>作用</code>：Reflect的每个方法都和Proxy中的拦截一一对应。</p>
<p>比如前面的 delete newTarget[‘a’]<br>可以用 ： Reflect.deleteProperty(newTarget, ‘a’) 的方式删除。<br>其效果是一样的。</p>
<p>这里需要理解一下：Reflect的每个方法都和Proxy中的拦截一一对应。</p>
<p>比如, Reflect.get(newTarget, ‘a’), 就是获取对象a的值, 且也会触发拦截。<br>那此时 在get拦截器中, 我们需要做如下处理。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> newTarget = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, p</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, p)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取对象a的值, 触发拦截</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">get</span>(newTarget, <span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>就能获取到相应key键的值。</p>
<hr>
<pre><code>ownKeys(target)&#123;
    //ownKeys 拦截, 返回对象所有key的数组[a, b]
    return Reflect.ownKeys(target)
&#125;

Reflect.ownKeys(newTarget)
</code></pre>
<hr>
<p>获取目标对象的属性描述器。</p>
<pre><code>Reflect.getOwnPropertyDescriptor(newTarget, &#39;a&#39;)
</code></pre>
<p>包含：</p>
<pre><code>&#123;
  value: 1, //值
  writeable: true, //是否可写
  enumerable: true, //是否可枚举, 意思是遍历时for in 、Object.keys…等等遍历时获取。
  configurable: true //是否可拓展
&#125;
</code></pre>
<hr>
<p>关于操作原型： getPrototypeOf setPrototypeOf<br>这是关于__proto__隐式原型的操作。<br>它也是可以修改的。</p>
<pre><code>Reflect.getPrototypeOf(newTarget)
</code></pre>
<p>得到一个对象 object</p>
<pre><code>Reflect.setPrototypeOf(newTarget, [])
</code></pre>
<p>将object原型对象修改成了数组。</p>
<hr>
<p>基本上 Proxy 针对数据的拦截, 包括, get&#x2F;set&#x2F;has&#x2F;deleteProperty<br>遍历相关的拦截, 包括, ownKeys<br>属性描述器的拦截, 包括, getOwnPropertyDecriptor&#x2F;defineProprerty<br>Reflect.isExtensble(newTarget)属性描述器中configurable的值。</p>
<pre><code>Reflect.isExtensble(newTarget) // true
newTarget[&#39;b&#39;] = 100 // b被添加到对象newTarget中。

Reflect.preventExtensions(newTarget) // true
Reflect.isExtensble(newTarget) // false
newTarget[&#39;c&#39;] = 100 // c并不会添加到对象中, 因为阻止了拓展。
</code></pre>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(79)proxy的理解</title>
    <url>/blog/javascript/79/</url>
    <content><![CDATA[<hr>
<h3 id="proxy的理解"><a href="#proxy的理解" class="headerlink" title="proxy的理解"></a>proxy的理解</h3><p><strong>首先我们来看一看对象的操作</strong>。</p>
<pre><code>//当我们需要获取对象中的a属性时。直接obj.a即可获取相应的值。
let obj = &#123;
  a: 1,
  b: 2
&#125;
console.log(obj.a) // 1
</code></pre>
<p><strong>接下来我们看一看proxy代理可以对, 对象做些什么。</strong>先看看proxy的语法。<br><strong><code>let proxy = new Proxy(target, handler)</code></strong><br><code>target</code>：参数是一个对象, 表示要代理的对象。<br><code>handler</code>：参数也是一个对象, 用来定制拦截行为。</p>
<pre><code>//我们将obj代理以后, 通过代理也可以获取、访问obj对象中的各种属性和方法。
let obj = &#123;
  a: 1,
  b: 2
&#125;
let handler = &#123;
  
&#125;
let proxy = new Proxy(obj,handler)
console.log(proxy.a) // 1  (你会发现, 这里和obj.a的效果一模一样)
</code></pre>
<p><code>那这个proxy代理有什么用</code>？<br>proxy除了代理的意思, 其实还可以理解为拦截, 这个拦截行为, 具体就体现在了, 它的第二个参数handler上。<br><code>这个handler对象中, 支持的拦截行为, 目前包括13种</code>。</p>
<hr>
<p>1、get(target, propKey, receiver)拦截对象属性的读取。</p>
<pre><code>//get拦截。
let obj = &#123;
  a: 1,
  b: 2
&#125;
let handler = &#123;
  get(target, propKey, receiver) &#123;
    
  &#125;
&#125;
let proxy = new Proxy(obj,handler)
//怎么触发这个get拦截呢, 其实就是对对象obj属性的获取或方法的访问。

console.log(proxy.a) // undefined  
//get触发了吗？其实触发了, 这个undefined就是get触发了的结果。
//为什么是undefined, 注意！！！
//当我们没有对get进行拦截时, 它默认是可以获取到对象中的各种属性的。
//一旦！！我们进行了get拦截, 那么我们需要自己去实现！拦截后的操作。
//其他拦截器也是同样的操作。(一旦拦截需要自行实现拦截后返回的内容)
//上面的代码中, 我们只进行了拦截, 但并没有返回相关key的值。
//所以输出console.log(proxy.a)时, 是undefined。
</code></pre>
<hr>
<pre><code>//get拦截。
let obj = &#123;
  a: 1,
  b: 2
&#125;
let handler = &#123;
  get(target, propKey, receiver) &#123;
    return target[propKey]
  &#125;
&#125;
let proxy = new Proxy(obj,handler)

console.log(proxy.a) // 1  
//proxy.a触发了get拦截, 且在get拦截中, 返回了相应的值。
//那么在return相关的值之前, 我们就可以对其进行其他操作或判断。
//这就是get拦截的作用了。
</code></pre>
<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(8)未定义：Undefined</title>
    <url>/blog/javascript/8/</url>
    <content><![CDATA[<hr>
<h3 id="未定义：Undefined"><a href="#未定义：Undefined" class="headerlink" title="未定义：Undefined"></a>未定义：Undefined</h3><p>Undefined的值类型也只有一个。就一个undefined。<strong>当我们声明一个变量, 但是并不给这个变量赋值时, 它的值就是undefined</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a的值是：&quot;</span> + a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a的值类型是：&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(9)强制类型转换String</title>
    <url>/blog/javascript/9/</url>
    <content><![CDATA[<hr>
<h3 id="强制类型转换String"><a href="#强制类型转换String" class="headerlink" title="强制类型转换String"></a>强制类型转换String</h3><ul>
<li>强制类型转换：是指将一个数据类型强制转换成其他的数据类型</li>
<li>类型转换：一般就是将其他数据类型转换为String、Number、Boolean。</li>
</ul>
<p><strong>将Number数据类型转换为String</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 方式一：toString()方法</span></span><br><span class="line">  <span class="comment">// 该方法不会改变原变量的类型</span></span><br><span class="line">  <span class="comment">// 它会将改变后的值返回</span></span><br><span class="line">  <span class="comment">// 需要一个变量去接收。</span></span><br><span class="line">  <span class="keyword">var</span> b = a.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span> + b + <span class="string">&quot; ：typeof(b)=&quot;</span> + <span class="keyword">typeof</span> b);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 方式二：使用String()函数</span></span><br><span class="line">  <span class="comment">// 与toString方法一样, string函数也不会改变原变量的类型</span></span><br><span class="line">  <span class="comment">// 它会将改变后的值返回</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="title class_">String</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c=&quot;</span> + c + <span class="string">&quot; ：typeof(c)=&quot;</span> + <span class="keyword">typeof</span> c);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 当然也可以将转换结果返回给a</span></span><br><span class="line">  <span class="comment">// 但会直接覆盖掉原来a的值和类型</span></span><br><span class="line">  a = a.<span class="title function_">toString</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; ：typeof(a)=&quot;</span> + <span class="keyword">typeof</span> a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>将Boolean数据类型转换为String</strong>。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 方式一：toString()方法</span></span><br><span class="line">  <span class="keyword">var</span> b = a.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span> + b + <span class="string">&quot; ：typeof(b)=&quot;</span> + <span class="keyword">typeof</span> b);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 方式二：使用String()函数</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="title class_">String</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c=&quot;</span> + c + <span class="string">&quot; ：typeof(c)=&quot;</span> + <span class="keyword">typeof</span> c);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p><strong>将Null和Undefined数据类型转换为String</strong>。</p>
<p>注意：方式一中的toString方法不适用于Null和Undefined。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;null不能用toString()转换&quot;</span>)</span><br><span class="line">  a = a.<span class="title function_">toString</span>();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  a = <span class="title class_">String</span>(a)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; ：typeof(a)=&quot;</span> + <span class="keyword">typeof</span> a);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------------&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> b = <span class="literal">undefined</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;undefined不能用toString()转换&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  b = b.<span class="title function_">toString</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  b = <span class="title class_">String</span>(b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span> + b + <span class="string">&quot; ：typeof(b)=&quot;</span> + <span class="keyword">typeof</span> b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(1)nodejs简介</title>
    <url>/blog/nodejs/1/</url>
    <content><![CDATA[<hr>
<h2 id="nodejs简介"><a href="#nodejs简介" class="headerlink" title="nodejs简介"></a>nodejs简介</h2><p><strong>Node.js是一个能够在服务器端运行JavaScript的开放源代码, 跨平台<code>JavaScript运行环境</code></strong></p>
<p><strong>Node采用Google开发的V8引擎运行js代码, 使用<code>事件驱动</code>、<code>非阻塞</code>、<code>异步I/O模型</code>等技术来提高性能, 可优化应用程序的传输量和规模。</strong></p>
<p><strong>Node大部分基本模块都用JavaScript编写。在Node出现之前, js常作为客户端程序设计语言使用, 以js写出的程序常在用户的浏览器上运行。</strong></p>
<p><strong>目前, Node已被IBM、Microsoft、Yahoo!、Walmart、Groupon、SAP、LinkedIn、Rakuten、PayPal、Voxer和GoDaddy等企业采用。</strong></p>
<hr>
<h2 id="nodejs由来"><a href="#nodejs由来" class="headerlink" title="nodejs由来"></a>nodejs由来</h2><p>Nodejs之父, <code>瑞安·达尔(Ryan Dahl)</code>。他并非科班出身的开发者, 在2004年的时候还在纽约的罗彻斯特大学数学系读博士。2006年厌倦了读博的无聊, 做出了退学的决定, 一个人来到了智利的Valparaiso小镇。从那时起瑞安·达尔走上了码农的道路。那时候<code>Ruby on Rails</code>很火, 他也不例外的学习了它。瑞安·达尔的生活方式就是接项目, 然后去客户的地方工作, 在他严重, 上班其实就是去旅行。这样两年的时间瑞安·达尔就成为了<code>高性能Web服务器的专家</code>, 从接开发应用, 到变成专门<code>帮客户解决性能问题</code>的专家。</p>
<p>Web服务器有什么性能问题需要解决？这就要讲到web服务了。事实上, 开发一个网站并没有多难, 彼时一个网站的性能才是最迫切需要解决的问题。</p>
<p><strong>普遍认知中, 用户在浏览器中输入一个网址, 打开一个网页, 速度越快, 那么这个网页的性能越好。</strong></p>
<p><strong>但是打开网页的速度, 是由多种因素造成的。</strong></p>
<ol>
<li>用户输入网址请求数据(<strong>不可控</strong>, 与用户网速、设备性能相关)</li>
<li>用户请求后, 服务器响应速度。包括…<ul>
<li>服务器向数据库请求数据, 数据库返回数据, (I&#x2F;O)操作。(<strong>不可控</strong>, 当大量用户访问, 磁盘读写速度达到极限, 服务器无法及时返回数据给用户。)</li>
<li>服务器根据数据库返回的数据渲染网页代码, 并返回给用户。(<strong>可控</strong>, 与服务器网速、设备性能相关, 但会增加运营成本)</li>
</ul>
</li>
</ol>
<p>所以, 在无法控制用户网速或设备的情况下, 又不能给企业带来太大的运营成本压力, 要优化网页的性能(当然网页本身的资源也要优化, 代码严谨), <strong>就只能从I&#x2F;O操作入手了。</strong></p>
<p><strong>传统的服务器都是多线程的。</strong>服务器每收到一个用户请求, 就会创建一个线程去处理用户请求。用户量大时, 就会产生大量的线程, 他们都向数据库请求数据, 但数据库读写也到极限了, 只能满足一部分线程的请求, 其他线程就会一直等着数据库返回数据, 服务器无法及时返回数据给用户, 还造成了服务器资源浪费(服务器能够产生的线程数与服务器配置有关, 极大的增加的成本)。</p>
<p>打个比方, 就像去餐馆吃饭, 去一桌客人有一个服务员去处理客户点菜, 去100桌客人, 有100个服务员(线程)去处理客户点菜, 但是其实点菜是很快的, 上菜也很快。慢的是厨房, 可能厨房同一时间只能炒两个菜, 那其他服务员只能等着, 对服务器来说这些线程既占用内存, 又没有发挥作用, 这就造成了资源浪费了。</p>
<p>事实上, 我们并不需要那么多服务员(线程), 我们知道点菜其实很快, 当这个服务员处理完一桌的请求后, 在等待做菜期间, 可以继续为其他桌的客人继续服务。服务器也是同样的原理。</p>
<p>除非升级硬件配置, 否则, I&#x2F;O的问题我们也无法处理了, 即便如此硬件也不可能无限升级。这需要大量的成本, 那么就只能从线程入手去解决问题了。</p>
<p><code>瑞安·达尔(Ryan Dahl)</code>, 为了解决服务器的高并发性能问题, 尝试了很多种语言, 但是最终都失败了。最后, <code>瑞安·达尔(Ryan Dahl)</code>利用Google发布的V8引擎, 在2009年2月开始Nodejs的编写。一开始Nodejs不叫这个名, 它叫web.js, 就想着解决web服务的问题, 最后越写越大, 除了解决服务器问题以外, 还有其他很多的功能, 形成了一个庞大的生态。</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>事件</th>
</tr>
</thead>
<tbody><tr>
<td>2009年</td>
<td>Ryan Dahl在Github上发布node的最初版本</td>
</tr>
<tr>
<td>20010年1月</td>
<td>Node的包管理器npm诞生</td>
</tr>
<tr>
<td>20010年底</td>
<td>joyent公司赞助Node的开发, Ryan Dahl加入旗下, 全职负责Node</td>
</tr>
<tr>
<td>20011年7月</td>
<td>Node在微软的帮助下发布了windows版本</td>
</tr>
<tr>
<td>20011年11月</td>
<td>Node超越Ruby on Rails, 成为Github上关注最高的项目</td>
</tr>
<tr>
<td>20012年1月</td>
<td>Ryan Dahl离开Node项目</td>
</tr>
<tr>
<td>20014年12月</td>
<td>Fedor indutny制作了分支版本io.js</td>
</tr>
<tr>
<td>20015年初</td>
<td>Node.js基金会成立(IBM、Intel、微软、Joyent)</td>
</tr>
<tr>
<td>20015年9月</td>
<td>Node.js和io.js合并, Node4.0发布</td>
</tr>
<tr>
<td>20016年</td>
<td>Node6.0发布</td>
</tr>
<tr>
<td>20017年</td>
<td>Node8.0发布</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<hr>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>(3)模块化详解</title>
    <url>/blog/nodejs/3/</url>
    <content><![CDATA[<hr>
<h2 id="模块化详解"><a href="#模块化详解" class="headerlink" title="模块化详解"></a>模块化详解</h2><p>简单理解, 模块标识就是require()时, 填写的路径。node通过填写的这个模块标识来, 找到制定的模块。</p>
<p>一.<strong>核心模块</strong></p>
<ol>
<li>核心模块是由node引擎提供的模块。</li>
</ol>
<p>二.<strong>文件模块</strong></p>
<ol>
<li>文件模块则是用户自己创建的模块。</li>
<li>而文件模块的标识就是文件的路径, 可以是绝对路径或者相对路径。</li>
<li>一般都是相对路径, 但是使用相对路径必须以.或..开头。</li>
<li>比如上一级就是..&#x2F;文件名, require(“..&#x2F;x.js”)</li>
<li>而同级目录不能直接使用文件名, 必须以.&#x2F;文件名的方式引入。require(“.&#x2F;x.js”)</li>
</ol>
<h2 id="模块中的变量"><a href="#模块中的变量" class="headerlink" title="模块中的变量"></a>模块中的变量</h2><p><strong>global</strong></p>
<p>在模块中未暴露的变量, 是局部变量。他们都运行在function中。node中没有window。但在node中有一个全局对象global。它的作用和网页中的window类似。是在全局中创建的。</p>
<hr>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>(2)nodejs的安装</title>
    <url>/blog/nodejs/2/</url>
    <content><![CDATA[<hr>
<h2 id="nodejs的安装"><a href="#nodejs的安装" class="headerlink" title="nodejs的安装"></a>nodejs的安装</h2><p>Node一开始就是4点几, 它没有3点几、2点几的版本。它从最初的开源项目, 变成企业产品, 背离了开源思想, 所以才有Fedor indutny制作了io.js, 最后Node.js基金会成立, 又变回了开源项目, 经历了诸多的变故, 才在15年发布了Node4.0。Node的偶数版本是正式稳定版, 奇数版本是测试版。所以注意要使用Node注意使用偶数的版本。</p>
<h3 id="node版本管理工具nvm"><a href="#node版本管理工具nvm" class="headerlink" title="node版本管理工具nvm"></a>node版本管理工具nvm</h3><p>nvm是node版本管理工具。由于在打开不同的项目时, 不同的项目在安装依赖时可能会和node版本有关, 所以这就需要我们在不同的项目下使用不同的node版本。nvm就是一个比较好用node管理工具, 切换node版本。</p>
<p><strong>nvm安装(windows)</strong></p>
<p><a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows-github下载</a></p>
<p><strong>nvm镜像配置</strong></p>
<p>使用nvm安装node时, 默认的镜像源是<code>(https://nodejs.org/dist)</code>, 从默认的镜像源下载会很慢, 所以可以通过更换镜像源加快下载。找到windows-nvm的安装目录, 如果安装时没有修改默认地址则为</p>
<pre><code>C:\Users\Administrator\AppData\Roaming\nvm
</code></pre>
<p>在settings.txt中增加软件源。</p>
<p><strong>settings.txt</strong></p>
<pre><code>node_mirror: https://npm.taobao.org/mirrors/node/
npm_mirror: https://npm.taobao.org/mirrors/npm/
</code></pre>
<p><strong>nvm安装node</strong></p>
<pre><code>nvm install stable ## 安装最新稳定版 node
或
nvm install &lt;version&gt; ## 安装指定版本
</code></pre>
<p><strong>nvm其他常用口令</strong></p>
<pre><code>nvm uninstall &lt;version&gt; ## 删除已安装的指定版本

nvm use &lt;version&gt; ## 切换使用指定的版本node

nvm ls ## 列出所有安装的版本

nvm ls-remote ## 列出所有远程服务器的版本

nvm current ## 显示当前的版本

nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名

nvm unalias &lt;name&gt; ## 删除已定义的别名

nvm reinstall-packages &lt;version&gt; ## 在当前版本node 环境下, 重新全局安装指定版本号的npm 包

nvm alias default [node版本号] ##设置默认版本
</code></pre>
<hr>
<h3 id="直接下载安装nodejs"><a href="#直接下载安装nodejs" class="headerlink" title="直接下载安装nodejs"></a>直接下载安装nodejs</h3><p><strong>nodejs的<a href="https://nodejs.org/en/">下载地址</a></strong></p>
<hr>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>(1)Vue3起步介绍</title>
    <url>/blog/vue3/1/</url>
    <content><![CDATA[<hr>
<h2 id="Vue3起步介绍"><a href="#Vue3起步介绍" class="headerlink" title="Vue3起步介绍"></a>Vue3起步介绍</h2><blockquote>
<p>文本插值</p>
</blockquote>
<p>文本插值</p>
<figure class="highlight js"><figcaption><span>vue3</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.global.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;counter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  Counter: &#123;&#123; counter &#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">counter</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">Counter</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#counter&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>属性绑定</p>
</blockquote>
<p>鼠标悬停查看title</p>
<figure class="highlight js"><figcaption><span>vue3</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.global.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>鼠标悬停查看title<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>: <span class="string">&quot;标签属性值绑定&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>事件处理</p>
</blockquote>
<p>事件处理, 对插入的文本进行修改&#x2F;更新, 不需要去操作DOM元素。数据的修改和页面刷新显示都由Vue来处理。</p>
<figure class="highlight js"><figcaption><span>vue3</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.global.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>count:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickEvent&quot;</span>&gt;</span>点击更改count的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">clickEvent</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">count</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>双向绑定</p>
</blockquote>
<p>Vue 还提供了 v-model 指令, 它能轻松实现表单输入和应用状态之间的双向绑定。</p>
<figure class="highlight js"><figcaption><span>vue3</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.global.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> /&gt;</span><span class="comment">&lt;!-- 尝试修改input输入框中的值 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- ↑此处绑定的message也会发生变化 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>条件判断</p>
</blockquote>
<p>控制一个元素的显示和隐藏<br>控制是否应用某样式<br>JavaScript 表达式判断应用某样式</p>
<figure class="highlight js"><figcaption><span>vue3</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.global.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.redtext</span>&#123;<span class="attribute">color</span>:red&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>我会显示, 因为seen为true<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!seen&quot;</span>&gt;</span>我不会显示, 因为!seen为false<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;redtext:seen&#125;&quot;</span>&gt;</span>我应用了redtext样式,因为seen为true<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;!seen?&#x27;redtext&#x27;:&#x27;&#x27;&quot;</span>&gt;</span>我没有应用redtext样式,因为!seen为false<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">seen</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>列表循环</p>
</blockquote>
<p>列表循环, 展示列表内容</p>
<figure class="highlight js"><figcaption><span>vue3</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.global.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(list, index) in lists&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123;index&#125;&#125;.&#123;&#123;list.text&#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">lists</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">text</span>: <span class="string">&#x27;Build something awesome&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>组件化应用构建</p>
</blockquote>
<p>组件系统是 Vue 的另一个重要概念, 因为它是一种抽象, 允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想, 几乎任意类型的应用界面都可以抽象为一个组件树。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-1.png" alt="vue2-1"></p>
<p>在 Vue 中, 组件本质上是一个具有预定义选项的实例。在 Vue 中注册组件很简单：如对 app 对象所做的那样创建一个组件对象, 并将其定义在父级组件的 components 选项中。</p>
<figure class="highlight js"><figcaption><span>vue3</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.global.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 3.使用组件 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">MyComponent</span>=&#123; <span class="comment">// 1.定义组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;我是自定义组件&lt;/div&gt;`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">MyComponent</span> <span class="comment">// 2.注册组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>(2)根组件</title>
    <url>/blog/vue3/2/</url>
    <content><![CDATA[<hr>
<h2 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h2><p>传递给 createApp 的选项用于配置根组件。当我们挂载应用时, 该组件被用作渲染的起点。</p>
<pre><code>const RootComponent = &#123; 
  /* 选项 */ 
&#125;
const app = Vue.createApp(RootComponent)
const vm= app.mount(&#39;#app&#39;)
</code></pre>
<p>与大多数应用方法不同的是, <strong>mount 不返回应用本身</strong>。相反, 它<code>返回的是根组件实例</code>vm。</p>
<p>尽管大多数应用都只需要一个单一的组件就可以, 但是真实应用都是被组织成一个嵌套的、可重用的组件树。</p>
<pre><code>Root Component
└─ GoodsList
   ├─ GoodsItem
   │  ├─ DeleteGoodsButton
   │  └─ EditGoodsButton
   └─ GoodsListFooter
      ├─ ClearGoodssButton
      └─ GoodsListStatistics
//代表单独可复用的组件
</code></pre>
<hr>
<h3 id="组件实例-property"><a href="#组件实例-property" class="headerlink" title="组件实例 property"></a>组件实例 property</h3><p>在前面的例子中, 我们认识了根组件的data property, 在 data 中定义的property是通过组件实例暴露的。</p>
<figure class="highlight js"><figcaption><span>vue3</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.global.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">4</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">count</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//组件实例vm暴露data中定义的property</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>上例中, 根组件实例vm暴露了用户在data中定义的property (即count属性), 还包括用户定义的methods、props、computed、inject和setup, 也会在组件实例中暴露。</p>
<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><p>每个组件在<strong>被创建时</strong><code>都要经过一系列的初始化过程</code>。例如：需要<strong>设置数据监听</strong>、<strong>编译模板</strong>、<strong>将实例挂载到DOM</strong>并在<strong>数据变化时更新DOM</strong>等。同时<strong>在这个过程中</strong>也会<strong>运行一些叫做生命周期钩子的函数</strong>, 这给了用户<code>在不同阶段</code><strong>添加自己的代码的机会</strong>。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue3-lifecycle.svg" alt="vue3-lifecycle"></p>
<p>比如 <code>created</code> 钩子可以用来<strong>在一个实例被创建之后</strong>执行代码。</p>
<figure class="highlight js"><figcaption><span>vue3</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.global.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">1</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 这个this 指向的是vm实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count is: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">count</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br>不要在选项 property 或回调上使用箭头函数。</p>
<pre><code>比如 created: () =&gt; console.log(this.a)
或者 vm.$watch(&#39;a&#39;, newValue =&gt; this.myMethod())
</code></pre>
<p>因为箭头函数并没有 this, this 会作为变量一直向上级词法作用域查找, 直至找到为止。</p>
<p>经常导致 </p>
<pre><code>Uncaught TypeError: Cannot read property of undefined
</code></pre>
<p>或</p>
<pre><code>Uncaught TypeError: this.myMethod is not a function
</code></pre>
<p>之类的错误。</p>
<hr>
]]></content>
      <categories>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>(1)vue的MVVM</title>
    <url>/blog/vue2/1/</url>
    <content><![CDATA[<hr>
<h3 id="vue的MVVM"><a href="#vue的MVVM" class="headerlink" title="vue的MVVM"></a>vue的MVVM</h3><p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-1.png" alt="vue2-1"></p>
<p>Model View ViewModel, Model是行为层(js), View是视图层(html), js不再直接控制html的DOM进行监听和数据绑定, 而是通过ViewModel(Vue实例)进行Data Bindings(数据绑定)以及DOM Listeners(DOM监听), 个人理解。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(10)computed的setter和getter</title>
    <url>/blog/vue2/10/</url>
    <content><![CDATA[<hr>
<h3 id="computed的setter和getter"><a href="#computed的setter和getter" class="headerlink" title="computed的setter和getter"></a>computed的setter和getter</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">firstName</span>:<span class="string">&quot;弗拉基米尔&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">middleName</span>:<span class="string">&quot;伊里奇&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lastName</span>:<span class="string">&quot;乌里扬诺夫&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fullName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot;·&quot;</span> + <span class="variable language_">this</span>.<span class="property">middleName</span> + <span class="string">&quot;·&quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p><code>在使用computed中定义的属性时&#123;&#123;fullName&#125;&#125;, 它的使用方式, 和使用data中的属性方法一模一样&#123;&#123;firstName&#125;&#125;。类似&#123;&#123;fullName&#125;&#125;这种用法事实上是一种简写, computed中定义的fullName是一个对象, 这个对象有get和set两个方法, 简写就是只实现了get方法</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setFullName()&quot;</span>&gt;</span>set<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">firstName</span>:<span class="string">&quot;弗拉基米尔&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">middleName</span>:<span class="string">&quot;伊里奇&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lastName</span>:<span class="string">&quot;乌里扬诺夫&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fullName</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot;·&quot;</span> + <span class="variable language_">this</span>.<span class="property">middleName</span> + <span class="string">&quot;·&quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">getStr</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在对fullname进行赋值的时候, 会自动调用set方法, 并可以接收参数:&quot;</span>+getStr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">setFullName</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="string">&quot;computed-fullName被重新设置了&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>在实际项目中, 事实上我们并不希望用户随便对我们的数据设置值。大部分情况下我们都不需要实现set方法。而作为一个只读属性。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(11)事件监听v-on</title>
    <url>/blog/vue2/11/</url>
    <content><![CDATA[<hr>
<h3 id="事件监听v-on"><a href="#事件监听v-on" class="headerlink" title="事件监听v-on"></a>事件监听v-on</h3><p>前端交互, 用于监听如点击、拖拽、提交、键盘事件等等</p>
<pre><code>语法：&lt;div v-on:click=&quot;方法名&quot;&gt;&lt;/div&gt;
语法糖：&lt;div @click=&quot;方法名&quot;&gt;&lt;/div&gt;
</code></pre>
<p>传递参数</p>
<pre><code>语法：&lt;div v-on:click=&quot;方法名(参数)&quot;&gt;&lt;/div&gt;
语法糖：&lt;div @click=&quot;方法名(参数)&quot;&gt;&lt;/div&gt;
</code></pre>
<hr>
<h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counterAdd&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counterSub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counter</span>:<span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counterAdd</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span>++;     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,                    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counterSub</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span>--;     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>不加括号, 默认传递原生事件event</p>
</blockquote>
<p>上面在使用加和减的方法时, 因为没有参数, 所以没有加小括号。但其实它是有一个默认的参数, <strong>原生事件的event</strong>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counterAdd&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counterSub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counter</span>:<span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counterAdd</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span>++   </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,                    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counterSub</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span>--</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>使用括号, $event传递事件</p>
</blockquote>
<p>如果使用括号, 需要手动添加$event参数, 才能正确传递event事件, 如果不需要使用到原生事件也可以不传, 其他参数正常传递即可。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;crement(1)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;crement(-1)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counter</span>:<span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">crement</span>(<span class="params">num</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span> += num</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(12)v-on的修饰符</title>
    <url>/blog/vue2/12/</url>
    <content><![CDATA[<hr>
<h3 id="v-on的修饰符"><a href="#v-on的修饰符" class="headerlink" title="v-on的修饰符"></a>v-on的修饰符</h3><blockquote>
<p>.stop调用event.stopPropagation()</p>
</blockquote>
<p>阻止事件Bubble</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>计数器：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;crement(1)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>父级点击事件：+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;crement(-1)&quot;</span>&gt;</span>子级没有阻止Bubble：-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;crement(-1)&quot;</span>&gt;</span>子级阻止Bubble：-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counter</span>:<span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">crement</span>(<span class="params">num</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span> += num</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>.prevent调用event.preventDefault()</p>
</blockquote>
<p>阻止默认事件<br>比如form中的按钮type为submit时, 点击会触发form的自动提交事件, 但我们并不想自动提交, 而是手动提交。就可以用.prevent阻止form的默认提交事件。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;未阻止默认事件, 点击后触发提交, 页面会刷新&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitClick&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;阻止默认事件, 点击后触发提交, 页面不会刷新&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;submitClick&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counter</span>:<span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">submitClick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;submit&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>




<blockquote>
<p>.{keyCode | keyAlias}</p>
</blockquote>
<p>只有当事件是从特定按键, 才会触发回调。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按下回车键才会触发&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;keyDown&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">keyDown</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你按了回车键&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>.once</p>
</blockquote>
<p>只触发一次回调。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;clickOnce&quot;</span>&gt;</span>只会触发一次点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">clickOnce</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我只会出现一次&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>.native监听组件根元素的原生事件</p>
</blockquote>
<p>当监听对象本身就是组件时, @click会无效, 需要@click.native才能监听组件的点击事件。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">zidingyizujian</span> @<span class="attr">click.native</span>=<span class="string">&quot;zujianclick&quot;</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">zidingyizujian</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const cpnC = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template:`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>我是组件中的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>直接绑定在组件上的点击事件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>点击组件的任何位置都可以触发<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const app = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    el:&quot;#app&quot;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    data:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      zidingyizujian:cpnC</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    methods:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      zujianclick()&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        console.log(&quot;组件点击事件, 只有加上native修饰符, 才会正常触发。&quot;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(13)v-if</title>
    <url>/blog/vue2/13/</url>
    <content><![CDATA[<hr>
<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>v-if的值是一个布尔值, 为true时, 游览器会渲染显示该元素。为false时, 不会渲染该元素。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>我会显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!isShow&quot;</span>&gt;</span>我不会显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isShow</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="v-if和-v-else"><a href="#v-if和-v-else" class="headerlink" title="v-if和 v-else"></a>v-if和 v-else</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>我是v-if<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>我是v-else<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isShow</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="v-if和-v-else-if和-v-else"><a href="#v-if和-v-else-if和-v-else" class="headerlink" title="v-if和 v-else-if和 v-else"></a>v-if和 v-else-if和 v-else</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;fenshu&gt;=90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;fenshu&gt;=80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;fenshu&gt;=60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setfenshu&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;&#x27;随机设置分数：&#x27; + fenshu&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fenshu</span>:<span class="number">92</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">setfenshu</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">fenshu</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">100</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>但是一般来说, 逻辑较为复杂的情况时, 并不建议这么做,<br>而是在计算属性中进行判断, 返回结论即可。</p>
<hr>
<h3 id="v-if和v-else可能会导致的一些小问题"><a href="#v-if和v-else可能会导致的一些小问题" class="headerlink" title="v-if和v-else可能会导致的一些小问题"></a>v-if和v-else可能会导致的一些小问题</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>为true的input：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>为false的input：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;&#x27;修改isShow的值：&#x27;+isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>在输入框中输入一些内容, 再点击按钮改变isShow的值, 切换输入框。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isShow</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>修改了<code>isShow</code>的值以后, 切换了输入框, 但是里面的值被保留了。就像input没有被切换一样。这是<code>vue的渲染机制</code>决定的, vue不会直接将这些内容渲染到页面上。而是<code>先将其渲染成虚拟vdom</code>保存在内存中, 再把vdom渲染到页面上。<code>为了避免内存浪费, 增加重复利用率</code>。如v-if和v-else中<code>相同的内容</code>会在虚拟dom中<code>保持不变</code>, 只会将不同的内容重新渲染。所以切换时使用的是同一个vdom, 而输入的value值被保留了下来。</p>
<blockquote>
<p>解决方法</p>
</blockquote>
<p>可以给两个input增加一个key属性, 设置为不同的值即可。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>为true的input：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">key</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>为false的input：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">key</span>=<span class="string">&quot;bbb&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;&#x27;修改isShow的值：&#x27;+isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>在输入框中输入一些内容, 再点击按钮改变isShow的值, 切换输入框。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isShow</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(14)v-show</title>
    <url>/blog/vue2/14/</url>
    <content><![CDATA[<hr>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>v-show与v-if一样, 它的值也是一个布尔值, 为true时, 会显示该元素。为false时, 不会显示该元素</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>我会显示1<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 注意这里是v-show不是v-if --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span>&gt;</span>我会显示2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;&#x27;修改isShow的值：&#x27;+isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isShow</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="v-show和v-if的区别"><a href="#v-show和v-if的区别" class="headerlink" title="v-show和v-if的区别"></a>v-show和v-if的区别</h3><p>v-show的条件不满足时, 是将元素的display属性设置为none。v-if的条件不满足时, 是将该元素从dom中移除。满足时又重新渲染。所以, 一般情况下, 我们需要将某元素, 频繁的显示隐藏时, 都是使用v-show。只有元素不需要频繁的显示隐藏时, 才会用到v-if。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(15)v-for遍历</title>
    <url>/blog/vue2/15/</url>
    <content><![CDATA[<hr>
<h3 id="v-for遍历数组"><a href="#v-for遍历数组" class="headerlink" title="v-for遍历数组"></a>v-for遍历数组</h3><p>v-for获取数组元素时, 可获取value 和 index(索引)。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in names&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;.&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">names</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王二&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="v-for遍历对象"><a href="#v-for遍历对象" class="headerlink" title="v-for遍历对象"></a>v-for遍历对象</h3><p>v-for获取对象时, 可获取 value + keyName + index</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value ,keyName ,index) in person&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;.&#123;&#123;keyName&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">person</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>:<span class="string">&quot;老高&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>:<span class="string">&quot;18&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="组件的key属性"><a href="#组件的key属性" class="headerlink" title="组件的key属性"></a>组件的key属性</h3><p>组件的key属性不是指对象中键值对那个key。官方推荐在<strong>使用v-for的时候</strong>给对应的元素或组件<strong>添加一个:key属性</strong>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in letters&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 不加key, 数据发生变化时, 在v-dom中无法与改变的数据一一对应, 只能一行一行重新渲染, 效率低下 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">letters</span>:[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>很多地方的demo都喜欢获取index作为key, 当数据发生变化时(中间插入或删除操作), <strong>index其实是会变的</strong>, 那么key就无法和item产生一一对应的关系, 还是会降低效率(此处不做深入研究)。</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
  &lt;ul&gt;
    &lt;li v-for=&quot;(item, index) in letters&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>
<p><strong>保证key的唯一性</strong>, 可以在数据发生变化时, <strong>提高重新渲染的性能</strong>(数据发生改变, 页面内容跟着改变, 响应式会重新渲染绑定的内容)。可以直接用item值绑定key或者, index+item绑定key。当然也可以用其他方式。</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
  &lt;ul&gt;
    &lt;li v-for=&quot;(item, index) in letters&quot; :key=&quot;index+&#39;&#39;+item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(16)数组的响应式</title>
    <url>/blog/vue2/16/</url>
    <content><![CDATA[<hr>
<h3 id="数组的响应式"><a href="#数组的响应式" class="headerlink" title="数组的响应式"></a>数组的响应式</h3><blockquote>
<p>非响应式</p>
</blockquote>
<p>直接通过索引修改数组元素不是响应式。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;letters&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;resetLetters&quot;</span>&gt;</span>通过索引修改数组的第一个值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">letters</span>:[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">resetLetters</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>[<span class="number">0</span>] = <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">letters</span>, <span class="string">&quot;letters数组发生了变化, 但页面中绑定的值没有响应式变化。&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>根据索引修改数组, 虽然data中的数据会改变, 但页面无法做到响应式。</p>
<pre><code>Vue提供了一种通过索引修改数组的方法, 可以做到响应式。
Vue.set(要修改的对象,索引值,修改后的值)
如：Vue.set(this.letters, 0, 1)
</code></pre>
<blockquote>
<p>支持响应式的操作</p>
</blockquote>
<p>其他可以做到响应式的数组方法包括： push、pop、shift、unshift、splice、sort、reverse…。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;letters&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrPush&quot;</span>&gt;</span>push:在数组的最后追加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrPop&quot;</span>&gt;</span>pop:删除数组最后一个元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrUnshift&quot;</span>&gt;</span>unshift:在数组的最前面添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrShift&quot;</span>&gt;</span>shift:删除数组第一个元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrSplice&quot;</span>&gt;</span>splice:从位置1开始, 删除2个元素, 添加2个元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrSort&quot;</span>&gt;</span>sort:对数组进行排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrReverse&quot;</span>&gt;</span>reverse:对数组进行反转<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">letters</span>:[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrPush</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">push</span>(<span class="string">&quot;push&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrPop</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">pop</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrUnshift</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">unshift</span>(<span class="string">&quot;unshift&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrShift</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">shift</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrSplice</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrSort</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">sort</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrReverse</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">reverse</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>splice</p>
</blockquote>
<p>使用splice操作数组(练习)。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;letters&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrSplice1&quot;</span>&gt;</span>splice(1,2)<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrSplice2&quot;</span>&gt;</span>splice(1)<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrSplice3&quot;</span>&gt;</span>splice(1,2,&quot;m&quot;,&quot;n&quot;)<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arrSplice4&quot;</span>&gt;</span>splice(1,0,&quot;m&quot;,&quot;n&quot;)<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">letters</span>:[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrSplice1</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从位置1开始, 删除后面的2个元素&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrSplice2</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">splice</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从位置1开始, 删除后面所有元素&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrSplice3</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从位置1开始, 删除2个元素, 添加2个新元素(删除和添加的元素个数一样, 可以理解为替换)&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">arrSplice4</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从位置1开始, 不需要删除, 直接插入2个元素(m和n)&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(17)书籍购物车案例</title>
    <url>/blog/vue2/17/</url>
    <content><![CDATA[<hr>
<h3 id="书籍购物车案例"><a href="#书籍购物车案例" class="headerlink" title="书籍购物车案例"></a>书籍购物车案例</h3><blockquote>
<p>知识点：过滤器</p>
</blockquote>
<p>mustache语法使用过滤器：<span><strong>{</strong></span>**{变量 | 过滤器}}**。变量会传入过滤器中, 在过滤器中对变量数据进行格式处理。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>: collapse;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;<span class="selector-tag">td</span>&#123;<span class="attribute">border</span>:<span class="number">#d6d6d6</span> solid <span class="number">1px</span>;<span class="attribute">text-align</span>:center;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;books.length&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>#<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in books&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement(index)&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;item.count&lt;=1&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123;item.count&#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment(index)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removetd(index)&quot;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>总价格：&#123;&#123;allprice | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>购物车为空<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">books</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">id</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&quot;《算法导论》&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">date</span>: <span class="string">&quot;2006-9&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">price</span>: <span class="number">85.00</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">count</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">id</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&quot;《UNIX编程艺术》&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">date</span>: <span class="string">&quot;2006-9&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">price</span>: <span class="number">109.00</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">count</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">id</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&quot;《编程珠玑》&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">date</span>: <span class="string">&quot;2006-9&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">price</span>: <span class="number">98.00</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">count</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">id</span>: <span class="number">4</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&quot;《代码大全》&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">date</span>: <span class="string">&quot;2006-9&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">price</span>: <span class="number">75.00</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">count</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">decrement</span>(<span class="params">index</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">count</span> --</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">increment</span>(<span class="params">index</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">count</span> ++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">removetd</span>(<span class="params">index</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">books</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//过滤器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">filters</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//会自动将过滤对象传入函数。所以过滤器本身是带参数的。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title function_">showPrice</span>(<span class="params">price</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">return</span> <span class="string">&quot;￥&quot;</span> + price.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">allprice</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> totalprice = <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="variable language_">this</span>.<span class="property">books</span>.<span class="property">length</span>;i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          totalprice += <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">count</span> * <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">price</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> totalprice</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>在v-text中使用过滤器： **v-text&#x3D;”$options.filters.过滤器(变量)”**。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(18)v-model表单绑定</title>
    <url>/blog/vue2/18/</url>
    <content><![CDATA[<hr>
<h3 id="v-model表单绑定"><a href="#v-model表单绑定" class="headerlink" title="v-model表单绑定"></a>v-model表单绑定</h3><p>1.表单控件在实际开发中是非常常见的, 特别是对于用户信息提交, 需要大量的表单。<br>2.不同于之前简单的数据绑定, 我们还需要获取用户自行输入的信息。将用户输入的信息动态响应到我们的data数据中, 以方便对数据进行判断、提交等操作。<br>3.vue中使用v-model指令来实现元素与数据的双向绑定。</p>
<blockquote>
<p>v-model与input</p>
</blockquote>
<p>输入框input的双向绑定数据。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- v-model绑定msg, 在input中修改数据, msg也会跟着变化 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是data中的msg：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>:<span class="string">&quot;你好&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>v-model与radio</p>
</blockquote>
<p>单选框radio的双向绑定数据。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>男</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>女</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户的选择：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">sex</span>:<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>!<code>注意</code>：一般单项选择框, 需要设置一样的name, 才能表示他们是一个组内的单选。但是使用v-model绑定可以不用设置name, 只需要绑定一样的数据(v-model&#x3D;”sex”)就可以了。</p>
<blockquote>
<p>v-model与checkbox</p>
</blockquote>
<p><strong>单个复选框</strong>：一般只用于判断选择与否, 不需要操作value值。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isAgree&quot;</span> /&gt;</span>同意协议</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;!isAgree&quot;</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isAgree</span>:<span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p><strong>多个复选框</strong>：这种情况一般就需要对选择的value进行操作。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> /&gt;</span>篮球</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> /&gt;</span>足球</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> /&gt;</span>乒乓球</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;羽毛球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> /&gt;</span>羽毛球</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>hobbies的值：&#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">hobbies</span>:[]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>v-model与select</p>
</blockquote>
<p>select标签的双向数据绑定。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;西瓜&quot;</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;火龙果&quot;</span>&gt;</span>火龙果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;皮球桃&quot;</span>&gt;</span>皮球桃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>fruit的值：&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fruit</span>: <span class="string">&quot;香蕉&quot;</span> <span class="comment">//默认选择项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p><strong>select选择多个值</strong>：使用较少</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;西瓜&quot;</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;火龙果&quot;</span>&gt;</span>火龙果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;皮球桃&quot;</span>&gt;</span>皮球桃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>fruits的值(按住Ctrl+点击多选)：&#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fruits</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(19)v-model修饰符</title>
    <url>/blog/vue2/19/</url>
    <content><![CDATA[<hr>
<h3 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h3><blockquote>
<p>lazy</p>
</blockquote>
<p>我们知道双向绑定的效果, 是在修改input值的时候, 实时的修改data中msg的值。这种实时修改频率太高, lazy修饰符的作用就是, 在修改input值的时候, 并不实时修改msg的值。而是在按了回车, 或者input失去焦点以后(一般这种行为, 表示用户已经输入完成), 再修改data中msg的值。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 只有在input失去焦点, 或按了回车才会更改msg的值 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>msg的值：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>:<span class="string">&quot;hello&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>number</p>
</blockquote>
<p>在双向绑定中, 即便是input类型设置了number, 但data数据在修改时, 也会自动变成string<br>number修饰符的作用就是, 让input的值发生变化时, 仍然保持number类型。<br>本例中, 尝试修改上方的input值会变成string, 修改下方的input值会变成number类型。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>num1的值是：&#123;&#123;num1&#125;&#125;, 值类型是：&#123;&#123;typeof num1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 即便input设置为number类型, 但data数据在修改时, 也会自动变成string --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;num2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>num2的值是：&#123;&#123;num2&#125;&#125;, 值类型是：&#123;&#123;typeof num2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 我们需要使用v-model的number修饰符, 让num2始终保持number的数据类型 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">num1</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">num2</span>: <span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>




<blockquote>
<p>trim</p>
</blockquote>
<p>有时用户在输入时, 可能由于习惯问题,会不自觉的在内容的两侧输入很多的空格。除了字符串中间的空格, 两边的空格可能是用户刻意而为之, 字符串两侧的空格大部分情况下都是无意义的, 使用trim修饰符可以自动去掉字符串两边的空格。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInput&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户输入的是：&#123;&#123;userInput&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">userInput</span>: <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(2)初识vue</title>
    <url>/blog/vue2/2/</url>
    <content><![CDATA[<hr>
<h3 id="初识vue"><a href="#初识vue" class="headerlink" title="初识vue"></a>初识vue</h3><blockquote>
<p>mustache语法</p>
</blockquote>
<p>数据绑定</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123;Msg&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>:<span class="string">&quot;hello world！&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>v-for</p>
</blockquote>
<p>List数据绑定</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(shuju,suoyin) in List&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;suoyin&quot;</span>&gt;</span>&#123;&#123;suoyin&#125;&#125;-&#123;&#123;shuju&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">List</span>: [<span class="string">&quot;星际穿越&quot;</span>, <span class="string">&quot;大话西游&quot;</span>, <span class="string">&quot;少年派&quot;</span>, <span class="string">&quot;盗梦空间&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>简单的计数器</p>
</blockquote>
<p>例：</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counterAdd()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counterSub()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counter</span>:<span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counterAdd</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span>++;     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,                    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">counterSub</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span>--;     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(20)组件化思维</title>
    <url>/blog/vue2/20/</url>
    <content><![CDATA[<hr>
<h3 id="组件化思维"><a href="#组件化思维" class="headerlink" title="组件化思维"></a>组件化思维</h3><p>组件化思维, 是将复杂的问题, 拆解成很多小问题, 逐一将小问题解决后, 就会发现复杂的问题也已经解决了。</p>
<p>组件化, 是vuejs中重要的思想。它提供了一种抽象, 让我们可以开发出一个个独立可复用的小组件来构造我们的应用。任何应用最终都会被抽象成一颗组件树。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-1.png" alt="vue2-1"></p>
<p><strong>组件的使用分成三个步骤：创建组件构造器&#x2F;注册组件&#x2F;使用组件</strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-2.png" alt="vue2-2"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(21)组件的基本使用方法</title>
    <url>/blog/vue2/21/</url>
    <content><![CDATA[<hr>
<h3 id="组件的基本使用方法"><a href="#组件的基本使用方法" class="headerlink" title="组件的基本使用方法"></a>组件的基本使用方法</h3><p>在应用开发的过程中, 可能有很多部分的代码雷同, 可能会复用多次。我们就可以将其抽象成一个组件。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">3</span>、使用组件, 多次复用 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1、创建组件构造器对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;h4&gt;我是标题&lt;/h4&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">             `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 2、注册组件Vue.component(&#x27;组件的标签名&#x27;,组件构造器)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>,cpnC)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p><strong>事实上</strong>, <strong>这种写法</strong>在Vue2.x的文档几乎<strong>已经看不到了</strong>, <code>这里只是说明组件思维的一种实现</code>。在构造器中的template里写html代码其实是很不方便的。</p>
<hr>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>组件只在Vue实例挂载的app元素内有效。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 在Vue实例挂载的app元素内有效 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 在Vue实例挂载的app元素内有效 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 在<span class="title class_">Vue</span>实例挂载的app元素外无效 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;h4&gt;我是标题&lt;/h4&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">             `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>,cpnC)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(23)父组件与子组件</title>
    <url>/blog/vue2/23/</url>
    <content><![CDATA[<hr>
<h3 id="父组件与子组件"><a href="#父组件与子组件" class="headerlink" title="父组件与子组件"></a>父组件与子组件</h3><p>父组件与子组件的区分。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpnc2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpnc2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // 1、创建第一个组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const cpnc1 = Vue.extend(&#123;  </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template:`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容cpnc1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // 2、创建第二个组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const cpnc2 = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template:`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容cpnc2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">cpnc1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpnc1</span>&gt;</span>  <span class="comment">&lt;!-- 注册了组件一, 可以直接使用 --&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      cpnc1</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // 3、在第二个组件里, 注册第一个组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const app = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    el: &quot;#app&quot;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    data: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      cpnc2</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // 4、在Vue实例中注册组件二</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>这种关系, 就是父子组件关系。第二个组件是第一个组件的父组件, 第一个组件是第二个组件的子组件。<br>其实Vue实例也可以看作是一个最顶层的组件(root)。在vue实例中注册的组件, 都是它的子组件。<br><strong>注意：虽然逻辑上 vue实例注册了cpn2 , cpn2注册了cpn1, 但是cpn1只能在cpn2中使用。不能在vue实例挂载的元素中使用！！！</strong>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>无效组件不会显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpnc1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpnc1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 这是无效的, 因为vue实例中, 并没有注册cpn1。 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- cpn1的作用域只在cpn2中, 因为只有cpn2注册了cpn1。 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // 1、创建第一个组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const cpnc1 = Vue.extend(&#123;  </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template:`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容cpnc1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // 2、创建第二个组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const cpnc2 = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template:`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容cpnc2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">cpnc1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpnc1</span>&gt;</span>  <span class="comment">&lt;!-- 注册了组件一, 可以直接使用 --&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      cpnc1</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // 3、在第二个组件里, 注册第一个组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const app = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    el: &quot;#app&quot;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    data: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      cpnc2</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // 4、在Vue实例中注册组件二</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(22)全局组件和局部组件</title>
    <url>/blog/vue2/22/</url>
    <content><![CDATA[<hr>
<h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>通过Vue注册的组件就是全局组件。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span>      </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;h4&gt;我是标题&lt;/h4&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">             `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 通过Vue注册的组件就是全局组件。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>,cpnC)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>全局组件在任何Vue实例中都能使用。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  我是Vue实例app,挂载的元素</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  我是Vue实例app1,挂载的元素</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;h4&gt;我是标题&lt;/h4&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">             `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 全局注册的组件在任何Vue实例中都能使用。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>,cpnC)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//这里只做演示, 一般在实际项目中, 只会有一个Vue实例。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><p>在vue实例内部注册的组件, 或在组件内注册的组件就是局部组件。<strong>局部组件</strong>只会在<strong>注册它的Vue实例</strong>, <strong>或组件</strong>内有效。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  Vue实例app注册了myCpn组件</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  Vue实例app1没有注册myCpn组件</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;h4&gt;我是标题&lt;/h4&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">             `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">myCpn</span>:cpnC <span class="comment">// 在components属性中, 进行局部注册。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//语法： 使用时的标签名:构造器。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//如果设置使用时的标签名与构造器名称一样, 则可以直接简写为 cpnC</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//但是注意：标签名中有大写时, 在使用时需要转换 如：myCpn应该写成my-cpn标签。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(24)组件的语法糖注册方式</title>
    <url>/blog/vue2/24/</url>
    <content><![CDATA[<hr>
<h3 id="全局组件注册"><a href="#全局组件注册" class="headerlink" title="全局组件注册"></a>全局组件注册</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// const cpnc1 = Vue.extend()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1、直接将构造器作为component的第二个参数。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;h4&gt;我是标题my-cpn&lt;/h4&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容my-cpn&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="局部组件注册"><a href="#局部组件注册" class="headerlink" title="局部组件注册"></a>局部组件注册</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const app = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    el: &quot;#app&quot;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    data: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      cpn:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template:`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是标题cpn<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容cpn<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p><strong>即便语法糖的方式注册, 简化了流程, 但是在js中写html, 这种写法仍然不友好</strong>。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(25)组件模板的分离写法</title>
    <url>/blog/vue2/25/</url>
    <content><![CDATA[<hr>
<h3 id="组件模板的分离写法"><a href="#组件模板的分离写法" class="headerlink" title="组件模板的分离写法"></a>组件模板的分离写法</h3><p>前面定义组件模板都是在, 创建构造器时, 在template中写入的。换言之都是在js中写html标签。组件模板分离可以将template中的html内容抽离出来, 写在html页面中, 而不需要在js中定义html模板, 这样会友好很多。<br>组件模板分离有两种方式。</p>
<blockquote>
<p>script</p>
</blockquote>
<p>将template抽离, 以script的形式放在页面中, 注意类型必须是<code>text/x-template</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 将template抽离, 以script的形式放在页面中。 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是标题cpn1<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容cpn1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 将script标签的id放到template。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn1&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&#x27;#cpn1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>template</p>
</blockquote>
<p>直接放在<code>template</code>标签中。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 将template抽离, 直接放在template标签中。 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是标题cpn2<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容cpn2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 将template的id放到template。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn2&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&#x27;#cpn2&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(26)组件数据</title>
    <url>/blog/vue2/26/</url>
    <content><![CDATA[<hr>
<h3 id="组件数据"><a href="#组件数据" class="headerlink" title="组件数据"></a>组件数据</h3><p>在前面的组件注册中, 我们就发现。Vue实例可以在components属性中注册组件, 而在组件中也有一个components属性, 也可以在其中注册自己的子组件。</p>
<p>事实上, Vue实例对象中的很多属性和方法, 在组件中也可以使用。比如Vue实例中的data、methods、computed等等, 组件像极了一个Vue实例。</p>
<blockquote>
<p>data</p>
</blockquote>
<p><code>组件不能直接访问Vue实例中的data数据</code>, 每个组件都有自己独立保存数据的地方data, 但是<code>注意</code>, Vue实例的data是一个对象 , 而组件中的data是一个函数, 它返回了一个对象。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;con&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;  <span class="comment">// 组件的data是一个函数, 返回一个对象。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>:<span class="string">&#x27;我是组件的data数据title&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">con</span>:<span class="string">&#x27;我是组件的data数据con&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;  <span class="comment">// Vue实例的data是一个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>那为什么Vue在设计组件的时候, 要求组件数据必须是一个函数呢？</p>
<p>这源于组件基本思维中的复用性。要保证组件的复用性, 就需要保持组件中数据的独立性。 如果data数据是一个对象, 那么在多次引用该组件的时候, 他们使用的就是同一个data对象。当其中一个组件操作导致数据发生变化时, 其他引用组件的地方data数据也会发生变化, 相互影响, 那组件的复用性就不复存在了。 </p>
<p>而函数在每次返回对象时, 会在栈空间创建一个新的内存地址保存对象, 使组件在复用时, 对象数据互不影响。</p>
<p>如果我们确实有这样的需求, 我们希望多次复用组件。并希望他们共用数据。那么可以将data中函数返回的对象抽离出去, 在外部定义一个变量存放对象数据。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(27)组件通信-父传子</title>
    <url>/blog/vue2/27/</url>
    <content><![CDATA[<hr>
<h3 id="组件通信-父传子"><a href="#组件通信-父传子" class="headerlink" title="组件通信-父传子"></a>组件通信-父传子</h3><p> 组件是可复用的, 如果组件内的动态数据, 都由组件自行通过网络请求获取, 这并不利于项目、数据管理和维护。 试想当一个小组件是通过v-for遍历展示列表信息时, 不可能每一个小组件都去请求一次数据。 通常都是由最外层的组件请求数据。其内部组件的数据就只能从父级获取。这就涉及到了父组件向子组件传递数据的问题。</p>
<blockquote>
<p>props:[]</p>
</blockquote>
<p>props是properties属性的意思, 使用props可以向子组件传递数据。它也有两种方式传递。</p>
<p>方式一：数组, 数组中的元素是字符串, 字符串就是传递时的名称。(在实际开发时, 很少用数组语法)</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn1</span> <span class="attr">:childrenfruits</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">:childrentitle</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 使用子组件中props变量, 动态绑定, 父组件中的data数据。 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件模板 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;childrentitle&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in childrenfruits&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 对数据进行展示操作 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//定义一个子组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpn1 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//通过变量即可绑定父组件的data数据。:childrenfruits=&#x27;父组件的data属性名&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>:[<span class="string">&#x27;childrenfruits&#x27;</span>,<span class="string">&#x27;childrentitle&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//父组件数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">title</span>:<span class="string">&quot;水果列表&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fruits</span>:[<span class="string">&#x27;香蕉&#x27;</span>,<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;榴莲&#x27;</span>,<span class="string">&#x27;梨子&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//注册子组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      cpn1</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>props:{}</p>
</blockquote>
<p>方式二：对象, 对象可以设置传递时的类型, 也可以设置默认值等, 也是我们最常使用的方式。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn1</span> <span class="attr">:childrenfruits</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">:childrentitle</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 使用子组件中props传递的变量, 动态绑定, 父组件中的data数据。 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件模板 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;childrentitle&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in childrenfruits&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 对数据进行展示操作 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//定义一个子组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpn1 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123; <span class="comment">// 对象语法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">childrentitle</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//设置接收数据的类型,可以设置为多种类型 [String,Number]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&quot;未从父级获取到数据时, 显示的默认值&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">required</span>:<span class="literal">false</span> <span class="comment">//是否是必传的值, 如果设置为true, 那么不传值就会报错。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">childrenfruits</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">default</span>(<span class="params"></span>)&#123; <span class="comment">//如果类型为数组或对象, 那么它的默认值只能是一个函数, 返回相应的数据类型。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> [<span class="string">&#x27;内容未获取&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">required</span>:<span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//父组件数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">title</span>:<span class="string">&quot;水果列表&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fruits</span>:[<span class="string">&#x27;香蕉&#x27;</span>,<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;榴莲&#x27;</span>,<span class="string">&#x27;梨子&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//注册子组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      cpn1</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>props默认值</p>
</blockquote>
<p>也有不传值的情况, 可以设置props的默认值, 当没有传值的时候, 使用默认值。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 不传值的情况 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;childrentitle&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in childrenfruits&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpn1 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">childrentitle</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>:<span class="title class_">String</span>, </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&quot;未从父级获取到数据时, 显示的默认值&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">required</span>:<span class="literal">false</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">childrenfruits</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">default</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> [<span class="string">&#x27;内容未获取&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">required</span>:<span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">title</span>:<span class="string">&quot;水果列表&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fruits</span>:[<span class="string">&#x27;香蕉&#x27;</span>,<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;榴莲&#x27;</span>,<span class="string">&#x27;梨子&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      cpn1</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>注意：props中的变量使用驼峰式命名时, 在绑定数据时(v-bind)不支持驼峰命名, 只能做一层转化。 比如props中有一个myName变量, 在使用时就只能, &lt;cpn :my-name&#x3D;”title”&gt;&lt;&#x2F;cpn&gt;。要么全小写, 要么做转化。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(28)组件通信-子传父</title>
    <url>/blog/vue2/28/</url>
    <content><![CDATA[<hr>
<h3 id="组件通信-子传父"><a href="#组件通信-子传父" class="headerlink" title="组件通信-子传父"></a>组件通信-子传父</h3><p>有父组件向子组件传值的情况, 当然也有子组件需要向父组件传值的情况。试想, 子组件是一个表单, 那么在用户输入了信息最后, 我们需要将获取到的用户信息传递给父组件(根组件), 让父组件拿着信息去进行网络请求。</p>
<blockquote>
<p>this.$emit(‘自定义事件名’,携带的参数)</p>
</blockquote>
<p>子组件使用 this.$emit(‘自定义事件名’,携带的参数)发送自定义事件并携带参数, 在父组件中监听自定义事件即可。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 在此处就可以监听自定义事件, 再在父组件定义的函数中进行处理 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 组件中的自定义事件, 省略掉参数, 默认参数是, emit发送的参数, 而不是原生event --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn</span> <span class="attr">:childrencategories</span>=<span class="string">&quot;categories&quot;</span> @<span class="attr">itemclick</span>=<span class="string">&quot;mycpnclick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in childrencategories&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">click</span>=<span class="string">&quot;btnclick(item)&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">childrencategories</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>:<span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">default</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">required</span>:<span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">btnclick</span>(<span class="params">item</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//从这里开始向父组件发送数据, 当前组件(this)向外发射(emit)一个自定义事件。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//这个事件我们需要自己取名字, 如 itemClick。同时携带参数item。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;itemclick&#x27;</span>, item)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//而在父组件中就可以通过 v-on:自定义事件名 = &quot;处理函数&quot; 进行监听。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//这个监听事件是写在, 子组件的标签上的。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">categories</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;<span class="attr">id</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;苹果&quot;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;<span class="attr">id</span>:<span class="string">&quot;bbb&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;香蕉&quot;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;<span class="attr">id</span>:<span class="string">&quot;ccc&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;榴莲&quot;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;<span class="attr">id</span>:<span class="string">&quot;ddd&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;梨子&quot;</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">mycpnclick</span>(<span class="params">item</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">name</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p><strong>注意：</strong>子组件props中的变量, 是来自于父组件的传递, 如果在子组件内部进行<strong>v-model双向绑定时</strong>, <strong>不要直接绑定props中的变量</strong>(因为v-model涉及修改变量的值, 但你并不能直接修改父组件传来的值), 而要通过子组件的data或者计算属性获取props中的属性值, 再双向绑定data变量或计算属性。否则会报错。<br><strong>不推荐这么做</strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-4.png" alt="vue2-4"></p>
<p><strong>正确做法</strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-5.png" alt="vue2-5"></p>
<p>当然还有其他的方法实现, 比如子组件使用<strong>计算属性</strong>获取props的变量值, 操作方法跟上图一样。另外也可以通过<strong>watch</strong>实现。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(29)父子组件互相访问</title>
    <url>/blog/vue2/29/</url>
    <content><![CDATA[<hr>
<h3 id="父子组件互相访问"><a href="#父子组件互相访问" class="headerlink" title="父子组件互相访问"></a>父子组件互相访问</h3><p>父子组件还可以直接相互访问他们之间的data数据和方法。</p>
<hr>
<h3 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h3><blockquote>
<p>this.$children</p>
</blockquote>
<p>this.$children是一个<strong>数组类型</strong>, 它<strong>包含所有子组件对象</strong>, 比如父组件中有n个子组件, 那么this.$children就是包含了n个子组件的数组。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>我是父组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//子组件中有一个msg变量和childrenShowMsg方法。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>:<span class="string">&quot;我是子组件中的data变量msg&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">childrenShowMsg</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="string">&quot;我是子组件中的方法childrenShowMsg&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//父组件访问子组件中的变量或方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//this.$children获取到的是所有子组件。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//this.$children[0]获取到子组件对象的第一个对象。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="property">msg</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="title function_">childrenShowMsg</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>但是在实际开发中, 需求不是一成不变的, 根据this.$children[0]数组索引获取对象, 并不科学, 如果该组件前面又增加了其他组件, 那这种方法就可能会导致运行错误。<strong>所以在实际开发中, 我们很少用this.$children获取组件对象</strong>。</p>
<blockquote>
<p>this.$refs</p>
</blockquote>
<p>this.$refs默认是一个空的对象, 当子组件有ref属性时(例子ref&#x3D;”aaa”),就可以直接通过this.$refs.aaa获取到该组件对象, 进而直接访问子组件中的data数据或方法。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 给组件定义一个ref属性, 就可以通过this.$refs.aaa直接访问 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn1</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>我是父组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//子组件中有一个msg变量和childrenShowMsg方法。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn1 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>:<span class="string">&quot;我是子组件中的data变量msg&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">childrenShowMsg</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="string">&quot;我是子组件中的方法childrenShowMsg&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//父组件访问子组件中的变量或方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//this.$refs.aaa直接获取到 属性ref=&quot;aaa&quot;的子组件。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">aaa</span>.<span class="property">msg</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">aaa</span>.<span class="title function_">childrenShowMsg</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn1</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h3><blockquote>
<p>this.$parent</p>
</blockquote>
<p>this.$parent可以获取当前组件的父级组件实例。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;cpnClick&quot;</span>&gt;</span>我是子组件中的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn2 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn2&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">cpnClick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="title function_">parentShowMsg</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app2&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">parentShowMsg</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是父组件中的parentShowMsg方法&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn2</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>this.$root</p>
</blockquote>
<p>如果Vue实例注册了组件1, 组件1注册了组件2, 组件2注册了组件3…..组件n, 最底层的组件n可以通过this.$root访问最顶层的组件, 也就是Vue实例, 可以直接访问Vue实例中的属性和方法。这里就不做演示了(与this.$parent同理, 只不过访问的是Vue实例)。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(3)vue的生命周期</title>
    <url>/blog/vue2/3/</url>
    <content><![CDATA[<hr>
<h3 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h3><p>生命周期</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-lifecycle.png" alt="vue2-lifecycle"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(30)组件的插槽slot</title>
    <url>/blog/vue2/30/</url>
    <content><![CDATA[<hr>
<h3 id="组件的插槽slot"><a href="#组件的插槽slot" class="headerlink" title="组件的插槽slot"></a>组件的插槽slot</h3><p>slot翻译为插槽, 那什么是插槽？<br>在生活中有很多地方都有插槽, 插板的电源插槽、电脑的USB插槽, 手机的耳机插槽等。插槽的目的, 就是为了让设备更具有拓展性。比如电脑的USB插槽可以插入U盘、手机、音响、键盘、鼠标等等。<br>在组件中, 在复用时也许需求会有些许不同, 在这些不同的地方, 我们就可以使用插槽, 让使用者来决定, 应该显示什么, 使其更具有拓展性。<strong>其核心思维就是：抽取共性, 保留不同。</strong></p>
<blockquote>
<p>slot</p>
</blockquote>
<p>插槽slot的基本用法。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>我插入了按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>我插入了b标签<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>我插入了i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="comment">&lt;!-- 插槽可以根据情况插入不同的元素 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>插槽的默认值</p>
</blockquote>
<p>当一个插槽可能插入的某一内容, 复用可能性很高时, 可以不必每次使用时, 都去设置插入内容。将复用可能性最高的内容直接设置为插槽的默认值即可, 这样在不做插入操作时, 插槽就会自动插入默认内容。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 没有插入, 显示插槽的默认插入元素 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>我插入了按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>如果插入的元素有够复杂<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>又只有一个插槽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>那么里面的元素会一起替换到插槽中<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>我是插槽中默认的插入元素, 只要不插入就显示我<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn1 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn1</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(31)组件的具名插槽slot</title>
    <url>/blog/vue2/31/</url>
    <content><![CDATA[<hr>
<h3 id="组件的具名插槽slot"><a href="#组件的具名插槽slot" class="headerlink" title="组件的具名插槽slot"></a>组件的具名插槽slot</h3><p>什么是具名插槽？就是给插槽取个名字, 在实际项目中, 组件的插槽不会只有一个, 试想, 一个组件中有若干个插槽, 而我们想要替换的又是指定位置的插槽, 那就无法操作了。具名插槽的作用就是一个标识, 在替换时可以指定标识, 来替换指定标识的插槽。</p>
<p>先来看看<strong>无具名</strong>插槽可能会造成的问题。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>只插入一个元素, 三个插槽都会被替换<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>如果插入N个元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>那么这N个元素作为一体, 都会插入三个插槽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>我是第一个插槽的默认元素<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是第二个插槽的默认元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>我是第三个插槽的默认元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn1 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn1</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>没有指定替换插槽的名字, 组件中又没有无名插槽, 替换无效<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;dier&quot;</span>&gt;</span>我替换了名为dier的插槽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;diyi&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>插槽1, 未指定替换元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;dier&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>插槽2, 未指定替换元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;disan&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>插槽3, 未指定替换元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn2 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn2&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app2&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn2</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(32)作用域插槽</title>
    <url>/blog/vue2/32/</url>
    <content><![CDATA[<hr>
<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>有这么一个需求, <code>子组件有自己的数据内容</code>, 并在其内部渲染出来。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in fruits&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 使用li循环渲染了fruits数据 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn1 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fruits</span>:[<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;榴莲&quot;</span>,<span class="string">&quot;桂圆&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn1</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>这个时候新的需求来了, 在子组件中, 固定的使用了li渲染列表。<code>现在不想用li渲染了。想用span来渲染</code>。虽然觉得直接修改组件模板是最快的, 但是如果组件在其他地方复用。而其他地方的需求可能就是使用li渲染, 就不太好了。我们先将ul列表放进插槽中, 将ul列表渲染作为默认显示样式。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;template id=&quot;cpn1&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;item in fruits&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;!-- 将ul放入插槽中, 将其作为插槽的默认显示样式。 --&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const mycpn1 = &#123;</span><br><span class="line">    template:&quot;#cpn1&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        fruits:[&quot;苹果&quot;,&quot;香蕉&quot;,&quot;榴莲&quot;,&quot;桂圆&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const app1 = new Vue(&#123;</span><br><span class="line">    el: &quot;#app1&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      mycpn1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>但是在使用时有个问题, 数据是由子组件提供的, 我们需要在插槽中更换显示样式, 数据也要在新的样式中展示, 怎么拿到数据呢 , 难道要用子传父的方式传递给父组件去重新渲染吗？这里就可以用到作用域插槽<code>slot-scope</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 在vue的2.5点几以下, 必须用template模板。2.5点几以上可以用div。 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 为了让这个模板有更好的适应性, 我们继续用template --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 通过slot-scope引用插槽对象, 取个名字, 如myslotname --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 再通过myslotname拿到自定义的数据zidingyidata --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;myslotname&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in myslotname.zidingyidata&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125; - <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;myslotname&quot;</span>&gt;</span> <span class="comment">&lt;!-- 在template的slot-scope定义了一个变量 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in myslotname.zidingyidata&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125; * <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 再通过这个变量获取slot插槽传递的值。myslotname.zidingyidata --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 然后我们就可以根据自己的需求, 对数据进行不同风格的渲染 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;myslotname&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;myslotname.zidingyidata.join(&quot; - &quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mycpn2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:zidingyidata</span>=<span class="string">&quot;fruits&quot;</span>&gt;</span> <span class="comment">&lt;!-- 自定义了一个变量传递fruits数据 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in fruits&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!-- 默认渲染风格 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> mycpn2 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cpn2&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fruits</span>:[<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;榴莲&quot;</span>,<span class="string">&quot;桂圆&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app2&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mycpn2</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(33)组件的实际使用形式</title>
    <url>/blog/vue2/33/</url>
    <content><![CDATA[<hr>
<h3 id="组件的实际使用形式"><a href="#组件的实际使用形式" class="headerlink" title="组件的实际使用形式"></a>组件的实际使用形式</h3><p>在页面中, 无论组件中的内容怎么抽离。都会显得混乱。事实上在实际的项目中, 组件都是一个一个单独的, 以.vue结尾的文件。这让我们对组件的管理变得容易, 也更加清晰。单文件组件充分体现了组件的复用性</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-3.png" alt="vue2-3"></p>
<p><strong>普通的html页面</strong>是<strong>不能直接运行单文件组件.vue</strong>的, <strong>它需要编译后才能使用</strong>。主流的都是<strong>结合webpack实现工程化</strong>, 后续将学习webpack。</p>
<p><strong>拓展：当然也有其他方法, 绕过编译环境</strong>, 比如使用<a href="https://github.com/FranckFreiburger/http-vue-loader">http-vue-loader</a>,可以直接在html页面中使用vue, 但在<code>实际项目</code>开发中<code>不建议使用</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/http-vue-loader&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my-app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">check-button</span> <span class="attr">ischecked</span>=<span class="string">&quot;true&quot;</span> <span class="attr">checktxt</span>=<span class="string">&quot;单选框组件&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">check-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#my-app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;CheckButton&#x27;</span>: <span class="title function_">httpVueLoader</span>(<span class="string">&#x27;link/CheckButton.vue&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 注意：vue组件中的ES6规范export default</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 需要修改为commonjs规范module.exports =</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 不然没效果。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(34)前端模块化思维</title>
    <url>/blog/vue2/34/</url>
    <content><![CDATA[<hr>
<h3 id="前端模块化思维"><a href="#前端模块化思维" class="headerlink" title="前端模块化思维"></a>前端模块化思维</h3><p>如果只简单接触过JavaScript或jQuery的使用的话, 可能很难理解什么是模块化。如果不接触node, 前端其实是很难接触到模块化的。在此之前前端就没有模块化的概念。现在前端发展到三大框架的阶段, 而这三大框架的开发, 基本上都用到了模块化的概念。所以现在模块化对前端也非常重要, 现在的前端开发, 基本上都是用模块化开发的。要理解模块化开发, 可能我们要从最基本的开始讲起。</p>
<blockquote>
<p>JavaScript的原始功能</p>
</blockquote>
<p>JavaScript最初只是为了执行一些最简单的脚本, 比如表单验证。这在拨号上网, 网速慢如蜗牛的年代, 非常有用, 主要为了防止用户提交的信息失误、或不符合规范, 等了半天却只得到一个错误提示。页面在最初就只有html和css, 而JavaScript最多也只是在script标签中书写。所以在早期的时候JavaScript非常简单。</p>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;button&quot;</span>)[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;按钮发生了点击&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>随着ajax异步请求的出现, 慢慢形成了前后端分离</p>
</blockquote>
<p>客户端要完成的事情, 越来越多, 代码量与日俱增。为了应对代码量的剧增, 我们就不会再将代码简单的写在script标签里了, 通常我们会将代码创建在多个js文件中, 进行维护。即便如此, 依然不能避免一些灾难性的问题。<strong>尤其在大型项目中, 往往不是一个人在进行开发, 而是多人开发</strong>。</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;!-- 项目组长做一些项目的初始化构建 --&gt;
    &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;
    &lt;!-- 开发者A --&gt;
    &lt;script src=&quot;a1.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;a2.js&quot;&gt;&lt;/script&gt;
    &lt;!-- 开发者B --&gt;
    &lt;script src=&quot;b1.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;b2.js&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
&lt;!-- 这种方式对js文件的依赖顺序几乎是强制性的, 甚至js的加载顺序都有强制性要求 --&gt;
</code></pre>
<p>当开发者A在a1.js中定义了一个变量name, 在自己创建的a2.js中使用, 在个人开发期间可能不会出什么问题。那如果开发者B也定义了一个与开发者A定义的同名变量name, 这个时候就可能造成不可预期的错误。</p>
<p>当然开发者A可以在a1.js中通过匿名函数解决, 但是, a1中定义的变量或方法, 就无法在a2中使用了, 自己的定义的变量和方法, 连自己的难以访问, 代码的复用性就降低了很多。</p>
<p><strong>但是如果知道模块化的话, 我们可以使用另一种方式实现</strong></p>
<p>开发者A：a1.js</p>
<pre><code>var moduleA = (function()&#123;
  var flag = true
  function sum(num1,num2)&#123;
    return num1 + num2
  &#125;
  //定义一个导出的对象
  var obj = &#123;&#125;
  obj.flag = flag
  obj.sum = sum
  
  //将obj  return出去
  return obj
&#125;)()
</code></pre>
<p>开发者A：a2.js</p>
<pre><code>;(function()&#123;
  if(moduleA.flag)&#123;
    console.log(moduleA.num(10,20)); //访问a1中的方法
  &#125;  
&#125;)
</code></pre>
<p>这样不同的开发者, 只需要避免moduleA这个变量不会重复就可以了, 而里面的其他变量或方法, 就不需要去关心是否重复。这就是模块化最基础的封装, 事实上, 模块化还有很多高级的话题。幸运的是, 前端模块化, <strong>已经有了很多既有的规范</strong>, 以及对应的实现方案。所以<strong>我们现在已经不需要自己去实现了</strong>, 只需要遵循即可。前端的模块化方案包括：<strong>CommonJS、AMD、CMD, 也有ES6的Modules</strong>。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(35)模块化的核心</title>
    <url>/blog/vue2/35/</url>
    <content><![CDATA[<hr>
<h3 id="模块化的核心"><a href="#模块化的核心" class="headerlink" title="模块化的核心"></a>模块化的核心</h3><p><strong>模块化有两个核心, 一个是导出一个是导入。比如上页中的return就是导出操作, 在使用时就是导入</strong>。在vue项目开发中, 大多使用的是ES6的模块化规范, 但也必须对CommonJS规范有所了解, 因为在做webpack的配置文件时, 使用的是CommonJS规范。</p>
<hr>
<h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><blockquote>
<p>CommonJS的导出和导入</p>
</blockquote>
<p>module.exports导出。</p>
<pre><code>var flag = true
function sum(num1, num2)&#123;
  return num1 + num2
&#125;
module.exports = &#123;
  flag,
  sum
&#125;
//但是这种结构前端页面是无法直接运行的。它需要底层支撑, 解析, 才能变成页面能认识的js代码。
//在webpack中配置文件时, 就需要这么写。
//因为webpack依托于node, 而node就是基于CommonJS规范的, 它的底层已经做了支撑。
</code></pre>
<p>require导入</p>
<pre><code>var &#123;flag, sum&#125; = require(&quot;js文件地址&quot;)
        
//等同于
var aaa = require(&quot;js文件地址&quot;)
var flag = aaa.flag
var sum = aaa.sum
</code></pre>
<hr>
<h3 id="ES6规范"><a href="#ES6规范" class="headerlink" title="ES6规范"></a>ES6规范</h3><p>可以给script加一个type&#x3D;”module”属性。表示这两个js是按照模块化的方式来使用的。这样一来, 就不会出现命名冲突的问题。因为每一个js都是一个单独的模块, 他们都有自己单独的作用域。</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src=&quot;a1.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;b1.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<blockquote>
<p>ES6的导出导入：方式一</p>
</blockquote>
<p>先定义再一起导出。a1.js导出</p>
<pre><code>var flag = true
function sum(num1,num2)&#123;
  return num1 + num2
&#125;

//导出对象, 将需要导出的变量或方法都可以放进对象中。
//export &#123;
  //flag:flag,
  //sum:sum
//&#125;

//ES6对象的增强写法。
export &#123;
  flag,
  sum
&#125;
</code></pre>
<p>a2.js导入。</p>
<pre><code>import &#123;flag, sum&#125; from &quot;a1.js&quot; //可按需导入, import &#123;flag&#125; from &quot;a1.js&quot;
if(flag)&#123;
  console.log(sum(20, 30))
&#125;
</code></pre>
<blockquote>
<p>ES6的导出导入：方式二</p>
</blockquote>
<p>在定义变量&#x2F;函数&#x2F;类的时候就导出。a1.js导出</p>
<pre><code>export var flag = true

export function sum(num1,num2)&#123;
  return num1 + num2
&#125;

export class Person()&#123;
  eat()&#123;
    console.log(&quot;吃东西&quot;)
  &#125;
&#125;
</code></pre>
<p>a2.js导入。</p>
<pre><code>import &#123;flag, sum, Person&#125; from &quot;a1.js&quot;

if(flag)&#123;
  console.log(sum(20, 30))
&#125;

const pp = new Person()
pp.eat()
</code></pre>
<blockquote>
<p>ES6的导出导入：方式三</p>
</blockquote>
<p>前面的方式都是按既定的名称导出, 但有的时候, 我们并不希望给这个功能命名, 而是让导入者自己来命名。导出的js文件中, 有且<strong>只能有一个</strong><code>export default</code>。</p>
<p>a1.js导出变量。</p>
<pre><code>const address = &quot;北京市&quot;
export default address
</code></pre>
<p>a2.js导入变量。</p>
<pre><code>//导入时可以自行命名
import addr from &quot;a1.js&quot;
console.log(addr)
</code></pre>
<hr>
<p>a1.js导出函数。</p>
<pre><code>export default function(str)&#123;
  console.log(str)
&#125;
</code></pre>
<p>a2.js导入函数。</p>
<pre><code>//导入时可以自行命名
import myfunc from &quot;路径.js&quot;
console.log(myfunc)//打印出函数
</code></pre>
<hr>
<p>a1.js混合导出</p>
<pre><code>//各种导出方式
var name = &quot;张三&quot;

export var flag = true

export &#123;name&#125;

export default function(str)&#123;
  console.log(str)
&#125;
</code></pre>
<p>a2.js导入</p>
<pre><code>//全部导入
import * as aaa from &quot;路径.js&quot;
console.log(aaa.flag)
console.log(aaa.name)
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(36)webpack的介绍和安装</title>
    <url>/blog/vue2/36/</url>
    <content><![CDATA[<hr>
<h3 id="认识webpack"><a href="#认识webpack" class="headerlink" title="认识webpack"></a>认识webpack</h3><p>webpack是一个现代的JavaScript应用的, 静态模块打包工具。从理解上来说：其主要功能就是模块和打包。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-6.png" alt="vue2-6"></p>
<p>从官方的图片说明, 可以看出。把开发时使用的大量文件, 进行编译, 如浏览器不认识sass文件、不认识less文件。需要将其编译成浏览器认识的css文件。又例如我们再开发时使用的是ES6开发的js, 也需要转化成ES5, 才能让大部分浏览器认识。<br>就打包工具来说, 市场上还有很多其他的工具。如grunt、gulp、webpack、rollup。其实vue的源码就是用rollup进行构建的。<br>前面我们已经学习了模块化, 其规范有CommonJS、AMD、CMD, 也有ES6的Modules<br>但是目前我们能直接用的也只有ES6的规范, 因为只有ES6的规范有浏览器的底层支撑。让基于ES6规范的文件能在浏览器上运行起来。<br>但是在webpack里面就能用其他的规范, webpack已经做了底层的支撑, 一旦使用了其他的规范如CommonJS、AMD、CMD, webpack就能做一个后期的编译转换。将其转换成浏览器能识别的模块化方案。即便是ES6, 也需要进行转换, 因为目前并不是所有浏览器都支持ES6。<br>不仅是js文件, 包括css、图片、json文件等等, 在webpack中都被当作模块来进行处理。这就是webpack中模块化的概念。</p>
<hr>
<h3 id="webpack的安装"><a href="#webpack的安装" class="headerlink" title="webpack的安装"></a>webpack的安装</h3><p>webpack、node、npm的关系：webpack的运行(模块化打包), 是依赖于node环境的。node环境为了正常运行很多代码, 必须包含各种依赖的包。而node里面有一个工具, 叫做npm。这个npm就是包管理工具。</p>
<pre><code>#要安装webpack, 就要先安装node.js, 其版本须大于8.9, 后期使用脚手架有要求。
#安装完成node可以在控制台终端, 查看node版本
F:\learnwebpack&gt; node -v
v14.17.3

#然后通过node中的npm工具安装webpack。

#方式一：全局安装webpack(学习时, 这里先指定webpack版本为3.6.0, 因为这是vue cli2依赖的版本。
#我们需要对vue cli2有所了解)
F:\learnwebpack&gt; npm install webpack@3.6.0 -g
#这个-g就是全局安装。意味着, 在任意位置的终端都可以用, 包括IDE内的终端。
#可以在(默认包管理路径)C:\Users\用户\AppData\Roaming\npm\node_modules查看node已安装的包。

#方式二：局部安装webpack(后续才需要), 暂时没讲

#安装完成后, 即可在终端查看webpack版本(有时候在安装完成后, 需要关闭终端重新打开)。
F:\learnwebpack&gt; webpack --version
3.6.0
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(37)webpack的基本使用过程</title>
    <url>/blog/vue2/37/</url>
    <content><![CDATA[<hr>
<h3 id="webpack的基本使用过程"><a href="#webpack的基本使用过程" class="headerlink" title="webpack的基本使用过程"></a>webpack的基本使用过程</h3><p>使用webpack之前, 我们先新建一个项目。webpack-start。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-7.png" alt="vue2-7"></p>
<p>在以后的开发项目中, 包含两个文件夹。src是我们开发时的文件夹, 包含源码。而dist文件夹是, 存放打包生成的文件。我们发布项目到服务器的, 就是这个文件夹中的文件。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-8.png" alt="vue2-8"></p>
<p>在src文件夹下, 通常会新建一个main.js, 作为整个项目的入口文件, 当然也有用index.js作为入口文件的。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-9.png" alt="vue2-9"></p>
<p>当然我们还需要新建一个index.html, 在平常的开发中, 我们还需要去引用那个js文件。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-10.png" alt="vue2-10"></p>
<p>这个时候, 我们就可以开始在各自的js文件中进行模块化开发了。而模块化的规范, 可以是CommonJS、AMD、CMD、ES6都可以。</p>
<hr>
<h3 id="比如CommonJS规范。"><a href="#比如CommonJS规范。" class="headerlink" title="比如CommonJS规范。"></a>比如CommonJS规范。</h3><p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-11.png" alt="vue2-11"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-12.png" alt="vue2-12"></p>
<p>这个时候页面就不能直接引用main.js文件了, 因为页面并不认识CommonJS规范的代码。这个时候我们就可以用webpack对js文件进行打包, 编译成浏览器认识的代码。而页面只需要引用最终打包完成的js文件。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-13.png" alt="vue2-13"></p>
<h3 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a>webpack打包</h3><pre><code>#打开终端, 进入到项目文件夹
F:\learnwebpack&gt; cd webpack-start
F:\learnwebpack\webpack-start&gt; 

#再使用webpack打包
F:\learnwebpack\webpack-start&gt; webpack ./src/main.js ./dist/bundle.js
#这个bundle.js就是浏览器能识别的js文件了。
#并不需要关注其他的js文件, 因为webpack在打包时(main.js)
#会自动判断是否对其他js文件有依赖, 将其一起打包。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-14.png" alt="vue2-14"></p>
<p>当然在进行模块化开发时, 也可以使用ES6的规范。</p>
<pre><code>//developerA.js用ES6的规范, 导出了一个函数
export function sum(num1,num2)&#123;
  return num1 + num2
&#125;

//在其他js文件中导入(如main.js)
import &#123;sum&#125; from &quot;./src/developerA.js&quot; //在webpack中这个.js可以省略。
console.log(sum(10, 20))
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(38)webpack.config和package.json</title>
    <url>/blog/vue2/38/</url>
    <content><![CDATA[<hr>
<h3 id="webpack-config和package-json"><a href="#webpack-config和package-json" class="headerlink" title="webpack.config和package.json"></a>webpack.config和package.json</h3><p>在webpack的基本使用中, 我们在打包时需要指定打包入口文件, 以及保存路径等。并不方便(webpack .&#x2F;src&#x2F;main.js .&#x2F;dist&#x2F;bundle.js 指令太长了)。如果我们想简单的告诉webpack我们要打包了, 让webpack自动的去打包以及保存。那么也有办法。</p>
<p>webpack.config.js</p>
<pre><code>//在项目文件夹下创建一个webpack.config.js
//这是一个固定的名字, 让webpack能找到这个文件。

//那这个js文件要怎么告诉webpack哪些是入口哪些是出口呢。
//我们需要用CommonJS的规范导出一个对象, 并在其中声明入口和出口。
module.exports = &#123;
  entry:&quot;./src/main.js&quot;,
  output:&quot;&quot;
&#125;

//出口的设置与入口的设置不同。要求设置一个对象。
module.exports = &#123;
  entry:&quot;./src/main.js&quot;,
  output:&#123;
    path:&quot;&quot;,
    filename:&quot;&quot;
  &#125;
&#125;

//这个path需要获取绝对路径。
//就需要使用一个node中的一个包path。
const path = require(&quot;path&quot;)
module.exports = &#123;
  entry:&quot;./src/main.js&quot;,
  output:&#123;
    path:&quot;&quot;,
    filename:&quot;&quot;
  &#125;
&#125;
</code></pre>
<p><strong>但是！！！目前我们的项目中是没有包的。</strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-15.png" alt="vue2-15"></p>
<p>我们想要用path, 必须要有这个包。所以当前这个项目我们要装一些包。怎么装？</p>
<pre><code>#打开终端, 进入项目文件夹。
#执行npm init 初始化的意思。一旦当前项目准备使用node相关的东西, 就需要初始化一下。

F:\learnwebpack\webpack-start&gt; npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install ` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (webpack-start) #这里要求输入一个包的名字, 我们直接回车, 它会直接将项目文件夹的名字作为包名。
version: (1.0.0) #这里是我们当前项目的版本号, 直接回车。
description: #这里是描述, 也不写了, 直接回车。
entry point: (webpack.config.js) #这个入口, 就随便写一个(如：index.js), 这是随便写的。暂时用不上它。
test command: #直接回车, 暂时不写。
git repository: #直接回车, 暂时不写。
keywords: #直接回车, 暂时不写。
author: #直接回车, 暂时不写。
license: (ISC) #直接回车, 暂时不写。
About to write to F:\learnwebpack\webpack-start\package.json:

&#123;
  &quot;name&quot;: &quot;webpack-start&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: &#123;
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;    
  &#125;,
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
&#125;
</code></pre>
<p>​<br>    Is this OK? (yes)  #问你直接生成, 上面的配置文件好不？那么直接回车, 表示可以OK。</p>
<p><strong>这个时候, 在项目文件加下, 就会生成一个新的文件, package.json</strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-16.png" alt="vue2-16"></p>
<p>任何一个项目, 如果你想单独依赖一些node环境的话, 就需要一个package.json文件, 如果package.json里面依赖一些包, 但本地也没有的话, 可以执行npm install安装。</p>
<pre><code>#打开终端, 进入项目文件夹。
#使用npm install, 就会自动安装package.json中依赖的东西。

F:\learnwebpack\webpack-start&gt; npm install
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN webpack-start@1.0.0 No description
npm WARN webpack-start@1.0.0 No repository field.

up to date in 0.99s
found 0 vulnerabilities

#当然, 当前这个项目, 还没有什么依赖。所以安装也没什么效果。
#再回到webpack.config.js文件。设置output
</code></pre>
<p>path(包), 其实是一个模块。这个模块有一个函数, 叫<strong>resolve()</strong>,它可以对两个路径进行拼接。其中__dirname 就是一个全局变量, 这是node里面的, 注意：dirname前面是两个下划线！！保存的就是我们当前项目webpack.config.js文件所在的路径。</p>
<p>webpack.config.js</p>
<pre><code>const path = require(&quot;path&quot;)

module.exports = &#123;
  entry: &quot;./src/main.js&quot;,
  output: &#123;
    path: path.resolve(__dirname, &quot;dist&quot;),
    filename:&quot;bundle.js&quot;
  &#125;
&#125;
</code></pre>
<p>设置完成以后, 回到终端, cd到项目文件夹, 直接输入webpack运行。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; webpack
Hash: 83ad107e28d40589a0bd
Version: webpack 3.6.0
Time: 50ms
    Asset     Size  Chunks             Chunk Names
bundle.js  2.92 kB       0  [emitted]  main       
   [0] ./src/main.js 104 bytes &#123;0&#125; [built]        
   [1] ./src/developerA.js 271 bytes &#123;0&#125; [built]  
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-17.png" alt="vue2-17"></p>
<p>这样, 每次在编译打包的时候, 就不需要单独去指定入口文件, 输出文件等信息了, 直接在终端输入webpack运行即可, 很方便吧！！！<br><strong>但是！！在开发里面我们一般不会这么做。如果我们确实需要打包, 一般使用的是另一个命令：npm run build。为了避免npm命令与webpack命令混淆使用, 一般我们都是通过npm对我们的项目进行管理。包括依赖包的安装卸载、以及项目的打包编译。那要怎么让刚才的webpack命令和npm run build对应起来呢。</strong><br>虽然现在看起来webpack比npm run build简单, 但是后期使用其他功能的时候就很长了, 比如webpack-dev-server。或者在一些项目中, webpack.config.js文件不叫这个名字, 也许叫production.config.js, 那么在使用webpack时还需要指定文件名, 甚至存在多个配置文件, webpack production.config…..又变得很麻烦了。<br>我们可以使用npm run将其映射到某一个口令, 使其变得更易于理解和使用。关于映射, 我们需要打开package.json, 里面有个scripts脚本, 表示可以在面设置脚本名, 对应相应的口令, 运行脚本名时就会去执行对应的命令。</p>
<p>package.json</p>
<pre><code>&#123;
  &quot;name&quot;: &quot;webpack-start&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: &#123;
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
    &quot;build&quot;: &quot;webpack&quot;
  &#125;,
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
&#125;    
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-18.png" alt="vue2-18"></p>
<p>当我们在终端执行, npm run build的时候, 它就会去到package.json找映射, 其中build对应的是webpack, 从而执行webpack命令进行打包。<br><strong>注意, 此时！！通过映射运行npm run build的时候, 与直接运行webpack有些不一样。之前我们直接运行webpack时, 使用的是一个全局的webpack(前面我们全局安装的webpack)。而运行npm run build的时候, 它会优先在本地(当前项目中)找webpack。但当前我们的项目并没有安装webpack, 所以它用的还是全局的webpack。但是在实际项目中, 任何一个项目都有一个本地的webpack包, 因为项目中依赖的webpack包, 很有可能与全局的webpack版本是不一样的。我们全局安装的可能是更新的一个版本, 而一些项目中为了使用webpack功能, 可能使用的是一些低版本的webpack包。那么使用全局的webpack打包项目, 就很有可能出错了。所以！！, 我们的项目有必要安装一个本地的webpack包。</strong></p>
<pre><code>#这里涉及到两个知识点：开发时依赖(只有开发阶段使用)、运行时依赖(项目运行时仍然需要)
#在安装依赖包的时候略有不同。
#webpack只有开发时编译打包时有用, 在项目正式运行时是不需要的。
#项目中安装webpack只需要按照开发时依赖安装。
#打开终端, cd到项目文件夹, 输入下面的命令。

F:\learnwebpack\webpack-start&gt; npm install webpack@3.6.0 --save-dev
#这个 --save-dev 就是安装开发时依赖包。

#说明：为什么安装3.6.0的webpack, 因为Vue cli3中已经升级到webpack4
#但是它将配置文件隐藏起来了, 所以查看起来不是很方便
#在学习期间, 我们需要清晰的认识这些文件的作用, 所以这里安装webpack@3.6.0即可。  
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-19.png" alt="vue2-19"></p>
<p>再次重申：package.json在执行脚本时(npm run 脚本名), 会优先在本地找对应位置的命令, 如果找不到, 才会在全局找。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(39)css-loader</title>
    <url>/blog/vue2/39/</url>
    <content><![CDATA[<hr>
<h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><p>前面我们讲了js打包的配置, 但是项目除了js文件还有css文件, 我们也希望把css当作模块去使用, 最终可以打包编译。<br>不仅如此, 其他什么图片, scss, less文件, vue组件文件转换等, 我们都希望通过模块化打包。那么我们需要了解webpack中一个非常核心的概念：loader, 不同的文件处理需要不同的loader。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-20.png" alt="vue2-20"></p>
<p>但是, 目前这个css没有被依赖, 从main.js入口开始打包时, 不会将css文件被打包到bundle.js中去。这个时候需要在main.js中添加依赖</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-21.png" alt="vue2-21"></p>
<p>我们来<strong>尝试</strong>打包看看。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build

&gt; webpack-start@1.0.0 build F:\learnwebpack\webpack-start
&gt; webpack

Hash: 1b3fe1e89fd1e16d823f
Version: webpack 3.6.0
Time: 54ms
    Asset     Size  Chunks             Chunk Names
bundle.js  3.27 kB       0  [emitted]  main
   [0] ./src/main.js 171 bytes &#123;0&#125; [built]
   [1] ./src/js/developerA.js 271 bytes &#123;0&#125; [built]
   [2] ./src/css/base.css 227 bytes &#123;0&#125; [built] [failed] [1 error]

ERROR in ./src/css/base.css
You may need an appropriate loader to handle this file type.
| body&#123;
|   background-color: #FF0000;
| &#125;
 @ ./src/main.js 6:0-25
.........

#这个时候你会发现打包出错了
#提示You may need an appropriate loader to handle this file type.
#意思是你需要一个合适的loader去处理这个文件。
</code></pre>
<p>那怎么安装css的loader呢。我们可以打开<a href="https://www.webpackjs.com/">webpack 中文网站</a></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-22.png" alt="vue2-22"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-23.png" alt="vue2-23"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-24.png" alt="vue2-24"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-25.png" alt="vue2-25"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-26.png" alt="vue2-26"></p>
<p>然后就可以通过提示的方法进行安装了。npm install –save-dev css-loader(<strong>安装后因为版本过高出现错误, 本项目需要指定版本2.0.2</strong>)</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm install --save-dev css-loader@2.0.2
</code></pre>
<p><strong>安装完成后, 在进行配置</strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-27.png" alt="vue2-27"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-28.png" alt="vue2-28"></p>
<p><strong>再次尝试打包</strong></p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build

&gt; webpack-start@1.0.0 build F:\learnwebpack\webpack-start
&gt; webpack

Hash: 35a2416a9c5d736e349f
Version: webpack 3.6.0
Time: 370ms
    Asset     Size  Chunks             Chunk Names 
bundle.js  5.69 kB       0  [emitted]  main        
   [0] ./src/main.js 171 bytes &#123;0&#125; [built]
   [1] ./src/js/developerA.js 271 bytes &#123;0&#125; [built]
   [2] ./src/css/base.css 184 bytes &#123;0&#125; [built]    
    + 1 hidden module
    
#运行成功了。查看页面
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-29.png" alt="vue2-29"></p>
<p>webpack.config.js</p>
<pre><code>const path = require(&quot;path&quot;)

module.exports = &#123;
  entry:&quot;./src/main.js&quot;,
  output:&#123;
    path: path.resolve(__dirname, &quot;dist&quot;),
    filename:&quot;bundle.js&quot;
  &#125;,
  module: &#123;
    rules: [
      &#123;
        test: /\.css$/,
        // use: [ &#39;style-loader&#39;, &#39;css-loader&#39; ],
        use: [ &#39;css-loader&#39; ],
      &#125;
    ]
  &#125;
&#125;
//因为css-loader只负责对css文件进行加载
//但是并不负责解析, 也不负责将css放到html文件中去让它生效。
//这个时候, 我们就需要安装style-loader(为本项目正常编译, 需要指定版本)
</code></pre>
<p>.</p>
<pre><code>#打开终端, cd到本项目文件夹。
F:\learnwebpack\webpack-start&gt; npm install style-loader@0.23.1 --save-dev
</code></pre>
<p>webpack.config.js</p>
<pre><code>//安装完成后, 重新配置webpack.config.js文件, 修改module
module: &#123;
  rules: [
    &#123;
      test: /\.css$/,
      use: [ &#39;style-loader&#39;, &#39;css-loader&#39; ]
      //另外：使用多个loader时, 顺序是从右向左加载的。
      //注意顺序, 否则编译时会报错。
    &#125;
  ]
&#125;
</code></pre>
<p>再重新编译</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-30.png" alt="vue2-30"></p>
<p>这就是在webpack中想对css进行模块化打包, 要进行的配置。<br>另外：无论我们在进行webpack安装, 还是css-loader安装, 或是style-loader安装, 在package.json文件中都会自动添加以下信息, 这个是自动添加的, 不是手动添加的。这里面就是本项目所用到的包, 以及版本。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-31.png" alt="vue2-31"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(4)vue插值</title>
    <url>/blog/vue2/4/</url>
    <content><![CDATA[<hr>
<h3 id="vue插值"><a href="#vue插值" class="headerlink" title="vue插值"></a>vue插值</h3><p><code>mustache插值</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>拼接操作1：&#123;&#123;Msg1&#125;&#125;&#123;&#123;Msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>拼接操作2：&#123;&#123;Msg1 + &quot;&quot; + Msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>加法运算：&#123;&#123;Msg1 + Msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>减法运算：&#123;&#123;Msg1 - Msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg1</span>:<span class="number">50</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg2</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>mustache插值方式只用于dom元素的content内, 可以支持一些简单的表达式运算, 包括三元表达式。</p>
<p>以上两种方式可以合并两条数据, 虽然Msg1和Msg2都是数值类型, 但第一种没有运算符, 都作为字符串拼接处理。第二种虽然用到了运算符+号, 但中间还加了个””空的字符串, 被隐式转换成了字符串。</p>
<p><code>v-text插值</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;Msg3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const app = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    el:&quot;#app&quot;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    data:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      Msg3: &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>此种方式使用较少, 不够灵活。 v-text不会解析字符串中包含的html标签。</p>
<p><code>v-html插值</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;Msg3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const app = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    el:&quot;#app&quot;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    data:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      Msg3: &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>v-html会解析字符串中包含的html标签。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(40)less-loader</title>
    <url>/blog/vue2/40/</url>
    <content><![CDATA[<hr>
<h3 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h3><p>首先创建一个less文件。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-32.png" alt="vue2-32"></p>
<p>依赖less文件。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-33.png" alt="vue2-33"></p>
<p>在webpack.config.js中, 可以看到, 我们还没有添加less文件的loader。</p>
<pre><code>const path = require(&quot;path&quot;)

module.exports = &#123;
  entry:&quot;./src/main.js&quot;,
  output:&#123;
    path: path.resolve(__dirname, &quot;dist&quot;),
    filename:&quot;bundle.js&quot;
  &#125;,
  module: &#123;
    rules: [
      &#123;
        test: /\.css$/,
        use: [ &#39;style-loader&#39;, &#39;css-loader&#39; ]
      &#125;
    ]
  &#125;
&#125;
</code></pre>
<p>在上一节中(webpack中css配置), 我们已经知道了怎么在webpack网站上找到我们需要的loader。</p>
<pre><code>npm install --save-dev less-loader less未指定版本
</code></pre>
<p>发现它除了安装less-loader外, 还安装了一个less包。要知道webpack没那么智能, 它在编译less文件时, 还需要要个less包, 去告诉它怎么解析。教程在教学的时候less-loader的版本是4.1.0, less的版本是3.9.0, 为了项目运行稳定, 安装时还是指定一下安装版本。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm install --save-dev less-loader@4.1.0 less@3.9.0
</code></pre>
<p>安装完成以后, 再在webpack.config.js中完成配置。</p>
<pre><code>const path = require(&quot;path&quot;)

module.exports = &#123;
  entry:&quot;./src/main.js&quot;,
  output:&#123;
    path: path.resolve(__dirname, &quot;dist&quot;),
    filename:&quot;bundle.js&quot;
  &#125;,
  module: &#123;
    rules: [
      &#123;
        test: /\.css$/,
        use: [ &#39;style-loader&#39;, &#39;css-loader&#39; ]
      &#125;,
      &#123;
        test: /\.less$/,
        use: [&#123;
          loader: &quot;style-loader&quot; // creates style nodes from JS strings
        &#125;, &#123;
          loader: &quot;css-loader&quot; // translates CSS into CommonJS
        &#125;, &#123;
          loader: &quot;less-loader&quot; // compiles Less to CSS
        &#125;]
      &#125;
    ]
  &#125;
&#125;
</code></pre>
<p>这个时候来编译一下看看。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p>编译成功了, 但是页面里中文乱码了。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-34.png" alt="vue2-34"></p>
<p>发现在编译后的文件bundle.js文件中就已经乱码了。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-35.png" alt="vue2-35"></p>
<pre><code>#尝试搜索问题解决办法。
#听说webpack-encoding-plugin插件可以解决问题。
F:\learnwebpack\webpack-start&gt; npm install webpack-encoding-plugin --save
#结果编译时直接报错了。卸载之。npm uninstall webpack-encoding-plugin
</code></pre>
<p>继续..尝试指定较老的版本。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm install webpack-encoding-plugin@0.2.1 --save
</code></pre>
<p>较老的版本完成安装后, 下面完成配置。</p>
<pre><code>const EncodingPlugin = require(&#39;webpack-encoding-plugin&#39;)

module.exports = &#123;
  entry: &quot;./src/main.js&quot;,
  output: &#123;
    path: path.resolve(__dirname, &quot;dist&quot;),
    filename: &quot;bundle.js&quot;
  &#125;,
  module: &#123;...&#125;,
  plugins: [
    new EncodingPlugin(&#123;
      encoding: &#39;UTF-8&#39;
    &#125;)
  ]
&#125;
</code></pre>
<p>编译</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p>编译终于通过, 但是还是乱码。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-36.png" alt="vue2-36"></p>
<pre><code>//尝试修改编码设置
 plugins: [
    new EncodingPlugin(&#123;
      encoding: &#39;gbk&#39;
    &#125;)
  ]
  
//再次重新编译, 不过只是从一种乱码变成另一种乱码。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-37.png" alt="vue2-37"></p>
<pre><code>//额, 好吧。
//卸载包npm uninstall webpack-encoding-plugin
//删除配置, 找其他的问题。
//在回到bundle.js中, 咦, 有个js文件, 打包后注释是正常的。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-38.png" alt="vue2-38"></p>
<p>难道是文件本身编码的问题？印象中这两个js文件都是用同一种方式创建的呀, 不管了先试试。</p>
<pre><code>//编译后乱码的是main.js
//编译后正常的是developerA.js

//复制一个developerA.js到main.js的同级目录。
//复制main.js的内容到developerA.js副本。
//删除原main.js, 将developerA.js副本 重命名为main.js。
</code></pre>
<p>编译</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p>然后….就没有然后了。<br>tips:因为红色实在刺眼, 改了下样式。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-39.png" alt="vue2-39"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(41)url-loader</title>
    <url>/blog/vue2/41/</url>
    <content><![CDATA[<hr>
<h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p>在项目开发过程中, 除了js、css什么sass、less等等, 我们还会用到图片资源。先在项目中创建一个图片文件夹img, 找两张大小不一的图片(不同文件大小的图片webpack可以做一些不同的处理)。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-40.png" alt="vue2-40"></p>
<p>然后在样式中使用图片。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-41.png" alt="vue2-41"></p>
<p><strong>试想一下：webpack打包的逻辑, 是从入口文件main.js开始, 在js中发现它依赖了哪些模块, 就会将其一起打包。当打包到base.css的时候, 发现里面还依赖了一张图片。这个时候, wbpack也会将这张图片当成模块一起打包。</strong></p>
<pre><code>#但是, 当前项目还没有处理图片模块的包
#先来试试, 看看打包会不还报错, 报什么样的错。
F:\learnwebpack\webpack-start&gt;npm run build

ERROR in ./src/img/2.jpg
Module parse failed: ....\webpack-start\src\img\2.jpg ......
You may need an appropriate loader to handle this file type.
#提示我们需要一个合适的loader去处理图片资源。
#又需要去webpack网站, 找相关的loader了, 不过这个load与前面的略有不同。
#是一个叫url的loader
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-42.png" alt="vue2-42"></p>
<pre><code>#根据提示安装url-loader
#为防止编译报错, 这里需要指定一下版本。
#教程中的版本是1.1.2
F:\learnwebpack\webpack-start&gt; npm install --save-dev url-loader@1.1.2

#安装完成以后在webpack.config.js进行配置
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-43.png" alt="vue2-43"></p>
<pre><code>//在配置中的test表示, 
//可以匹配的文件有png、jpg还有gif三种格式。
//我们再加一种jpeg格式
//这种格式的图片在开发中也很常见, 它和jpg是一样的, 只是后缀不同。

&#123;
  test: /\.(png|jpg|gif|jpeg)$/,
  use: [
    &#123;
      loader: &#39;url-loader&#39;,
      options: &#123;
        limit: 8192
      &#125;
    &#125;
  ]
&#125;

//注意！！！在它的options中有个limit参数, 默认是8192。
//意思是 小于 8192/1024=8kb 的图片, 会特殊处理。
//还记得我们的2.jpg吗。只有6kb多一点, 小于限值。
//怎么特殊处理？我们来编译一下项目。

F:\learnwebpack\webpack-start&gt;npm run build
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-44.png" alt="vue2-44"></p>
<pre><code>//因为安装配置了url-loader
//webpack编译通过了。图片也显示了。
//但是样式中可以发现, body样式的背景图片处。
//不是一个地址, 是一串base64编码字符串。而在dist打包文件夹中也找不到该图片。
//这就是url-loader配置中, limit参数的特殊处理结果了。

//！！！！！小于限值的图片会被编译成base64编码。

//那么大于限值的时候呢。我们来试试。
//把css中body的背景图改成1.jig
//可以看出1.jpg的文件大小远大于8kb的限值。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-45.png" alt="vue2-45"></p>
<pre><code>F:\learnwebpack\webpack-start&gt;npm run build
//你会发现这个时候报错了。

......

ERROR in ./src/img/1.jpg
Module build failed: Error: Cannot find module &#39;file-loader&#39;

......

//他说找不到file-loader模块。
//也就是说, 在处理大于限值的图片时还需要另一个loader去处理。
//注意报错信息, 跟前面的不一样。
//不是项目依赖包时提示的：你需要一个什么什么loader来处理这种文件
//而是直接提示：找不到file-loader模块。
//这里我们直接安装, 无需配置。

//教程项目中使用的file-loader是3.0.1
//为防止编译出错, 安装时指定一下版本。
</code></pre>
<p>安装file-loader</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm install --save-dev file-loader@3.0.1

#安装完成后, 我们再重新编译一下
F:\learnwebpack\webpack-start&gt;npm run build
#编译通过没有报错。
#我们来看一下页面, 发现页面没有图片。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-46.png" alt="vue2-46"></p>
<pre><code>//但是！打包文件夹下多了一个hash随机名的图片。
//图片也正是我们给body加的那张背景图。
//说明大于限值的图片会被保留并打包到文件夹中去。

//接下来我们看看为什么不显示图片。

//我们一直是在用根目录下的index.html进行测试。并没有将其打包到dist文件夹下。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-47.png" alt="vue2-47"></p>
<p><strong>可以看出, 这里不显示图片, 是路径的问题。可以在webpack.config.js中进行配置</strong></p>
<pre><code>//在webpack配置文件中
        
output: &#123;
  path: path.resolve(__dirname, &quot;dist&quot;),
  filename: &quot;bundle.js&quot;,
  publicPath:&quot;dist/&quot;
&#125;

//在output项中,增加一个publicPath:&quot;dist/&quot;
//此后在webpack打包时, 只要是涉及到url的, 都会自动在前面拼接一个路径。
</code></pre>
<p>.</p>
<pre><code>#编译项目, 运行就正常了。
F:\learnwebpack\webpack-start&gt;npm run build
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-48.png" alt="vue2-48"></p>
<p><strong>当前, 这只是为了项目运行正常的一个测试, 但是最终, 我们还是要将html文件一起打包到dist文件夹的。前面就讲过dist文件夹下的文件, 是经webpack打包生成的文件, 并可以直接上传至服务器运行的, 这当然包括html文件, 到时候就可以删掉publicPath:”dist&#x2F;“配置了。这个后面再说, 先来看另一个需求。</strong></p>
<pre><code>//打包重命名的图片名字太复杂(hash-32)
//打包后图片不要乱扔, 最好放到一个img文件夹里。

//最终需求, 希望打包后的图片, 能以以下方式进行保存。
//--&gt;  img/原来的图片名. + hash-8.原拓展名 (原来的hash-32太长, 只想要8位)
//需要到webpack的配置文件去设置。

&#123;
  test: /\.(png|jpg|gif|jpeg)$/,
  use: [
    &#123;
      loader: &#39;url-loader&#39;,
      options: &#123;
        limit: 8192,
        name: &quot;img/[name].[hash:8].[ext]&quot;
      &#125;
    &#125;
  ]
&#125;

//在url-loader的options中增加了name: &quot;img/[name].[hash:8].[ext]&quot;

//其中img/表示dist下的img文件夹(没有就自动创建)
//而[name]表示一个变量, 会取出图片文件原来的名字。
//另外[hash:8] 也是一个变量, 表示只取8位hash值。
//最后[ext]也是一个变量, 表示原来图片的拓展名。
</code></pre>
<p>.</p>
<pre><code>#编译项目, 查看效果。
F:\learnwebpack\webpack-start&gt;npm run build
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-49.png" alt="vue2-49"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(42)ES6转ES5(babel)</title>
    <url>/blog/vue2/42/</url>
    <content><![CDATA[<hr>
<h3 id="ES6转ES5-babel"><a href="#ES6转ES5-babel" class="headerlink" title="ES6转ES5(babel)"></a>ES6转ES5(babel)</h3><p>前面已经学了webpack很多loader, 不同的文件需要不同的loader, 下面继续学习ES6语法的处理, 前面打包的js文件其实并没有将ES6变成ES5, 但是项目运行是正常的, 这是因为, 我们用的浏览器是更新的浏览器, 它已经做了对ES6的底层支撑, 但是也有不支持ES6的浏览器存在, 所以我们需要将项目中ES6转成ES5。</p>
<p>在webpack官网安装指令是</p>
<pre><code>npm install --save-dev babael-loader babel-core babel-preset-env webpack
</code></pre>
<p>我们已经在使用webpack了, 就不用安装webpack了。</p>
<p>教程：因为我们这里只简单的做ES6到ES5的转换, 所以按以下方式安装。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm install --save-dev babael-loader@7 babel-core babel-preset-es2015

npm WARN deprecated babel-preset-es2015@6.24.1: ????  Thanks for using Babel: we recommend using babel-preset-env now: p
lease read https://babeljs.io/env to update!
npm ERR! code E404
npm ERR! 404 Not Found - GET https://registry.npmjs.com/babael-loader - Not found
npm ERR! 404
npm ERR! 404  &#39;babael-loader@7&#39; is not in the npm registry.
npm ERR! 404 You should bug the author to publish it (or use the name yourself!) 
npm ERR! 404
npm ERR! 404 Note that you can also install from a
npm ERR! 404 tarball, folder, http url, or git url.
</code></pre>
<p>这个时候报错了, 一方面说babel-preset-es2015已经弃用, 建议使用babel-preset-env<br>另一方面, 就是404错误了, 说找不到指定的版本babael-loader@7<br>尝试修改重新安装。</p>
<p><strong>尝试单独安装</strong></p>
<pre><code>#继续尝试指定版本, 但不一起安装了, 分开安装
F:\learnwebpack\webpack-start&gt; npm install babel-loader@7.1.5 --save-dev
#成功

F:\learnwebpack\webpack-start&gt; npm install babel-core@6.26.3 --save-dev
#成功

F:\learnwebpack\webpack-start&gt; npm install babel-preset-es2015@6.24.1 --save-dev
#成功, 虽然仍然提示这个已经弃用, 但还是安装成功。
</code></pre>
<p>重新配置, webpack.config.js文件。</p>
<pre><code>&#123;
  test: /\.js$/,
  exclude: /(node_modules|bower_components)/,
  use: &#123;
    loader: &#39;babel-loader&#39;,
    options: &#123;
      //presets: [&#39;@babel/preset-env&#39;],这里我们没有用这个。
      //直接配置成es2015就可以了
      presets: [&#39;es2015&#39;]
    &#125;
  &#125;
&#125;
</code></pre>
<p>尝试编译一下项目</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
#编译成功了。
#我们可以看一下在没有转ES5之前的bundle.js
</code></pre>
<p><strong><code>转换前</code></strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-50.png" alt="vue2-50"></p>
<p><strong><code>转换后</code></strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-51.png" alt="vue2-51"></p>
<p>可见转换以后的js中, 已经没有ES6的const之类的关键字了。让暂时还不支持ES6的浏览器也可以兼容。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(43)webpack配置vue</title>
    <url>/blog/vue2/43/</url>
    <content><![CDATA[<hr>
<h3 id="webpack配置vue"><a href="#webpack配置vue" class="headerlink" title="webpack配置vue"></a>webpack配置vue</h3><p>在后续的项目中, 我们会使用vuejs进行开发, 而且会以特殊的文件来组织vue的组件(*.vue),所以需要学习如何在webpack环境中集成vuejs。</p>
<pre><code>#在项目中希望使用vuejs, 那就必须对其有所依赖
#所以需要先进行安装。因为vuejs在项目运行时也需要。
#所以安装时应该选择运行时依赖的方式进行安装。 --save
F:\learnwebpack\webpack-start&gt; npm install vue --save
</code></pre>
<p>.</p>
<pre><code>//安装完成后, 想使用就要先依赖。在main.js中
import Vue from &quot;vue&quot;
const app = new Vue(&#123;
  el: &quot;#app&quot;,
  data: &#123;
    msg: &quot;hello webpack&quot;
  &#125;
&#125;)
//这里vue实例挂载了一个id为app的元素
//还需要在html中增加一个id为app的元素
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-52.png" alt="vue2-52"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-53.png" alt="vue2-53"></p>
<pre><code>#试着打包运行一下
F:\learnwebpack\webpack-start&gt; npm run build
#打包没有报错, 看一下页面
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-54.png" alt="vue2-54"></p>
<pre><code>#页面报错了
[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available.
Either pre-compile the templates into render functions, or use the compiler-included build.
(found in )
</code></pre>
<p>Vue在发布的时候, 会构建2类版本。</p>
<pre><code>#1、runtime-only ---&gt; 使用这个版本的话, 代码中不可以有任何的template
#页面报错的原因就是, 它将vue实例挂载的#app, 
#也就是&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;做为了template。
#runtime-only版本下不包含对template编译的代码。

#2、runtime-compiler ---&gt; 使用这个版本, 代码中可以有tempalte
#因为有compiler, 所以可以编译template

#通过报错信息可以看出, 我们使用的是runtime-only
#这里要指定为runtime-compiler , 在webpack.config.js中去配置
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-55.png" alt="vue2-55"></p>
<pre><code>resolve: &#123;
  alias: &#123;
    &quot;vue$&quot;: &quot;vue/dist/vue.esm.js&quot;
  &#125;
&#125;

//什么意思呢？
//意思是, 在代码里面, 当import Vue from &quot;vue&quot;的时候。
//它会先去看vue有没有指向某一个具体的文件。
//在上面的配置中, 指向了vue/dist/vue.esm.js
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-56.png" alt="vue2-56"></p>
<pre><code>#配置完成, 编译项目
F:\learnwebpack\webpack-start&gt; npm run build
#编译成功, 页面运行正常
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-57.png" alt="vue2-57"></p>
<pre><code>//回到main.js中
import Vue from &quot;vue&quot;
const app = new Vue(&#123;
  el: &quot;#app&quot;,
  data: &#123;
    msg: &quot;hello webpack&quot;
  &#125;
&#125;)

//实际项目中, 那个cosnt app 是不要的。
//在前面的项目中加, 只是为了在控制台方便测试。
import Vue from &quot;vue&quot;
new Vue(&#123;
  el: &quot;#app&quot;,
  data: &#123;
    msg: &quot;hello webpack&quot;
  &#125;
&#125;)
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(44)template和el的关系</title>
    <url>/blog/vue2/44/</url>
    <content><![CDATA[<hr>
<h3 id="template和el的关系"><a href="#template和el的关系" class="headerlink" title="template和el的关系"></a>template和el的关系</h3><p>vue开发用得比较多的是单页面富应用SPA(single page web application), 意思是项目只有一个html页面(当然进行多页面开发也是可以的)。</p>
<pre><code>//单页面富应用：那其他页面怎么做？
//所有页面都是组件形式, 比如：home.vue   me.vue  shop.vue   等等。
//页面之间的跳转, 都是通过vue-router(前端路由)进行跳转。

//整个项目就只有一个html页面, 这个页面里面需要写的东西很少。
//基本上是不改它的。
</code></pre>
<p>index.html</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
      &lt;!-- &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;这个也不需要放到页面中--&gt;
    &lt;/div&gt;
    &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;

&lt;!-- 这个页面就不需要改了 --&gt;
&lt;!-- 只需要一个Vue实例挂载的div --&gt;
</code></pre>
<p>main.js</p>
<pre><code>const &#123;sum&#125; = require(&quot;./js/developerA.js&quot;)
console.log(sum(10, 20))

require(&quot;./css/base.css&quot;)

require(&quot;./css/spe.less&quot;)
document.write(&quot;less样式测试&quot;)

import Vue from &quot;vue&quot;
new Vue(&#123;
  el: &quot;#app&quot;,
  data: &#123;
    msg: &quot;hello webpack&quot;
  &#125;
&#125;)
</code></pre>
<p><strong>那要如何在页面里面放入东西呢。</strong></p>
<p>main.js</p>
<pre><code>const &#123;sum&#125; = require(&quot;./js/developerA.js&quot;)
console.log(sum(10, 20))

require(&quot;./css/base.css&quot;)

require(&quot;./css/spe.less&quot;)
document.write(&quot;less样式测试&quot;)

import Vue from &quot;vue&quot;
new Vue(&#123;
  el: &quot;#app&quot;,
  template: `
    &lt;div&gt;
      &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;
    &lt;/div&gt;
  `,
  data: &#123;
    msg: &quot;hello webpack&quot;
  &#125;
&#125;)

//是通过在main.js中的vue实例与其产生联系
//即定义一个tempalte。
//vue实例已经挂载了id为app的元素, 
//那tempalte如何应用呢。
//vue内部会将tempalte中的元素把挂载的div全部替换。
</code></pre>
<p>index.html</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
  
    &lt;!-- &lt;div id=&quot;app&quot;&gt;被全部替换成template中的内容&lt;/div&gt; --&gt;
    &lt;div&gt;
      &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;

&lt;!--就是说, el和template同时出现。--&gt;
&lt;!--template会替换el挂载的元素, 编译运行测试。--&gt;
</code></pre>
<p>.</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
#编译正常
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-58.png" alt="vue2-58"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(45)vue文件的使用</title>
    <url>/blog/vue2/45/</url>
    <content><![CDATA[<hr>
<h3 id="vue文件的使用"><a href="#vue文件的使用" class="headerlink" title="vue文件的使用"></a>vue文件的使用</h3><p><strong>上一节中, 我们已经把html中vue实例挂载的div, 用tempalte替换掉了</strong>。</p>
<pre><code>import Vue from &quot;vue&quot;
new Vue(&#123;
  el: &quot;#app&quot;,
  template: `
    &lt;div&gt;
      &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;
    &lt;/div&gt;
  `,
  data: &#123;
    msg: &quot;hello webpack&quot;
  &#125;
&#125;)
</code></pre>
<p>但是, 在vue实例中的tempalte直接编辑页面内容, 仍然是不友好的。</p>
<p>&#x2F;&#x2F;用单独的一个组件, 替换template。<br>&#x2F;&#x2F;既然是一个组件, data也可以不使用vue实例的data了。<br>&#x2F;&#x2F;在vue实例中注册子组件App<br>&#x2F;&#x2F;然后直接在vue实例的template中直接使用App子组件就可以了。</p>
<pre><code>import Vue from &quot;vue&quot;

const App = &#123;
  template: `
    &lt;div&gt;
      &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;
    &lt;/div&gt;
  `,
  data()&#123;
    return &#123;
      msg: &quot;hello webpack&quot;
    &#125;
  &#125;
&#125;

new Vue(&#123;
  el: &quot;#app&quot;,
  template: `&lt;App /&gt;`,
  components: &#123;
    App
  &#125;
&#125;)
</code></pre>
<p>编译一下, 成功。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p><strong>当然, 页面代码仍然在main.js中。我们将组件App内的东西单独用一个js文件来放</strong>。</p>
<p>main.js</p>
<pre><code>import Vue from &quot;vue&quot;

//导入app.js, 因为appjs是用export default导出的。
//所以这里导入可以自定义导入名：App
import App from &quot;./vue/app.js&quot;

new Vue(&#123;
  el: &quot;#app&quot;,
  template: `&lt;App /&gt;`,
  components: &#123;
    App
  &#125;
&#125;)
</code></pre>
<p>app.js</p>
<pre><code>export default  &#123;
  template: `
    &lt;div&gt;
      &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;
    &lt;/div&gt;
  `,
  data()&#123;
    return &#123;
      msg: &quot;hello webpack&quot;
    &#125;
  &#125;
&#125;
</code></pre>
<p>ain.js内的代码立即就变得, 清晰简洁了。</p>
<pre><code>#编译一下, 成功。
F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p>不过以后html页面代码, 难道要在js文件中编辑么, 这肯定是不行的</p>
<blockquote>
<p>在vue文件夹下, 创建一个.vue的文件！！！</p>
</blockquote>
<p><code>创建.vue文件</code>。</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default &#123;
    name: &quot;App&quot;,
    data()&#123;
      return &#123;
        msg: &quot;hello webpack&quot;
      &#125;
    &#125;
  &#125;
&lt;/script&gt;

&lt;style&gt;
  /*这里还可以写样式*/
&lt;/style&gt;

//可以看出.vue文件的结构有三块。
//一个tempalte、一个script、还有一个style。
//那之前那个app.js就可以不用了。
</code></pre>
<p>修改main.js中的内容。</p>
<pre><code>import Vue from &quot;vue&quot;

//导入app.js, 因为appjs是用export default导出的。
//所以这里导入可以自定义导入名：App
//import App from &quot;./vue/app.js&quot;
import App from &quot;./vue/App.vue&quot;

new Vue(&#123;
  el: &quot;#app&quot;,
  template: ``,
  components: &#123;
    App
  &#125;
&#125;)
</code></pre>
<p>编译一下, 看看呢。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build

#这个时候报错了。
You may need an appropriate loader to handle this file type.

#我们知道webpack打包文件, 不同的文件需要不同的包来处理。
#前面连css文件我们都需要一个css-loader来处理, 更何况
#我们这里多了一个.vue类型的文件。所以我们需要新的loader来处理它。

F:\learnwebpack\webpack-start&gt; npm install --save-dev vue-loader vue-template-compiler
#安装成功, 然后在webpack.config.js中进行配置。
</code></pre>
<p>webpack.config.js</p>
<pre><code>module.exports = &#123;
  entry: &quot;./src/main.js&quot;,
  output: &#123;
    path: path.resolve(__dirname, &quot;dist&quot;),
    filename: &quot;bundle.js&quot;,
    publicPath:&quot;dist/&quot;
  &#125;,
  module: &#123;
    rules: [
      ......
      &#123;
        //为vue-loader配置
        test: /\.vue$/,
        use:[&quot;vue-loader&quot;]
      &#125;
    ]
  &#125;,
  plugins: [
      //为vue-loader配置, 注意, 如果vue-loader的版本低于14, 可不用配置此项。
      new VueLoaderPlugin()
  ]
  ......
&#125;
</code></pre>
<p>再重新编译, 成功。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-59.png" alt="vue2-59"></p>
<p><strong>终于一步一步的把组件抽离成了一个.vue的单文件。所以在以后的开发中, 页面是一个组件, 页面中某一个模块也是一个组件。都是由最根上的组件App.vue发散成一颗组件树。</strong></p>
<hr>
<h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>在vue文件夹下新建一个Djcpn.vue组件。</p>
<pre><code>&lt;template&gt;
  &lt;div class=&quot;page&quot;&gt;
    &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default &#123;
    name: &quot;Djcpn&quot;,
    data()&#123;
      return &#123;
        msg: &quot;我是Djcpn组件中的数据&quot;
      &#125;
    &#125;
  &#125;
&lt;/script&gt;

&lt;style&gt;
  .page&#123;background-color: #D5FFD8;&#125;
&lt;/style&gt;
</code></pre>
<p>在根组件App.vue中注册, 使用。</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;
    &lt;Djcpn&gt;&lt;/Djcpn&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  import Djcpn from &quot;./Djcpn.vue&quot;
  //import 的文件后缀名可以省略, 具体看下方拓展。
  export default &#123;
    name: &quot;App&quot;,
    data()&#123;
      return &#123;
        msg: &quot;hello webpack&quot;
      &#125;
    &#125;,
    components: &#123;
      Djcpn
    &#125;
  &#125;
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre>
<p>编译测试</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-60.png" alt="vue2-60"></p>
<p><strong>拓展：导入文件, 省略后缀名的问题</strong>。</p>
<pre><code>//在一些ide编辑器, 或者脚手架搭建的项目中
//导入文件时, 可以省略掉文件的后缀名。
//这里也可以通过配置webpack.config.js文件来实现。

......
module.exports = &#123;
  entry: &quot;./src/main.js&quot;,
  output: &#123;
    path: path.resolve(__dirname, &quot;dist&quot;),
    filename: &quot;bundle.js&quot;,
    publicPath:&quot;dist/&quot;
  &#125;,
  ......
  plugins: [
      new VueLoaderPlugin()
  ],
  resolve: &#123;
    extensions: [&quot;.js&quot;,&quot;.css&quot;,&quot;.vue&quot;]
    //在这里设置需要忽略后缀名的文件, 即可。
    alias: &#123;
      &quot;vue$&quot;: &quot;vue/dist/vue.esm.js&quot;
    &#125;
  &#125;
&#125;

//如App.vue中 import Djcpn from &quot;./Djcpn.vue&quot;
//就可以写成   import Djcpn from &quot;./Djcpn&quot;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(46)webpack的plugin(插件)</title>
    <url>/blog/vue2/46/</url>
    <content><![CDATA[<hr>
<h3 id="webpack的plugin-插件"><a href="#webpack的plugin-插件" class="headerlink" title="webpack的plugin(插件)"></a>webpack的plugin(插件)</h3><p><strong>plugin插件, 通常是用于对某个现有框架进行拓展。而webpack中的插件, 就是可以对现有功能进行拓展, 比如打包优化、文件压缩等等</strong>。</p>
<p><strong>loader和plugin的区别</strong><br>loader主要用于转换某些类型的模块, 它是一个转换器&#x2F;加载器。<br>plugin是插件, 它是对webpack本身的拓展, 是一个拓展器。</p>
<p><strong>plugin的使用</strong><br>通过npm安装需要使用的plugin(某些webpack已经内置的插件不需要安装)。<br><strong>在webpack.config.js中的plugins中配置插件</strong>。</p>
<hr>
<h3 id="添加版权的插件：BannerPlugin"><a href="#添加版权的插件：BannerPlugin" class="headerlink" title="添加版权的插件：BannerPlugin"></a>添加版权的插件：BannerPlugin</h3><pre><code>//添加版权的plugin(BannerPlugin)属于webpack自带的插件。
//当我们需要给打包的js添加版权信息时使用。

const path = require(&quot;path&quot;)
const webpack = require(&quot;webpack&quot;)
module.export = &#123;
  ...
  plugins:[
    new webpack.BannerPlugin(&quot;最终版权规楼主所有&quot;)
  ]
&#125;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-61.png" alt="vue2-61"></p>
<hr>
<h3 id="编译html插件-重要-：HtmlWebpackPlugin"><a href="#编译html插件-重要-：HtmlWebpackPlugin" class="headerlink" title="编译html插件(重要)：HtmlWebpackPlugin"></a>编译html插件(重要)：HtmlWebpackPlugin</h3><p>前面我们说过dist文件夹是打包之后上传使用的文件, 但是一直缺少一个html文件, 测试时一直是使用的项目根目录下的index.html, 接下来看看如何将html也打包带dist文件夹。</p>
<pre><code>#HtmlWebpackPlugin的作用
#1、自动生成一个html文件(可以指定模板来生成)。
#2、将打包的js文件, 自动通过script标签插入到body中。

#HtmlWebpackPlugin的安装, 注意这里指定了版本, 安装时根据需要指定或不指定
F:\learnwebpack\webpack-start&gt; npm install html-webpack-plugin@3.2.0 --save-dev
</code></pre>
<p>HtmlWebpackPlugin的配置<br>安装完成后就需要在webpack.config.js文件中进行配置。</p>
<pre><code>const path = require(&quot;path&quot;)
const webpack = require(&quot;webpack&quot;)
//先导入
const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;)
module.export = &#123;
  ...
  plugins:[
    new webpack.BannerPlugin(&quot;最终版权规楼主所有&quot;),
    //在plugins里添加
    new HtmlWebpackPlugin()
  ]
&#125;
</code></pre>
<p>编译运行</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-62.png" alt="vue2-62"></p>
<pre><code>//成功编译运行
//现在dist文件夹下多了一个index.html
//打开html文件, 发现有2个问题。

//1、vue挂载的div没有了。
//2、html文件已经在dist文件夹中了, script的路径不再需要dist
</code></pre>
<p>第2个问题好解决, 回到webpack配置文件中, 将之前配置的路径注释掉就可以了。</p>
<pre><code>const path = require(&quot;path&quot;)
const &#123; VueLoaderPlugin &#125; = require(&#39;vue-loader&#39;)
const webpack = require(&quot;webpack&quot;)
const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;)

module.exports = &#123;
  entry: &quot;./src/main.js&quot;,
  output: &#123;
    path: path.resolve(__dirname, &quot;dist&quot;),
    filename: &quot;bundle.js&quot;,
    
    //在前面图片配置的测试中, 因为没有打包html文件
    //导致, 图片路径不对才配置的, 此时已经打包了html文件了。
    //那么这个配置就可以去掉了。
    //publicPath:&quot;dist/&quot; 把这里注释掉就可以了。
  &#125;,
  module: &#123;
    rules: [......]
  &#125;,
  plugins: [
      new VueLoaderPlugin(),
      new webpack.BannerPlugin(&quot;最终版权规楼主所有&quot;),
      new HtmlWebpackPlugin()
  ],
  resolve: &#123;
    alias: &#123;
      &quot;vue$&quot;: &quot;vue/dist/vue.esm.js&quot;
    &#125;
  &#125;
&#125;
</code></pre>
<p>第1个问题, 我们只需要给它一个模板, 让它按这个模板生成就可以了。<br>进入 根目录 下的index.html</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
  
    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;
    
    &lt;!-- 这个script可以不要了, 它会自动插入 --&gt;
    &lt;!-- &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt; --&gt;
  &lt;/body&gt;
&lt;/html&gt;

&lt;!--页面中只保留id=&quot;app&quot;的div --&gt;
&lt;!--将index.html作为一个模板页面 --&gt;
&lt;!--在webpack配置文件中, 刚刚配置的new HtmlWebpackPlugin()处, 传入模板。 --&gt;
</code></pre>
<p>设置好模板, 再回到webpack配置文件中。</p>
<pre><code>......
const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;)

module.exports = &#123;
  entry: &quot;./src/main.js&quot;,
  output: &#123;
    ......
    //publicPath:&quot;dist/&quot; 把这里注释掉就可以了。
  &#125;
  ......
  plugins: [
      ......
      new HtmlWebpackPlugin(&#123;
        //以根目录下的index.html作为模板
        template: &quot;index.html&quot;
      &#125;)
  ]
  ......
&#125;
</code></pre>
<p>再来编译运行</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-63.png" alt="vue2-63"></p>
<pre><code>//成功编译
//打开dist文件夹下的index.html文件
//发现已经有了id为app的div, 以及script的路径也正确加上了。
</code></pre>
<hr>
<h3 id="压缩js的插件：uglifyjs-webpack-plugin"><a href="#压缩js的插件：uglifyjs-webpack-plugin" class="headerlink" title="压缩js的插件：uglifyjs-webpack-plugin"></a>压缩js的插件：uglifyjs-webpack-plugin</h3><p>虽然我们已经成功实现了打包js文件, 但在很多项目中, 有压缩js, 以减小文件大小的需求。uglifyjs意思就是丑化js, 将复杂的命名简单化, 去掉多余的空格换行。</p>
<pre><code>#安装uglifyjs
F:\learnwebpack\webpack-start&gt; npm install uglifyjs-webpack-plugin@1.1.1 --save-dev
</code></pre>
<p>安装完成后, 在webpack配置文件中进行配置</p>
<pre><code>//导入uglifyjs
const uglifyjsWebpackPlugin = require(&quot;uglifyjs-webpack-plugin&quot;)

module.exports = &#123;
  ......
  plugins: [
      new VueLoaderPlugin(),
      new webpack.BannerPlugin(&quot;最终版权规楼主所有&quot;),
      new HtmlWebpackPlugin(&#123;
        template: &quot;index.html&quot;
      &#125;),
      //使用
      new uglifyjsWebpackPlugin()
  ]
  ......
&#125;
</code></pre>
<p>编译运行</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run build
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-64.png" alt="vue2-64"></p>
<pre><code>//bundle.js已经被成功丑化了。
//其中的注释都被删掉了, 包括之前的版权声明注释。
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(47)搭建本地服务器</title>
    <url>/blog/vue2/47/</url>
    <content><![CDATA[<hr>
<h3 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h3><p>在前面的学习测试中, 每当项目出现更改, 我们都需要使用npm run build对项目进行重新编译, 这种开发效率其实是非常低的。</p>
<p>这个时候可以搭建一个基于node的本地服务器(内部使用express框架)。可以实现让浏览器自动刷新显示, 修改的结果。不过它是一个单独的模块, 在webpack中使用要先安装。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm install --save-dev webpack-dev-server@2.9.1
</code></pre>
<p>设置版本是为了让插件与使用的webpack有一个对应。因为在vue的脚手架2中, 使用的webpack就是3.6.0, 本地devserver就是2.9.1。</p>
<pre><code>//devserver也是作为webpack配置中的一个选项, 可以设置以下属性。
//1、contentBase：为哪一个文件夹提供本地服务, 默认是跟文件夹, 这里要填写./dist
//2、port：端口号
//3、inline：页面实时刷新
//4、historyApiFallback：在单页面富应用中(SPA), 依赖HTML5的history模式。

//注意：本地服务在运行时, 将项目的改动实时在页面刷新显示
//并没有改动dist文件夹下的文件, 而是将编译的文件放到了内存中。
//而项目需要真正发布的时候, 我们只需要执行一次npm run build即可。

//安装完成后在webpack配置文件中进行配置。

......
module.exports = &#123;
  ......
  module: &#123;
    ......
  &#125;,
  plugins: [
    ......
  ],
  resolve: &#123;
    ......
  &#125;,
  //暂时就配置这2个。
  devServer: &#123;
    contentBase: &quot;./dist&quot;,
    inline: true
  &#125;
&#125;
</code></pre>
<p>那么运行就需要通过webpack-dev-server来运行。<br>但是会报错哦, 没通过npm run映射, 直接运行口令都是在全局运行。<br>但是全局我们并没有安装webpack-dev-server。<br>刚才的安装并没有加-g参数, 只在项目中进行了局部安装。<br>所以我们还需要在package.json中配置映射。</p>
<pre><code>&quot;scripts&quot;: &#123;
  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,
  &quot;build&quot;: &quot;webpack&quot;,
  //在这里配置, 就可以通过npm run dev来运行本地服务器了。
  &quot;dev&quot;: &quot;webpack-dev-server&quot;
&#125;
</code></pre>
<p>启动本地服务器</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm run dev
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-65.png" alt="vue2-65"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-g1.gif" alt="vue2-g1"></p>
<p><strong>上面我们已经实现了搭建本地服务器, 并在修改项目的时候, 页面自动更新</strong>。</p>
<pre><code>//但是, 启动本地服务器后
//只是生成了一个本地链接, 还需要手动去打开网页。
//在配置package.json时, 可以设置。

&quot;dev&quot;: &quot;webpack-dev-server --open&quot;

//即可在启动本地服务器时, 自动打开页面。
//停止本地服务Ctrl+c即可。
//终止批处理操作吗(Y/N)? y
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(48)webpack配置分离</title>
    <url>/blog/vue2/48/</url>
    <content><![CDATA[<hr>
<h3 id="webpack配置分离"><a href="#webpack配置分离" class="headerlink" title="webpack配置分离"></a>webpack配置分离</h3><p>前面我们已经学习了, webpack的loader、plugin以及搭建本地服务器。在插件中, 有一个js丑化的插件, 可以有效的减小js文件的体积, 但是在实际项目开发过程中, 我们在进行页面调试时, 经过丑化的js已经不适合阅读调试了。</p>
<p>webpack.config.js</p>
<pre><code>//所以现在有个需求。
//就是在开发阶段, 不使用丑化。发布时再使用丑化。
//那是否只能在开发阶段, 将丑化配置注释掉, 发布时再开启？

//如果涉及到更多在开发阶段用不上, 发布才能用的插件。
//包括上一节才学习的本地服务器搭建配置,  发布时并不需要。
//岂不是要注释掉更多, 显然这并不友好。

//所以需要根据 &quot;开发时依赖&quot; 和 &quot;发布时依赖&quot; 对webpack.config.js配置进行分离。
</code></pre>
<hr>
<h3 id="抽离webpack-config-js"><a href="#抽离webpack-config-js" class="headerlink" title="抽离webpack.config.js"></a>抽离webpack.config.js</h3><blockquote>
<p>base.config.js</p>
</blockquote>
<p>在根目录创建一个build文件夹, 在文件夹下创建<code>base.config.js</code>。只用于存放开发时依赖发布时也依赖的<code>公共配置</code>。把webpack.config.js中的内容复制过来, 只保留发布和开发都依赖的配置。</p>
<pre><code>const path = require(&quot;path&quot;)
const &#123; VueLoaderPlugin &#125; = require(&#39;vue-loader&#39;)
const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;)
module.exports = &#123;
  entry: &quot;./src/main.js&quot;,
  output: &#123;
    path: path.resolve(__dirname, &quot;dist&quot;),
    filename: &quot;bundle.js&quot;
  &#125;,
  module: &#123;
    rules: [&#123;
        test: /\.css$/,
        use: [&#39;style-loader&#39;, &#39;css-loader&#39;]
      &#125;,
      &#123;
        test: /\.less$/,
        use: [&#123;loader: &quot;style-loader&quot; &#125;, &#123;loader: &quot;css-loader&quot; &#125;, &#123;loader: &quot;less-loader&quot;&#125;]
      &#125;,
      &#123;
        test: /\.(png|jpg|gif|jpeg)$/,
        use: [
          &#123;
            loader: &#39;url-loader&#39;,
            options: &#123;
              limit: 8192,
              name: &quot;img/[name].[hash:8].[ext]&quot;
            &#125;
          &#125;
        ]
      &#125;
      ,
      &#123;
        test: /\.js$/,
        exclude: /(node_modules|bower_components)/,
        use: &#123;
          loader: &#39;babel-loader&#39;,
          options: &#123;
            presets: [&#39;es2015&#39;]
          &#125;
        &#125;
      &#125;,
      &#123;
        test: /\.vue$/,
        use:[&quot;vue-loader&quot;]
      &#125;
    ]
  &#125;,
  plugins: [
      new VueLoaderPlugin(),
      new HtmlWebpackPlugin(&#123;
        template: &quot;index.html&quot;
      &#125;),
  ],
  resolve: &#123;
    alias: &#123;
      &quot;vue$&quot;: &quot;vue/dist/vue.esm.js&quot;
    &#125;
  &#125;
&#125;
</code></pre>
<blockquote>
<p>prod.config.js</p>
</blockquote>
<p>在build文件夹下创建<code>prod.config.js</code>, <code>只用于存放 发布时(运行时)依赖配置</code>。把webpack.config.js中的内容复制过来, 删除公共配置和开发时配置。</p>
<pre><code>const uglifyjsWebpackPlugin = require(&quot;uglifyjs-webpack-plugin&quot;)
module.exports = &#123;
  plugins: [
      new uglifyjsWebpackPlugin()
  ]
&#125;
</code></pre>
<blockquote>
<p>dev.config.js</p>
</blockquote>
<p>在build文件夹下创建<code>dev.config.js</code>, <code>只用于存放 开发时依赖 配置</code>。把webpack.config.js中的内容复制过来, 删除公共配置和发布时配置。</p>
<pre><code>module.exports = &#123;
  devServer: &#123;
    contentBase: &quot;./dist&quot;,
    inline: true
  &#125;
&#125;
</code></pre>
<p><strong>抽离完成</strong></p>
<p>思路就是。<br>开发时使用(npm run dev)：  公共配置(base) + 开发时依赖(dev)。<br>发布时使用(npm run build)：公共配置(base) + 发布时依赖(prod)。</p>
<pre><code>#思路有了, 接下来就是如何引用的问题了。
#这里需要安装一个插件, 叫webpack-merge。(merge合并的意思)
#它可以帮助我们对两个配置文件进行合并。
F:\learnwebpack\webpack-start&gt; npm install webpack-merge@4.1.5 --save-dev
</code></pre>
<p>安装完成后, 修改prod.config.js</p>
<pre><code>const uglifyjsWebpackPlugin = require(&quot;uglifyjs-webpack-plugin&quot;)
//导入base.config.js
const baseConfig = require(./base.config.js)
//导入webpack-merge
const webpackMerge = require(&quot;webpack-merge&quot;)
//合并
module.exports = webpackMerge(baseConfig,&#123;
  plugins: [
      new uglifyjsWebpackPlugin()
  ]
&#125;)
</code></pre>
<p>修改dev.config.js</p>
<pre><code>//导入base.config.js
const baseConfig = require(./base.config.js)
//导入webpack-merge
const webpackMerge = require(&quot;webpack-merge&quot;)
//合并
module.exports = webpackMerge(baseConfig,&#123;
  devServer: &#123;
    contentBase: &quot;./dist&quot;,
    inline: true
  &#125;
&#125;)
</code></pre>
<p>分离完成后, webpack.config.js文件就可以删掉了。但是在执行npm run dev(npm run build同理)的时候。如何让webpack去找dev&#x2F;prod.config.js而不是webpack.config.js呢。</p>
<p>修改package.json</p>
<pre><code>&quot;scripts&quot;: &#123;
  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,
  &quot;build&quot;: &quot;webpack --config ./build/prod.config.js&quot;,
  &quot;dev&quot;: &quot;webpack-dev-server --open --config ./build/dev.config.js&quot;
&#125;
//在scripts中, 去指定配置文件(--config 配置文件路径)。

//现在只有最后一个问题了, 还记得之前打包的时候制定的路径嘛。
//现在在base.config.js中。

output: &#123;
  path: path.resolve(__dirname, &quot;dist&quot;),
  filename: &quot;bundle.js&quot;
&#125;
//要知道__dirname是配置文件所在的目录。
//现在配置文件在build文件夹下, 再拼接一个dist文件夹。
//到时候, 打包的文件就跑到,  build/dist文件夹下了。
//所以这里需要修改。
output: &#123;
  path: path.resolve(__dirname, &quot;../dist&quot;),
  filename: &quot;bundle.js&quot;
&#125;

//测试：npm run build成功, npm run dev成功。
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(49)文件路径引用问题</title>
    <url>/blog/vue2/49/</url>
    <content><![CDATA[<hr>
<h3 id="文件路径引用问题"><a href="#文件路径引用问题" class="headerlink" title="文件路径引用问题"></a>文件路径引用问题</h3><p>在webpack.base.conf.js(webpack.config.js)中配置</p>
<pre><code>module.exports = &#123;
  .....
  resolve: &#123;
    //导入文件时可不用输入文件后缀名。
    extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],
    alias: &#123;
      //alias别名, 给src取了一个别名(src是指项目文件夹src), 叫@, 在项目中引用、导入路径时
      //可以直接@/文件夹/文件夹/文件名.后缀名
      &#39;@&#39;: resolve(&#39;src&#39;),
    &#125;
  &#125;
  ....
&#125;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-115.png" alt="vue2-115"></p>
<p>在CLI2中还可以配置</p>
<pre><code>module.exports = &#123;
  .....
  resolve: &#123;
    extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],
    alias: &#123;
      &#39;@&#39;: resolve(&#39;src&#39;),
      //对图片资源文件夹取别名
      &#39;assets&#39;: resolve(&#39;src/assets&#39;),
      //对组件文件夹取别名
      &#39;components&#39;: resolve(&#39;src/components&#39;)
    &#125;
  &#125;
  ....
&#125;
</code></pre>
<p>不过在引用时, 需要在前面加~, 即 ~别名+路径。</p>
<pre><code>...
&lt;img src=&quot;~assets/logo.png&quot; /&gt;
...
</code></pre>
<p>但import组件时, 路径可以直接写就可以了, 别名+路径。</p>
<pre><code>import Home from &quot;components/home&quot;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(5)v-once、v-pre、v-cloak</title>
    <url>/blog/vue2/5/</url>
    <content><![CDATA[<hr>
<h3 id="v-once、v-pre、v-cloak"><a href="#v-once、v-pre、v-cloak" class="headerlink" title="v-once、v-pre、v-cloak"></a>v-once、v-pre、v-cloak</h3><p><code>v-once只渲染一次</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>v-once一次性渲染：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>没有v-once：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>修改Msg的值：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;Msg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>: <span class="string">&quot;hello world！&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p><code>v-pre 不渲染标签中的mustache标签中的值</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-pre</span>&gt;</span>Msg的值为：&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>: <span class="string">&quot;hello world！&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p><code>v-cloak斗篷</code>。</p>
<p>1.当数据渲染缓慢, 或js加载出现问题时, 插值的地方可能会直接渲染显示<span>{</span>{Msg}}, 而不是显示hello world！<br>2.事实上我们并不希望用户看到形如：<span>{</span>{Msg}} 之类的数据。v-cloak的作用就是, 在数据未渲染出来之前, 不显示任何内容, 且在内容渲染完成之后自动移除v-cloak属性。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>: <span class="string">&quot;hello world！&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(50)Vue-CLI的介绍和安装</title>
    <url>/blog/vue2/50/</url>
    <content><![CDATA[<hr>
<h3 id="Vue-CLI的介绍"><a href="#Vue-CLI的介绍" class="headerlink" title="Vue-CLI的介绍"></a>Vue-CLI的介绍</h3><p>上一节讲了, webpack安装配置, 但是在实际的项目开发中, 我们一般不会从头到尾, 全部自己来写webpack的配置的。一般会用一个叫做脚手架(CLI)的工具, 自动生成webpack相关的配置。不管是进行vue开发, 还是react开发, 他们都是有对应的脚手架的。接下来将要学习的就是vue的脚手架, Vue-CLI。</p>
<p>如果只是简单写几个vue的Demo程序, 可能不需要用到Vue CLI, 如果在开发大型项目, 那么必然需要用到Vue CLI。在大型项目中 , 需要考虑代码目录结构、项目结构和部署, 热加载、代码单元测试等等事情, 如果这些工作都需要用手工去配置, 那么效率无疑是低下的。所以通常我们会使用脚手架工具来完成这些事情。<code>CLI是Command-Line Interface</code>, 翻译为命令行界面, 但是俗称脚手架。</p>
<p>Vue CLI使用的前提, 也是基于Node的。因为它会自动生成vue项目的webpack配置, 而webpack就是基于Node环境运行的。</p>
<hr>
<h3 id="Vue-CLI的安装"><a href="#Vue-CLI的安装" class="headerlink" title="Vue-CLI的安装"></a>Vue-CLI的安装</h3><p>脚手架的安装一般都是全局安装。默认情况下都是安装最新的脚手架版本。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm install -g @vue/cli
#这是安装Vue CLI3。
</code></pre>
<p>可以全局安装一个桥接工具。这样既可以使用CLI2,也可以使用更新的版本, 所以现在很少有人单独安装CLI2了。</p>
<pre><code>F:\learnwebpack\webpack-start&gt; npm install -g @vue/cli-init
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>(51)Vue-CLI2创建项目</title>
    <url>/blog/vue2/51/</url>
    <content><![CDATA[<hr>
<h3 id="Vue-CLI2创建项目"><a href="#Vue-CLI2创建项目" class="headerlink" title="Vue-CLI2创建项目"></a>Vue-CLI2创建项目</h3><p>使用vue脚手架2创建项目。</p>
<pre><code>#vue init webpack 项目文件夹(根据这个名称创建一个文件夹, 不能包含大写字母)
F:\learnwebpack\webpack-start&gt; vue init webpack vuecli2test

? Project name (vuecli2test)
#项目名称(不能包含大写, 一般情况下项目名称和项目文件夹名称是一样的, 直接回车)

? Project description (A Vue.js project) 
#项目描述, 它默认的是A Vue.js project, 这里我们可以改成vue CLI2 test, 回车。

? Author (当前设备默认的git信息, 包括名称和邮箱) 
#如果是在自己的电脑上, 这里应该默认的是自己的git配置信息, 可以直接回车。
#默认情况下, 可以在C:\Users\Administrator\.gitconfig查看git配置信息。
#当然也可以自行设置：张三 123456@gmail.com

? Vue build
&gt; Runtime + Compiler: recommended for most users
   Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specific HTML) 
are ONLY allowed in .vue files - render functions are required elsewhere
#这里可以使用方向键上下选择, 前面已经大概了解过Runtime-only和Runtime + Compiler的区别。
#之前的项目中默认的就是Runtime-only, 但是没办法编译tempalte。但是Runtime-only项目会更小, 运行效率会更高。
#这里先演示CLI2项目的创建, 选择Runtime + Compiler。

? Install vue-router? (Y/n) 
#是否安装vue-router路由, 可以否, 后面自己安装

? Use ESLint to lint your code? (Y/n) 
#ESLint代码规范的检查, 很严格, 一般不安

? Set up unit tests (Y/n)
#单元测试, 一些大公司要求写单元测试。可选否

? Setup e2e tests with Nightwatch? (Y/n) 
#e2e自动化测试框架, 一般不安

? Should we run `npm install` for you after the project has been created? (recommended) (Use arrow keys)
&gt; Yes, use NPM 
  Yes, use Yarn 
  No, I will handle that myself 
#这里可以使用方向键上下选择, 选择项目管理工具, npm

#Vue CLI2项目创建就完成了。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-66.png" alt="vue2-66"></p>
<p><strong>教程解释</strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-67.png" alt="vue2-67"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-68.png" alt="vue2-68"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-71.png" alt="vue2-71"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-72.png" alt="vue2-72"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>(52)runtime-only和runtime-compiler的区别</title>
    <url>/blog/vue2/52/</url>
    <content><![CDATA[<hr>
<h3 id="runtime-only和runtime-compiler的区别"><a href="#runtime-only和runtime-compiler的区别" class="headerlink" title="runtime-only和runtime-compiler的区别"></a>runtime-only和runtime-compiler的区别</h3><p>简单理解, <strong>runtime-only和runtime-compiler的区别, 只在main.js里面</strong>。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-70.png" alt="vue2-70"></p>
<blockquote>
<p>runtime-compiler</p>
</blockquote>
<p>1.导入组件。<br>2.在components里面注册。<br>3.在template里面使用。</p>
<pre><code>template(模板)--&gt;ast(抽象语法树)--&gt;render(函数)--&gt;virtual dom(虚拟DOM)--&gt;UI(真实DOM)
</code></pre>
<blockquote>
<p>runtime-only</p>
</blockquote>
<p>1.导入组件。<br>2.将createElement函数传入render函数, 在render函数中。<br>3.直接返回createElement处理完毕的组件模板。</p>
<pre><code>render(函数)--&gt;virtual dom(虚拟DOM)--&gt;UI(真实DOM)
//相比于runtime-compiler, runtime-only更有优势。
//1、更高的性能。
//2、代码量更少, 最终打包的体积更小。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-69.png" alt="vue2-69"></p>
<hr>
<h3 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h3><p>runtime-only中的render函数</p>
<pre><code>//这是ES6的箭头函数写法
render: h =&gt; h(App)

//可以写成
render: function(h)&#123;
  return h(App)
&#125;
</code></pre>
<p>这个h其实是vue内部一个叫createElement的函数, 它有好几种用法。</p>
<blockquote>
<p>1、createElement(“标签”, {标签属性}, [‘标签内容’])</p>
</blockquote>
<p>例如：createElement(“h2”, {class:”box”}, [‘我是h2的内容’])</p>
<pre><code>render: function(createElement)&#123;
  return createElement(&quot;h2&quot;, &#123;class:&quot;box&quot;&#125;, [&#39;我是h2的内容&#39;])
&#125;
//或者：
render: function(createElement)&#123;
  return createElement(&quot;h2&quot;,
  &#123;class:&quot;box&quot;&#125;, 
  [&#39;我是h2的内容&#39;,createElement(&#39;button&#39;, [&#39;按钮&#39;])])
&#125;
//如果这里这么写的话, 它会用创建的标签替换vue实例挂载的app
</code></pre>
<blockquote>
<p>2、直接传入一个组件</p>
</blockquote>
<p>直接给createElement传入一个组件</p>
<pre><code>render: function(createElement)&#123;
  return createElement(App)
&#125;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-cli</tag>
        <tag>runtime-only</tag>
        <tag>runtime-compiler</tag>
      </tags>
  </entry>
  <entry>
    <title>(53)Vue-CLI3创建项目</title>
    <url>/blog/vue2/53/</url>
    <content><![CDATA[<hr>
<h3 id="Vue-CLI3创建项目"><a href="#Vue-CLI3创建项目" class="headerlink" title="Vue-CLI3创建项目"></a>Vue-CLI3创建项目</h3><p>Vue-CLI3与2版本有很大区别, 3是基于webpack4打造。Vue-CLI3的设计原则是0配置, 移除(隐藏)了配置文件根目录下的build和config等目录。同时还提供了vue ui命令, 提供了可视化配置。移除了static文件夹, 新增了public文件夹, 并且index.html移动到了public中。</p>
<p>注意：Vue-CLI3是脚手架的升级, 并不是指vue的升级。</p>
<hr>
<h3 id="Vue-CLI3创建项目-1"><a href="#Vue-CLI3创建项目-1" class="headerlink" title="Vue-CLI3创建项目"></a>Vue-CLI3创建项目</h3><p>在项目文件夹下打开终端。</p>
<pre><code>#vue create 项目文件夹名
F:\vuecli&gt; vue create vuecli3pro

Vue CLI v4.5.13 #提示脚手架版本
? Please pick a preset: (Use arrow keys)
&gt; Default ([Vue 2] babel, eslint) #vue2默认配置
  Default (Vue 3) ([Vue 3] babel, eslint) #vue3默认配置
  Manually select features #手动选择配置
#按上下方向键移动, 回车键确定, 选择一个配置。
#先选择手动, 看看有哪些配置可选。

? Check the features needed for your project:
  (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)
&gt;(*) Choose Vue version
 (*) Babel
 ( ) TypeScript
 ( ) Progressive Web App (PWA) Support  #更先进的App, 如更好的本地存储, 信息推送。
 ( ) Router  #路由
 ( ) Vuex    #状态管理
 ( ) CSS Pre-processors  #css预处理器, 如使用less等。
 ( ) Linter / Formatter
 ( ) Unit Testing
#按上下方向键移动, 空格键选择/取消, 回车键确定。
#第一个选项需要选中, 需要选择vue的版本, 教程中, 暂时只有vue2。

? Choose a version of Vue.js that you want to start the project with
&gt; 2.x
  3.x
#选择vue2.x

#你想把配置放在独立的配置文件里？还是放在package.json里面。
? Where do you prefer placing config for Babel, ESLint, etc.?
&gt; In dedicated config files
  In package.json
#先跟着教程走, 选择放在独立的配置文件里。

? Save this as a preset for future projects? (y/N)y
#是否将刚才手动选择的设置, 保存成个人预设配置。

? Save preset as: myvuecli3preset
#输入个人预设配置的名字。
#完成后, 在下次创建CLI3项目时就会, 有个myvuecli3preset可选。
#默认情况下, 可以在C:\Users\Administrator\.vuerc查看/管理自定义预设配置

#Vue-CLI3项目创建完成。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-73.png" alt="vue2-73"></p>
<p>可以看出Vue-CLI3创建的项目简单了许多：</p>
<p>1.public文件夹替代了以前的static文件夹<br>2.在打包时, 里面的文件会原封不动的打包到dist文件夹, 名称都不会改。<br>3.src文件夹就是项目开发, 写代码的地方了。<br>4..browserslistrc是浏览器相关配置。<br>5.babel.config.js是对babel的配置, 一般都不需要改。<br>6.package.json包管理配置文件<br>……</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-75.png" alt="vue2-75"></p>
<p>查看package.json里面的scripts, 可以发现, 运行CLI3创建的项目, 是serve。编译是build。</p>
<pre><code>F:\vuecli&gt; cd vuecli3pro
F:\vuecli\vuecli3pro&gt; npm run serve
#运行成功
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-74.png" alt="vue2-74"></p>
<p>打开src中的main.js</p>
<pre><code>new Vue(&#123;
  render: h =&gt; h(App),
&#125;).$mount(&#39;#app&#39;)

//这与CLI2创建的项目中略有不同。
new Vue(&#123;
  el: &#39;#app&#39;
  render: h =&gt; h(App)
&#125;)

//一个写了el挂载了app, 另一个$mount(&#39;#app&#39;)。
//其实他们没有区别。
//使用el挂载app, 其实在其内部, 就是执行$mount(&#39;#app&#39;)。
//当然不管用什么方式挂载, 都会被render出来的内容替换掉。
</code></pre>
<hr>
<h3 id="Vue-CLI3的配置"><a href="#Vue-CLI3的配置" class="headerlink" title="Vue-CLI3的配置"></a>Vue-CLI3的配置</h3><p>CLI3创建的项目号称0配置, 那配置去哪里了？</p>
<p>在前面安装vue的时候, 是全局安装。除了有vue create或者vue init webpack创建项目的口令外。还有一个<code>全局的vue ui口令</code>(不需要指定目录, 这是全局的)。这个口令, 可以启动一个本地服务器。在网页的可视化界面中, 可以对项目的配置进行管理。</p>
<pre><code>F:\vuecli&gt; vue ui
</code></pre>
<blockquote>
<p>查看配置：方式一</p>
</blockquote>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-76.png" alt="vue2-76"></p>
<p>在这里可以创建项目(看个人习惯)<br>还可以导入已有项目, 导入后, 就可以看见项目的配置文件了。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-77.png" alt="vue2-77"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-78.png" alt="vue2-78"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-79.png" alt="vue2-79"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-80.png" alt="vue2-80"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-81.png" alt="vue2-81"></p>
<blockquote>
<p>查看配置：方式二</p>
</blockquote>
<p>配置文件是被隐藏了。可以在：项目文件夹&#x2F;node_modules&#x2F;@vue&#x2F;cli-service&#x2F;lib查看配置。里面的文件相互依赖, 就很复杂了。</p>
<blockquote>
<p>手动修改配置</p>
</blockquote>
<p>如果确实有配置需要修改, 需要在当前项目下创建一个文件, 这个文件名是固定的：<code>vue.config.js</code>。然后在里面导出配置, 到时候会自动与其他配置合并。</p>
<pre><code>module.exports = &#123;
  
&#125;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>(54)路由的认识</title>
    <url>/blog/vue2/54/</url>
    <content><![CDATA[<hr>
<h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h3><p>生活中我们接触到的路由概念就是路由器了。路由器中有一个非常重要的概念叫路由表, 它记录着路由中连接的若干设备, 每个设备对应一个IP地址, 它的本质就是一个映射表, 正是这个映射表, 让千里之外的信息, 能传递到正确的设备上。</p>
<hr>
<h3 id="后端路由阶段"><a href="#后端路由阶段" class="headerlink" title="后端路由阶段"></a>后端路由阶段</h3><p>在此之前需要了解什么是：<strong>后端渲染</strong>。早期的网页都是jsp&#x2F;php等开发的。当浏览器请求一个地址时(如：taobao.com), 在服务器中, Java会从数据库读取数据, 并将读取结果渲染到页面中, 所以在服务器就已经生成了最终的网页了, 页面中只有html和css, 然后将渲染好的页面返回给前端。这种就是后端渲染。<br>当请求第二个页面的时候(如：taobao.com&#x2F;nanzhuang), 那么服务器又会根据请求, 在后端渲染第二个页面, 并将其返回给前端。<br>服务器总是能根据url地址返回对应的页面, 这种由后端处理url和页面之间的映射关系, 就叫做<strong>后端路由</strong>。<br>后端路由阶段, 网站页面开发维护, 都是由后端人员来做的, 通常html代码数据以及对应的逻辑会混在一起, 编写和维护非常糟糕。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-82.png" alt="vue2-82"></p>
<hr>
<h3 id="前后端分离阶段"><a href="#前后端分离阶段" class="headerlink" title="前后端分离阶段"></a>前后端分离阶段</h3><p>随着Ajax的出现, 有了前后端分离的开发模式。后端只需要提供API来返回数据, 而前端通过Ajax获取数据, 并通过JavaScript将数据渲染到页面上, 目前很多网站依然采用这种模式开发。这种在前端浏览器中执行js获取数据, 最终渲染出来页面, 就是<strong>前端渲染</strong>。但是它的URL和页面的映射关系仍然在服务器上。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-83.png" alt="vue2-83"></p>
<hr>
<h3 id="单页面富应用-SPA-阶段-也就是前端路由阶段"><a href="#单页面富应用-SPA-阶段-也就是前端路由阶段" class="headerlink" title="单页面富应用(SPA)阶段, 也就是前端路由阶段"></a>单页面富应用(SPA)阶段, 也就是前端路由阶段</h3><p>其实SPA最主要的特点, 就是在前后端分离的基础上, 加了一层前端路由, 也就是由前端来维护一套路由规则(由前端管理页面和地址的映射关系)。<br>前端路由的核心, 就是改变url, 但是页面不进行整体刷新。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-84.png" alt="vue2-84"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(55)url的hash和html5的history</title>
    <url>/blog/vue2/55/</url>
    <content><![CDATA[<hr>
<h3 id="url的hash和html5的history"><a href="#url的hash和html5的history" class="headerlink" title="url的hash和html5的history"></a>url的hash和html5的history</h3><p>先创建项目, 暂时用CLI2来演练。</p>
<pre><code>F:\learn&gt; vue init webpack vuerouterpro
? Project name vuerouterpro
? Project description A Vue.js project   
? Author 张三 &lt;123456@qq.com&gt;
? Vue build runtime
? Install vue-router? Yes
? Use ESLint to lint your code? No
? Set up unit tests No
? Setup e2e tests with Nightwatch? No
? Should we run `npm install` for you after the project has been created? (recommended) npm
</code></pre>
<p><strong>改变url而不让页面刷新的方法有两种。</strong></p>
<hr>
<h3 id="第一种：hash"><a href="#第一种：hash" class="headerlink" title="第一种：hash"></a>第一种：hash</h3><p>在运行的页面中按F12打开开发者调试工具。在console控制台中, 输入:</p>
<pre><code>location.has = &quot;aaa&quot;
</code></pre>
<p>你会发现页面没有刷新, 但是网页地址变了。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-85.png" alt="vue2-85"></p>
<hr>
<h3 id="第二种：history"><a href="#第二种：history" class="headerlink" title="第二种：history"></a>第二种：history</h3><p>在控制台中, 输入:</p>
<pre><code>history.pushState(&#123;&#125;,&quot;&quot;,&quot;home&quot;)
</code></pre>
<p>你会发现页面没有刷新, 但是网页地址变了。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-86.png" alt="vue2-86"></p>
<blockquote>
<p>pushState</p>
</blockquote>
<p>还可以继续pushState, 多次改变url。</p>
<pre><code>history.pushState(&#123;&#125;,&quot;&quot;,&quot;about&quot;)
history.pushState(&#123;&#125;,&quot;&quot;,&quot;me&quot;)
</code></pre>
<blockquote>
<p>栈</p>
</blockquote>
<p>这里要拓展一个知识叫 “栈”。栈的结构, 就像一个杯子, 在杯子里面一层一层的搭积木。最底层的积木是第一次放的, 最顶层的积木是最后一次放的。这个时候, 我们要一块一块的拿出积木的话。永远都是从最顶层(也就是最后一次放的积木)开始拿。</p>
<blockquote>
<p>history.back()</p>
</blockquote>
<p>前面在history中pushState的url, 就是以栈结构保存的。最后一次pushState的url就处于栈顶的位置, 而pushState就是一个入栈的操作。当我们输入:</p>
<pre><code>history.back()
</code></pre>
<p>你会发现, 最后一次pushState的url被移除了。地址回到了上一次pushState的url。这就相当于从杯子顶部拿走了一块积木, history.back()就是一个出栈操作。</p>
<blockquote>
<p>history.replaceState</p>
</blockquote>
<p>通过history.replaceState改变url时, 不能返回, 因为replaceState改变url时没有入栈操作。</p>
<pre><code>history.replaceState(&#123;&#125;,&quot;&quot;,&quot;home&quot;)
</code></pre>
<blockquote>
<p> history.go</p>
</blockquote>
<p>history.go只能在有url记录的栈结构时使用。</p>
<pre><code>history.go(-1)
</code></pre>
<p>history.go(-1) 等同于 history.back()。history.go(-2) 表示2次的history.back()。</p>
<p>history.back()表示后退, 那么对应的也有前进：history.forward()。这里要说的是：history.go(1) 等同于history.forward()。history.go(2) 等同于2次的history.forward()。</p>
<p><strong>在Vue-Router中, 这两种改变url的方式都可以使用, 但是它默认的是hash的方式。</strong></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(56)Vue-Router的安装和配置</title>
    <url>/blog/vue2/56/</url>
    <content><![CDATA[<hr>
<h3 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h3><p>目前前端流行的三大框架, 都有自己的路由实现</p>
<ul>
<li>Angula的ngRouter</li>
<li>React的ReactRouter</li>
<li>Vue的vue-Router</li>
</ul>
<p><strong>vue-Router是vuejs官方的路由插件, 它和vuejs是深度集成的, 适合用于构建单页面应用</strong>。<br><strong>vue-Router是基于路由和组件的</strong>。<br><strong>路由用于设定访问路径, 将路径和组件按映射起来</strong>。<br>在vue-Router单页面应用中, <code>页面的路径的改变就是组件的切换</code>。</p>
<blockquote>
<p>vue-Router安装</p>
</blockquote>
<p>在前面的项目创建时, 已经安装好了vue-router, 可以看到, src文件夹下多了一个叫router的文件夹。</p>
<pre><code>F:\learn\vuerouterpro&gt; npm install vue-router --save
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-87.png" alt="vue2-87"></p>
<blockquote>
<p>配置路由信息</p>
</blockquote>
<p>router文件夹下有一个index.js, 我们将index.js的内容清空。将main.js中的路由配置也删除了。学习一下手动配置路由。</p>
<pre><code>//在router文件夹下的`index.js`中开始配置路由信息。
//第一步：导入路由对象
import Router from &#39;vue-router&#39;

//第二步：通过Vue.use(插件), 安装插件。
//但是这里面没有Vue, 我们还需要导入vue
import Vue from &#39;vue&#39;
Vue.use(Router)

//第三步：创建路由对象。
const router = new Router(&#123;
  //在这里配置路由和组件之间的映射关系。
  routers:[
    
  ]
&#125;)

//第四步：导出路由实例router
export default router

//第五步：在main.js中, 导入前面导出的router实例
import router from &quot;./router/index.js&quot;

//第六步：在main.js的vue实例中挂载router。
new Vue(&#123;
  el: &#39;#app&#39;,
  router,
  render: h =&gt; h(App)
&#125;)

//这样, 路由配置就完成了, 但是要想路由生效。
//还需要回到第三步中的routers, 配置路由和组件的映射关系。
const router = new Router(&#123;
  routers:[
    
  ]
&#125;)
</code></pre>
<blockquote>
<p>路由配置映射</p>
</blockquote>
<p>先删除项目默认的组件。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-88.png" alt="vue2-88"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-89.png" alt="vue2-89"></p>
<p>没有组件就无法配置映射关系, 所以第一步需要创建一个新组件, 在components文件夹中, 创建两个组件 *.vue。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-90.png" alt="vue2-90"></p>
<p>组件创建完成后, 有了组件就可以配置路由和组件的映射关系了。回到router文件夹下的index.js中。</p>
<p>一个映射关系就是一个对象。这里需要添加2个对象(因为前面新建了2个组件)。对象里面有2个基本属性path和component。</p>
<pre><code>export default new Router(&#123;
  routes: [
    &#123;
      path: 路径,
      component: 组件
    &#125;,
    &#123;
      path: 路径,
      component: 组件
    &#125;
  ]
&#125;)

//第一个：path, 在path中, 配置路径信息。
export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;/home&quot;, //意思是只要url里面出现了/home就会加载下面的组件。
      component: 组件
    &#125;,
    &#123;
      path: &quot;/about&quot;, //意思是只要url里面出现了/about就会加载下面的组件。
      component: 组件
    &#125;
  ]
&#125;)

//第二个：component, 配置组件。要使用组件就需要先导入
import Home from &quot;../components/home.vue&quot;
import About from &quot;../components/about.vue&quot;
export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;/home&quot;, 
      component: Home
    &#125;,
    &#123;
      path: &quot;/about&quot;, 
      component: About
    &#125;
  ]
&#125;)
</code></pre>
<p>配置完路由, 新建的组件并不会显示。</p>
<blockquote>
<p>router-link</p>
</blockquote>
<p>在main.js中render了App组件, 页面现在只会显示App组件。 在App中新建两个按钮, 点击按钮时去切换url, 来加载不同的组件。使用router中注册的标签router-link, 它最终会被渲染成a标签。</p>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;

    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;
    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;

  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  name: &#39;App&#39;
&#125;
&lt;/script&gt;

&lt;style&gt;

&lt;/style&gt;
</code></pre>
<p>编译一下项目看看。</p>
<pre><code>F:\learn\vuerouterpro&gt; npm run dev
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-91.png" alt="vue2-91"></p>
<blockquote>
<p>router-view</p>
</blockquote>
<p>正常编译。且页面显示了增加的两个标签。点击标签, 路径可以正常切换。但是组件内容还没有展示这里需要用到router中的第二个标签, router-view。</p>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;

    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;
    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;
    
    &lt;!-- 决定, 渲染的组件 首页/关于, 显示在什么位置。 --&gt;
    &lt;!-- 它相当于一个占位, 组件渲染出来后, 会替换router-view。 --&gt;
    &lt;router-view&gt;&lt;/router-view&gt;

  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  name: &#39;App&#39;
&#125;
&lt;/script&gt;

&lt;style&gt;

&lt;/style&gt;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-92.png" alt="vue2-92"></p>
<p>这个时候再在页面中点击标签, 就能根据路由映射中的设置, 就能切换显示不同组件的内容。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-93.png" alt="vue2-93"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(57)路由的默认值和修改为history</title>
    <url>/blog/vue2/57/</url>
    <content><![CDATA[<hr>
<h3 id="路由的默认值和修改为history"><a href="#路由的默认值和修改为history" class="headerlink" title="路由的默认值和修改为history"></a>路由的默认值和修改为history</h3><p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-94.png" alt="vue2-94"></p>
<p>如图所见, 在刚进入页面的时候, 组件其实是没有显示的。只有当用户点击了首页才会显示首页组件的内容。这是不合适的, 我们希望与用户一进入就开始展示首页的内容。</p>
<p>在router文件夹中的index.js中, 新增一个映射关系。</p>
<pre><code>export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;, //缺省值, 即默认值路径
      component: Home
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About
    &#125;
  ]
&#125;)
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-95.png" alt="vue2-95"></p>
<p>默认倒是显示了, 但是路径不太对。还是要重新配置。需要重定向到Home。</p>
<pre><code>export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;, //缺省值, 即默认值路径, 里面加不加&quot;/&quot;都是一样的。
      redirect: &quot;/home&quot; //将上面的默认路径重定向到/home路径
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About
    &#125;
  ]
&#125;)
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-96.png" alt="vue2-96"></p>
<hr>
<h3 id="hash模式的-号"><a href="#hash模式的-号" class="headerlink" title="hash模式的#号"></a>hash模式的#号</h3><p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-85.png" alt="vue2-85"></p>
<p>可以看出利用hash修改路径, 路径中会默认有一个#号。这与我们上面不管是重定向, 还是点击标签切换, 都有个#号一样。但是前面用html5的history修改就没有#号。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-86.png" alt="vue2-86"></p>
<p>默认情况下, 路由的模式就是hash模式。那要这么修改成history模式呢。非常的简单。在路由配置中。</p>
<pre><code>export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;, 
      redirect: &quot;/home&quot; 
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About
    &#125;
  ],
  mode: &quot;history&quot; //除了routes属性, 再传入一个mode属性, 改为history即可。
&#125;)
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-97.png" alt="vue2-97"></p>
<p><strong>可以看到, 路径中的#号, 已经没有了</strong>。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(58)router-link的其他属性补充</title>
    <url>/blog/vue2/58/</url>
    <content><![CDATA[<hr>
<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>tag：在Vue Router 4.x中, tag已经被移除, 请使用v-slot代替</p>
<pre><code>&lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;
&lt;!-- 页面的router-link中, 我们就用了一个to属性, 里面放的是路径 --&gt;

&lt;!-- 除此之外, 它还有一个tag属性。 --&gt;
&lt;!-- 在默认情况下router-link会被渲染成一个a标签, tag可以指定标签。 --&gt;
&lt;router-link to=&quot;/home&quot; tag=&quot;button&quot;&gt;首页&lt;/router-link&gt;
&lt;!-- 这样router-link就会被渲染成button按钮 --&gt;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-98.png" alt="vue2-98"></p>
<blockquote>
<p>replace</p>
</blockquote>
<p>前面我们讲了”栈”, 我们在首页和关于来回跳转的时候, 就是在进行history.pushState的入栈操作。因为, 来回跳转以后, 浏览器上方的返回按钮可以点击进行返回。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-99.png" alt="vue2-99"></p>
<pre><code>&lt;!-- 在首页和关于来回跳转时。 --&gt;
&lt;!-- 如果我们不希望它进行入栈操作, 也就是浏览器使用history.replaceState模式。 --&gt;
&lt;!-- 用户必须点击页面中的首页才能回到首页, 必须点击关于才能去到关于。 --&gt;
&lt;!-- 只需要给router-link增加一个replace属性就行了。这样在首页和关于来回跳转时, 就不会有返回记录了。 --&gt;
&lt;router-link to=&quot;/home&quot; tag=&quot;button&quot; replace&gt;首页&lt;/router-link&gt;
</code></pre>
<blockquote>
<p>active-class</p>
</blockquote>
<p>在进行组件之间跳转的时候。发现, 哪个按钮被点击, 在它的样式中就会多一个router-link-active样式。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-100.png" alt="vue2-100"></p>
<pre><code>&lt;!-- 我们在App.vue中增加一个这个样式, 再来回点即按钮看看什么效果。 --&gt;
&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;

    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot;&gt;首页&lt;/router-link&gt;
    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;

    &lt;router-view&gt;&lt;/router-view&gt;

  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  name: &#39;App&#39;
&#125;
&lt;/script&gt;

&lt;style&gt;
  /*写一个router-link-active的样式*/
  .router-link-active&#123;color: #b20b30;font-weight: bold;&#125;
&lt;/style&gt;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-101.png" alt="vue2-101"></p>
<p>没错了, 这就是选项的激活样式。一般设置激活样式, 直接设置router-link-active就可以了。</p>
<p>但是它仍然有个属性叫, active-class, 可以通过它修改默认激活样式的名称。如下, 这样, 这个button的激活样式就不是router-link-active, 而是active。</p>
<pre><code>&lt;router-link to=&quot;/home&quot; tag=&quot;button&quot; active-class=&quot;active&quot;&gt;首页&lt;/router-link&gt;
</code></pre>
<p>如果希望所有的router-link激活样式都是active, 那么可以在路由中进行配置。</p>
<pre><code>export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;,
      redirect: &quot;/home&quot;
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About
    &#125;
  ],
  mode: &quot;history&quot;,
  linkActiveClass: &quot;active&quot; //在路由中增加一个linkActiveClass属性, 并设置自定义的激活样式名
&#125;)
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(59)通过代码的方式修改路由</title>
    <url>/blog/vue2/59/</url>
    <content><![CDATA[<hr>
<h3 id="通过代码的方式修改路由"><a href="#通过代码的方式修改路由" class="headerlink" title="通过代码的方式修改路由"></a>通过代码的方式修改路由</h3><blockquote>
<p>$router</p>
</blockquote>
<p>前面我们通过router-link标签进行路由跳转。</p>
<pre><code>&lt;router-link to=&quot;/home&quot; tag=&quot;button&quot; active-class=&quot;active&quot;&gt;首页&lt;/router-link&gt;
</code></pre>
<p>接下来我们看看这么通过代码进行跳转, 这里就不使用router-link标签了。</p>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;

    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot;&gt;首页&lt;/router-link&gt;
    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;

    &lt;hr/&gt;

    &lt;button @click=&quot;btnClick(&#39;home&#39;)&quot;&gt;首页&lt;/button&gt;
    &lt;button @click=&quot;btnClick(&#39;about&#39;)&quot;&gt;关于&lt;/button&gt;
    &lt;!-- 通过监听按钮的方式来进行路由跳转 --&gt;

    &lt;router-view&gt;&lt;/router-view&gt;

  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  name: &#39;App&#39;,
  methods:&#123;
    btnClick(page)&#123;
      switch(page)&#123;
        case &quot;home&quot;:&#123;
          //前面在安装路由的时候, 路由就已经在全局注册了一个全局变量$router
          //使用$router的push方法进行跳转。
          //这里不推荐使用history.pushState来跳转, 既然我们用了vue-router就不要绕过它。
          //除了push方法, 还有replace方法, 与history.replaceState对应, 不入栈。
          this.$router.push(&quot;/home&quot;)
          break;
        &#125;
        case &quot;about&quot;:&#123;
          this.$router.push(&quot;/about&quot;)
          break;
        &#125;
      &#125;
    &#125;

  &#125;
&#125;
&lt;/script&gt;

&lt;style&gt;

&lt;/style&gt;
</code></pre>
<p>编译后, 页面可以正常跳转路由以及显示组件。<code>但是</code>！在点击自定义监听的按钮时, 多次点击同一个按钮时会被错。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-102.png" alt="vue2-102"></p>
<p>问题出现原因：避免到当前位置的冗余导航,  简单来说就是重复触发了同一个路由。当前已经是首页了, 再点击首页跳转, 就报错了。<strong>解决办法</strong>。</p>
<pre><code>import Vue from &#39;vue&#39;
import Router from &#39;vue-router&#39;
import Home from &quot;../components/home.vue&quot;
import About from &quot;../components/about.vue&quot;

Vue.use(Router)

const originalPush = Router.prototype.push
Router.prototype.push = function push(location) &#123;
  return originalPush.call(this, location).catch(err =&gt; err)
&#125;//解决路由重复报错问题

const originalReplace = Router.prototype.replace
Router.prototype.replace = function replace (location) &#123;
  return originalReplace.call(this, location).catch(err =&gt; err)
&#125;//解决路由重复报错问题

export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;,
      redirect: &quot;/home&quot;
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About
    &#125;
  ],
  mode: &quot;history&quot;,
  linkActiveClass: &quot;active&quot;
&#125;)
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(6)动态属性绑定v-bind</title>
    <url>/blog/vue2/6/</url>
    <content><![CDATA[<hr>
<h3 id="动态属性绑定v-bind"><a href="#动态属性绑定v-bind" class="headerlink" title="动态属性绑定v-bind"></a>动态属性绑定v-bind</h3><p>除了插值以外, 还可以通过v-bind, 对标签的属性进行动态绑定, 如img标签的src属性, class属性, style属性等。<br>语法：</p>
<pre><code>&lt;img v-bind:src=&quot;x/xx/x.jpg&quot; /&gt;
</code></pre>
<p>语法糖： (将v-bind简写为一个冒号)</p>
<pre><code>&lt;img :src=&quot;x/xx/x.jpg&quot; /&gt;
</code></pre>
<hr>
<h3 id="动态绑定class对象语法"><a href="#动态绑定class对象语法" class="headerlink" title="动态绑定class对象语法"></a>动态绑定class对象语法</h3><pre><code>&lt;div :class=&quot;&#123;className:Boolean&#125;&quot;&gt;hello world&lt;/div&gt;
</code></pre>
<p><strong>可以同时绑定多个对象</strong></p>
<pre><code>&lt;div :class=&quot;&#123;className:Boolean,className:Boolean,className:Boolean…&#125;&quot;&gt;hello world&lt;/div&gt;
</code></pre>
<p>例：</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.colorBlue</span>&#123;<span class="attribute">color</span>: blue;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;colorBlue:isActive&#125;&quot;</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>: <span class="string">&quot;hello world！&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isActive</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>1.可以看出, 对象语法, 可以包含多个对象, 在实际运用中并不友好。<br>2.可以在<strong>methods中</strong>或计算属性<strong>computed中</strong>定义一个方法, 返回一个对象即可</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.colorBlue</span>&#123;<span class="attribute">color</span>: blue;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;colorBlue:isActive&#125;&quot;</span>&gt;</span>对象语法：&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classBlue&quot;</span>&gt;</span>computed计算属性返回：&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;getClassBlue()&quot;</span>&gt;</span>methods方法返回：&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>: <span class="string">&quot;hello world！&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isActive</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">classBlue</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;<span class="attr">colorBlue</span>:<span class="variable language_">this</span>.<span class="property">isActive</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 在computed中定义一个classBlue属性, 返回一个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">getClassBlue</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;<span class="attr">colorBlue</span>:<span class="variable language_">this</span>.<span class="property">isActive</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 或者在methods中定义一个getClassBlue方法, 返回一个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="动态绑定class数组语法"><a href="#动态绑定class数组语法" class="headerlink" title="动态绑定class数组语法"></a>动态绑定class数组语法</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.colorBlue</span>&#123;<span class="attribute">color</span>: blue;&#125;<span class="selector-class">.fontSize</span>&#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;colorBlue&#x27;,&#x27;fontSize&#x27;]&quot;</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>: <span class="string">&quot;hello world！&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<ul>
<li><strong>使用很少</strong>, 数组语法中样式仍然是固定的, 跟直接放进class没有区别:class&#x3D;”[<strong>‘样式名’</strong>,<strong>‘样式名’</strong>]”。<strong>注意</strong>数组中的className<strong>有单引号</strong>。</li>
<li>除非数组中放的是从服务器获取到的样式, 此时:class&#x3D;”[<strong>变量名</strong>,<strong>变量名</strong>]”中就不是className, 而是变量名, 变量名不能加单引号了(有单引号是字符串, 没单引号是变量)。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(60)动态路由的使用</title>
    <url>/blog/vue2/60/</url>
    <content><![CDATA[<hr>
<h3 id="动态路由的使用"><a href="#动态路由的使用" class="headerlink" title="动态路由的使用"></a>动态路由的使用</h3><p>在某些情况下, 一个页面的path路径可能是不确定的, 比如我们进入用户界面时, 希望是&#x2F;user&#x2F;zhangsan或者&#x2F;user&#x2F;lisi。也就是在&#x2F;user之外, 后面还跟上了用户ID。这种path和component的匹配关系, 我们称之为<strong>动态路由</strong>。(也是路由传递数据的一种方式)。</p>
<p>以&#x2F;user&#x2F;zhangsan为例, 首先在components文件夹下创建一个user.vue的组件。再在router&#x2F;index.js中配置路由。</p>
<pre><code>...
import User from &quot;../components/user.vue&quot;
Vue.use(Router)
export default new Router(&#123;
  routes: [
    ...
    &#123;
      //在/user后面再加一个斜杠&quot;/&quot;和冒号&quot;:&quot;, 后面再跟上变量名
      path: &quot;/user/:userid&quot;,
      component: User
    &#125;
  ],
  mode: &quot;history&quot;,
  linkActiveClass: &quot;active&quot;
&#125;)
</code></pre>
<p>App.vue中增加一个链接按钮, 以及用户名变量</p>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;h2&gt;我是App组件&lt;/h2&gt;
    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot;&gt;首页&lt;/router-link&gt;
    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;
    &lt;!-- 用v-bind动态绑定to属性中的路径 --&gt;
    &lt;router-link to=&quot;/user&quot; tag=&quot;button&quot; :to=&quot;&#39;/user/&#39;+userid&quot;&gt;用户&lt;/router-link&gt;
    &lt;router-view&gt;&lt;/router-view&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  name: &#39;App&#39;,
  data()&#123;
    return &#123;
      //定义一个动态用户名
      userid: &quot;zhangsan&quot;
    &#125;
  &#125;
&#125;
&lt;/script&gt;

&lt;style&gt;

&lt;/style&gt;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-103.png" alt="vue2-103"></p>
<p>可以看到, zhangsan是App.vue中的data数据。已经成功的拼接到了路径的后面。但是如果user.vue想要获取这个userid并显示, 要怎么获取呢。在user.vue中：</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h2&gt;我是user界面&lt;/h2&gt;
    &lt;div&gt;欢迎你：&#123;&#123;userid&#125;&#125;&lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default &#123;
    name: &quot;user&quot;,
    computed: &#123;
      //定义了一个计算属性方法, 返回当前活跃路径的参数的值。
      userid()&#123;
        return this.$route.params.userid
      &#125;
    &#125;
  &#125;
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre>
<blockquote>
<p>注意！！</p>
</blockquote>
<p>上面计算属性中的:</p>
<pre><code>this.$route.params.userid
</code></pre>
<p>这个$route 并不是之前用的$router对象。这个$route是指, 当前活跃路径！！</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-104.png" alt="vue2-104"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-105.png" alt="vue2-105"></p>
<p>看看编译效果</p>
<pre><code>F:\learn\vuerouterpro&gt; npm run dev
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-106.png" alt="vue2-106"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(61)路由的懒加载</title>
    <url>/blog/vue2/61/</url>
    <content><![CDATA[<hr>
<h3 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h3><p>当我们打包应用程序的时候, JavaScript包会变得非常大(那个bundle.js), 影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块, 然后当路由被访问的时候才加载对应的组件, 这样就更加高效了。</p>
<p>那我们先来看一下我们创建的vuerouterpro项目中js是怎么打包的。</p>
<pre><code>F:\learn\vuerouterpro&gt; npm run build
</code></pre>
<p>可以看到打包后, 多了一个dist文件夹。里面有一个index.html和static文件夹, css和js及其他资源都在这里。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-107.png" alt="vue2-107"></p>
<p>是否发现每个css文件和js文件都对应了一个同名的.map文件。是因为项目在打包后, 代码都是经过压缩丑化的。如果运行时报错, 输出的错误信息无法准确得知是哪里的代码报错。那么这个.map文件, 就可以让这些压缩丑化的文件, 能准确输出是哪一行哪一列有错。</p>
<p>如果不想打包时生成.map文件。可以在config&#x2F;index.js文件中, 找到productionSourceMap: true<br>将其改为false就可以了。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-108.png" alt="vue2-108"></p>
<p>回到前面说的打包的js会越来越大。指的就是开发项目的业务代码(打包后app开头的那个js文件)。因为随着业务的增多, 开发的代码量会越来越大。</p>
<p>其实在开发里面, 我们最常见的做法就是, 一个路由打包一个js文件。这个js文件是不会跟着整个项目一起被请求过来的,  只有在进入这个路由以后, 才会请求这个js文件。这种用到时才加载的方式就叫做<code>懒加载</code>。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-109.png" alt="vue2-109"></p>
<p>很明显, 之前的路由配置方法不是懒加载, 它会将所有页面的业务代码都打包到一个js文件中去。</p>
<pre><code>import Vue from &#39;vue&#39;
import Router from &#39;vue-router&#39;
import Home from &quot;../components/home.vue&quot;
import About from &quot;../components/about.vue&quot;
import User from &quot;../components/user.vue&quot;
Vue.use(Router)
export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;,
      redirect: &quot;/home&quot;
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About
    &#125;,
    &#123;
      path: &quot;/user/:userid&quot;,
      component: User
    &#125;
  ],
  mode: &quot;history&quot;,
  linkActiveClass: &quot;active&quot;
&#125;)
</code></pre>
<blockquote>
<p>懒加载配置</p>
</blockquote>
<p>在router&#x2F;index.js中, 修改导入组件的方式。</p>
<pre><code>import Vue from &#39;vue&#39;
import Router from &#39;vue-router&#39;
const Home = () =&gt; import(&#39;../components/home.vue&#39;)
const About = () =&gt; import(&#39;../components/about.vue&#39;)
const User = () =&gt; import(&#39;../components/user.vue&#39;)
Vue.use(Router)
export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;,
      redirect: &quot;/home&quot;
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About
    &#125;,
    &#123;
      path: &quot;/user/:userid&quot;,
      component: User
    &#125;
  ],
  mode: &quot;history&quot;,
  linkActiveClass: &quot;active&quot;
&#125;)
//再导出项目看看。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-110.png" alt="vue2-110"></p>
<p>这个时候打包后的js文件就多了几个。一个路由对应一个js文件。只有在路边变化了以后, 才会去服务器请求相关的js文件。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(62)路由的嵌套</title>
    <url>/blog/vue2/62/</url>
    <content><![CDATA[<hr>
<h3 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h3><p>嵌套路由是一个很常见的功能, 比如在home页面中, 我们希望通过&#x2F;home&#x2F;news或者&#x2F;home&#x2F;message访问一些内容。一个路径映射一个组件, 访问这两个路径也会分别渲染两个组件。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-111.png" alt="vue2-111"></p>
<p>路由嵌套, 就像在App里面增加router-view一样, 既然要在home组件中嵌套, 就需要在home组件中增加一个router-view, 先创建需要嵌套显示的2个组件：homeNews.vue和homeMessage.Vue然后配置路由。</p>
<pre><code>import Vue from &#39;vue&#39;
import Router from &#39;vue-router&#39;

const Home = () =&gt; import(&#39;../components/home.vue&#39;)
const HomeNews = () =&gt; import(&#39;../components/homeNews.vue&#39;)
const HomeMessage = () =&gt; import(&#39;../components/homeMessage.vue&#39;)

const About = () =&gt; import(&#39;../components/about.vue&#39;)
const User = () =&gt; import(&#39;../components/user.vue&#39;)

Vue.use(Router)

export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;,
      redirect: &quot;/home&quot;
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home,
      children: [ //在Home路由配置下, 增加一个children, 在其内部配置子路由。
        &#123;
          path: &quot;news&quot;, //子路由不需要在前面加斜杠
          component: HomeNews
        &#125;,
        &#123;
          path: &quot;Message&quot;,
          component: HomeMessage
        &#125;
      ]
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About
    &#125;,
    &#123;
      path: &quot;/user/:userid&quot;,
      component: User
    &#125;
  ],
  mode: &quot;history&quot;,
  linkActiveClass: &quot;active&quot;
&#125;)
</code></pre>
<p>路由嵌套配置就完成了。但是还没有指定子路由组件显示在哪儿。</p>
<p>因为这两个子路由最终是显示在首页home中的。我们需要在home组件中, 增加一个router-view标签。</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h2&gt;我是首页&lt;/h2&gt;
    &lt;router-link to=&quot;/home/news&quot;&gt;新闻&lt;/router-link&gt;
    &lt;router-link to=&quot;/home/message&quot;&gt;消息&lt;/router-link&gt;
    &lt;hr /&gt;
    &lt;router-view&gt;&lt;/router-view&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default &#123;
    name: &quot;home&quot;
  &#125;
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-g2.gif" alt="vue2-g2"></p>
<p>可以看到新闻和消息可以显示了, 我们点击新闻, 已经展示了新闻内容了。但是切换到其他标签后, 再回到首页, 新闻没有默认展示, 还需要再点击一次新闻。修改路由配置让其默认展示。</p>
<pre><code>import Vue from &#39;vue&#39;
import Router from &#39;vue-router&#39;

const Home = () =&gt; import(&#39;../components/home.vue&#39;)
const HomeNews = () =&gt; import(&#39;../components/homeNews.vue&#39;)
const HomeMessage = () =&gt; import(&#39;../components/homeMessage.vue&#39;)

const About = () =&gt; import(&#39;../components/about.vue&#39;)
const User = () =&gt; import(&#39;../components/user.vue&#39;)

Vue.use(Router)

export default new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;,
      redirect: &quot;/home&quot;
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home,
      children: [
        &#123;
          path: &quot;&quot;,// 缺省值, 默认路径
          redirect: &quot;news&quot; //将默认路径重定向到news
        &#125;,
        &#123;
          path: &quot;news&quot;,
          component: HomeNews
        &#125;,
        &#123;
          path: &quot;message&quot;,
          component: HomeMessage
        &#125;
      ]
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About
    &#125;,
    &#123;
      path: &quot;/user/:userid&quot;,
      component: User
    &#125;
  ],
  mode: &quot;history&quot;,
  linkActiveClass: &quot;active&quot;
&#125;)
</code></pre>
<p>首页的时候做过重定向到&#x2F;home路径, 在&#x2F;home中, 又做了重定向到&#x2F;home&#x2F;news路径, 所以在打开home页面时, 路径会显示到host&#x2F;home&#x2F;news的位置。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(63)路由的参数传递</title>
    <url>/blog/vue2/63/</url>
    <content><![CDATA[<hr>
<h3 id="路由的参数传递"><a href="#路由的参数传递" class="headerlink" title="路由的参数传递"></a>路由的参数传递</h3><p>在动态路由那一节中, 我们就通过路由传递过参数了。这就是通过params传递参数的方式。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-105.png" alt="vue2-105"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-106.png" alt="vue2-106"></p>
<hr>
<h3 id="query传递参数"><a href="#query传递参数" class="headerlink" title="query传递参数"></a>query传递参数</h3><p>先创建一个profile.vue组件用于测试, 再配置profile的路由映射。</p>
<pre><code>import Vue from &#39;vue&#39;
import Router from &#39;vue-router&#39;
......
const Profile = () =&gt; import(&#39;../components/profile.vue&#39;)
Vue.use(Router)
export default new Router(&#123;
  routes: [
    ......
    &#123;
      path: &quot;/profile&quot;,
      component: Profile
    &#125;
  ],
  ......
&#125;)
</code></pre>
<p>再在App.vue中在增加一个router-link链接。</p>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;h2&gt;我是App组件&lt;/h2&gt;
    ......
    &lt;router-link to=&quot;/profile&quot;&gt;档案&lt;/router-link&gt;
    &lt;hr /&gt;
    &lt;router-view&gt;&lt;/router-view&gt;
  &lt;/div&gt;
&lt;/template&gt;
......
//但是我们要通过query传递参数
&lt;router-link to=&quot;/profile&quot;&gt;档案&lt;/router-link&gt;
//这里就不能再传一个字符串了。这里必须传一个对象。
&lt;router-link :to=&quot;&#123;path:&#39;/profile&#39;&#125;&quot;&gt;档案&lt;/router-link&gt;
//这个时候就可以在里面传递query参数了, 这里的query也是一个对象。
&lt;router-link :to=&quot;&#123;path:&#39;/profile&#39;, query:&#123;name:&#39;zhangsan&#39;, age:&#39;18&#39;&#125;&#125;&quot;&gt;档案&lt;/router-link&gt;

//现在看看profile组件页面的路径
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-112.png" alt="vue2-112"></p>
<p>scheme:&#x2F;&#x2F;host:port&#x2F;path?query#fragment</p>
<p>query参数是App组件传递的, 现在在profile组件中, 来获取参数。</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h2&gt;我是profile组件&lt;/h2&gt;
    &lt;div&gt;&#123;&#123;$route.query&#125;&#125;&lt;/div&gt;
    &lt;div&gt;或者：&lt;/div&gt;
    &lt;div&gt;&#123;&#123;routeQuery&#125;&#125;&lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default &#123;
    name: &quot;profile&quot;,
    computed: &#123;
      routeQuery()&#123;
        return this.$route.query
      &#125;
    &#125;
  &#125;
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
//至于query里面的具体参数, 就很简单了。
//这是个对象, 直接this.$route.query.name就行了。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-113.png" alt="vue2-113"></p>
<hr>
<h3 id="代码修改路由并传递参数"><a href="#代码修改路由并传递参数" class="headerlink" title="代码修改路由并传递参数"></a>代码修改路由并传递参数</h3><p>在App.vue中</p>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;h2&gt;我是App组件&lt;/h2&gt;
    &lt;span&gt;router-link:&lt;/span&gt;
    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot;&gt;首页&lt;/router-link&gt;
    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;
    &lt;router-link to=&quot;/user&quot; tag=&quot;button&quot; :to=&quot;&#39;/user/&#39;+userid&quot;&gt;用户&lt;/router-link&gt;
    &lt;router-link :to=&quot;&#123;path:&#39;/profile&#39;, query:&#123;name:&#39;zhangsan&#39;, age:&#39;18&#39;&#125;&#125;&quot;&gt;档案&lt;/router-link&gt;
    &lt;hr /&gt;
    &lt;span&gt;button:&lt;/span&gt;
    &lt;button @click=&quot;btnClick(&#39;home&#39;)&quot;&gt;首页&lt;/button&gt;
    &lt;button @click=&quot;btnClick(&#39;about&#39;)&quot;&gt;关于&lt;/button&gt;
    &lt;button @click=&quot;btnClick(&#39;user&#39;)&quot;&gt;用户&lt;/button&gt;
    &lt;button @click=&quot;btnClick(&#39;profile&#39;)&quot;&gt;关于&lt;/button&gt;
    &lt;hr /&gt;
    &lt;router-view&gt;&lt;/router-view&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  name: &#39;App&#39;,
  data()&#123;
    return &#123;
      userid: &quot;zhangsan&quot;
    &#125;
  &#125;,
  methods: &#123;
    btnClick(page)&#123;
      switch(page)&#123;
        case &quot;home&quot;:&#123;
          this.$router.push(&quot;/home&quot;)
          break;
        &#125;
        case &quot;about&quot;:&#123;
          this.$router.push(&quot;/about&quot;)
          break;
        &#125;
        case &quot;user&quot;:&#123;
          this.$router.push(&quot;/user/&quot; + this.userid)
          break;
        &#125;
        case &quot;profile&quot;:&#123;
          this.$router.push(&#123;
            path: &quot;/profile&quot;,
            query: &#123;
              name: &quot;zhangsan&quot;,
              age: 18
            &#125;
          &#125;)
          break;
        &#125;
      &#125;
    &#125;

  &#125;
&#125;
&lt;/script&gt;

&lt;style&gt;

&lt;/style&gt;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(64)导航守卫</title>
    <url>/blog/vue2/64/</url>
    <content><![CDATA[<hr>
<h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>单页面应用因为只有一个页面, 在路由之间互相跳转时, 页面的标题是不会变的。那么如果可以监听跳转的过程, 就可以根据路由的跳转, 做一些其他的操作, 比如修改页面标题。这就叫做<code>导航守卫</code>。导航守卫最主要的作用就是, 监听路由之间的跳转。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-g2.gif" alt="vue2-g2"></p>
<p>虽然利用组件的生命周期函数也可以实现修改页面标题的效果。但是每一个页面组件都需要加上生命周期函数created。然后再去设置页面标题。而全局的导航守卫可以只在路由中配置。&#x2F;router&#x2F;index.js</p>
<blockquote>
<p>全局守卫</p>
</blockquote>
<p>将直接导出的new Router抽离到变量router中, 导出router。</p>
<pre><code>const router = new Router(&#123;
  routes: [
    &#123;
      path: &quot;&quot;,
      redirect: &quot;/home&quot;
    &#125;,
    &#123;
      path: &quot;/home&quot;,
      component: Home,
      meta: &#123;
        title:&quot;首页&quot; //导航守卫监听跳转时, 可以获取此title
      &#125;,
      children: [
        &#123;
          path: &quot;&quot;,
          redirect: &quot;news&quot;
        &#125;,
        &#123;
          path: &quot;news&quot;,
          component: HomeNews
        &#125;,
        &#123;
          path: &quot;message&quot;,
          component: HomeMessage
        &#125;
      ]
    &#125;,
    &#123;
      path: &quot;/about&quot;,
      component: About,
      meta: &#123;
        title: &quot;关于&quot;
      &#125;
    &#125;,
    &#123;
      path: &quot;/user/:userid&quot;,
      component: User,
      meta: &#123;
        title: &quot;用户&quot;
      &#125;
    &#125;,
    &#123;
      path: &quot;/profile&quot;,
      component: Profile,
      meta: &#123;
        title: &quot;档案&quot;
      &#125;
    &#125;
  ],
  mode: &quot;history&quot;,
  linkActiveClass: &quot;active&quot;
&#125;)

//全局导航守卫
router.beforeEach((to, from, next) =&gt; &#123;
  //在实现全局守卫之前, 路由跳转是正常的。
  //一旦实现导航守卫, 那么就需要手动的去调用next以保证路由正常跳转。
  next()
  //从from跳转到to
  //document.title = to.meta.title
  //本来是可以通过to.meta.title获取标题, 但因为首页存在路由嵌套, 不能正常获取title
  document.title = to.matched[0].meta.title
&#125;)
export default router
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-g3.gif" alt="vue2-g3"></p>
<blockquote>
<p>独享守卫</p>
</blockquote>
<p>除了全局守卫外, 还有路由独享守卫以及组件内守卫。</p>
<pre><code>//路由独享守卫
const router = new Router(&#123;
  routes: [
    ......
    &#123;
      path: &quot;/about&quot;,
      component: About,
      meta: &#123;
        title: &quot;关于&quot; 
      &#125;,
      beforeEnter: (to, from, next) =&gt; &#123;
        //next()跳转到默认页面。
        //比如在进入页面之前判断登录, next(/login)跳转到指定页面。
      &#125;
    &#125;
  ]
  ......
&#125;)
</code></pre>
<blockquote>
<p>组件内守卫</p>
</blockquote>
<p>组件内也可以设置守卫。</p>
<pre><code>const Foo = &#123;
  template: `...`,
  beforeRouteEnter(to, from, next) &#123;
    // 在渲染该组件的对应路由被 confirm 前调用
    // 不！能！获取组件实例 `this`
    // 因为当守卫执行前, 组件实例还没被创建
  &#125;,
  beforeRouteUpdate(to, from, next) &#123;
    // 在当前路由改变, 但是该组件被复用时调用
    // 举例来说, 对于一个带有动态参数的路径 /foo/:id, 在 /foo/1 和 /foo/2 之间跳转的时候, 
    // 由于会渲染同样的 Foo 组件, 因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
    // 可以访问组件实例 `this`
  &#125;,
  beforeRouteLeave(to, from, next) &#123;
    // 导航离开该组件的对应路由时调用
    // 可以访问组件实例 `this`
  &#125;
&#125;
</code></pre>
<p>拓展：<strong>组件内守卫的beforeRouteLeave</strong>。</p>
<pre><code>//组件内守卫的beforeRouteLeave
//通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。
beforeRouteLeave (to, from, next) &#123;
  const answer = window.confirm(&#39;你确定要在未保存信息的情况下离开页面吗？&#39;)
  if (answer) &#123;
    next()
  &#125; else &#123;
    next(false)
  &#125;
&#125;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(65)状态保持keep-alive</title>
    <url>/blog/vue2/65/</url>
    <content><![CDATA[<hr>
<h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>当在首页选择了消息选项, 下面会显示消息列表, 但是当我们跳转到其他页, 再回到首页时, 默认显示了新闻。需求是组件记录我们选择过的选项, 而不是回到默认。比如选择了消息选项, 那么离开后再回来这个页面, 还是显示消息选项选中的状态。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-g4.gif" alt="vue2-g4"></p>
<p>每一次点击路由跳转后, 离开的页面会被销毁, 进入的页面会被重新渲染。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-g5.gif" alt="vue2-g5"></p>
<p><code>keep-alive</code>可以将它包裹的组件缓存下来, 避免销毁。而router-view也是一个组件, 所以可以使用keep-alive将router-view包裹, 以保持组件的操作状态。</p>
<pre><code>//修改App.Vue
&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;h2&gt;我是App组件&lt;/h2&gt;
    &lt;span&gt;router-link:&lt;/span&gt;
    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot;&gt;首页&lt;/router-link&gt;
    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;
    &lt;router-link to=&quot;/user&quot; tag=&quot;button&quot; :to=&quot;&#39;/user/&#39;+userid&quot;&gt;用户&lt;/router-link&gt;
    &lt;router-link :to=&quot;&#123;path:&#39;/profile&#39;, query:&#123;name:&#39;zhangsan&#39;, age:&#39;18&#39;&#125;&#125;&quot;&gt;档案&lt;/router-link&gt;
    &lt;hr /&gt;
    &lt;span&gt;button:&lt;/span&gt;
    &lt;button @click=&quot;btnClick(&#39;home&#39;)&quot;&gt;首页&lt;/button&gt;
    &lt;button @click=&quot;btnClick(&#39;about&#39;)&quot;&gt;关于&lt;/button&gt;
    &lt;button @click=&quot;btnClick(&#39;user&#39;)&quot;&gt;用户&lt;/button&gt;
    &lt;button @click=&quot;btnClick(&#39;profile&#39;)&quot;&gt;档案&lt;/button&gt;
    &lt;hr /&gt;
    &lt;!-- 使用keep-alive将router-view包裹 --&gt;
    &lt;keep-alive&gt;
      &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/keep-alive&gt;
  &lt;/div&gt;
&lt;/template&gt;
......
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-g6.gif" alt="vue2-g6"></p>
<p>经测试, keep-alive包裹的router-view会缓存, 因为只created了一次, 也没有销毁。但是并没有保存操作, 仍然是默认的新闻页面。问题出在路由配置中router&#x2F;index.js。</p>
<pre><code>......
&#123;
  path: &quot;/home&quot;,
  component: Home,
  meta: &#123;
    title:&quot;首页&quot;
  &#125;,
  children: [
    //缺省情况下, 路由自动跳转到了news
    //将其注释掉。
    //&#123;
    //  path: &quot;&quot;,
    //  redirect: &quot;news&quot; 
    //&#125;,
    &#123;
      path: &quot;news&quot;,
      component: HomeNews
    &#125;,
    &#123;
      path: &quot;message&quot;,
      component: HomeMessage
    &#125;
  ]
  ......
&#125;
</code></pre>
<p>虽然注释掉了, 但是每次进入首页时, 新闻和消息都未显示, 需要点击才会显示。这里需要其他方法去实现了。</p>
<p>来到home.Vue中, 需要用到另一个生命周期函数activated和组件内导航守卫beforeRouteLeave。</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h2&gt;我是首页&lt;/h2&gt;
    &lt;router-link to=&quot;/home/news&quot;&gt;新闻&lt;/router-link&gt;
    &lt;router-link to=&quot;/home/message&quot;&gt;消息&lt;/router-link&gt;
    &lt;hr /&gt;
    &lt;router-view&gt;&lt;/router-view&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default &#123;
    name: &quot;home&quot;,
    data()&#123;
      return &#123;
        homestate: &quot;/home/news&quot; //默认状态变量。
      &#125;
    &#125;,
    //当页面处于激活状态时执行。
    activated() &#123;
      this.$router.push(this.homestate) //页面激活时, 改变路由到homestate。
    &#125;,
    //组件内守卫, 当页面离开时执行。
    beforeRouteLeave(to, from, next) &#123;
      this.homestate = this.$route.path //离开页面时, 修改homestate为, 当前路由地址。
      next()
    &#125;
  &#125;
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-g7.gif" alt="vue2-g7"></p>
<p><code>似乎时解决了问题。</code><br>可以保存首页的新闻和消息状态了。<br>但是重复点击首页的时候。下方的列表都消失了。！！后面再解决</p>
<p><strong>keep-alive还有两个属性, include和exclude, 意思是包含或者排除, 作用是设定某些组件, 缓存或者不缓存, 里面只需要设置组件中name的属性值即可。</strong></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-114.png" alt="vue2-114"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(66)Vuex的概念和作用解析</title>
    <url>/blog/vue2/66/</url>
    <content><![CDATA[<hr>
<h3 id="Vuex的概念和作用解析"><a href="#Vuex的概念和作用解析" class="headerlink" title="Vuex的概念和作用解析"></a>Vuex的概念和作用解析</h3><p><strong>Vuex就是一个状态管理的工具</strong>。</p>
<p>怎么去理解呢。试想, 如果我们有若干个组件, 需要使用同一个变量(状态, 比如登录状态),  那么这个变量, 我们是定义到哪一个组件中呢, 很明显, 不管定义到哪一个组件都是不合适的。 一般情况下我们会定义一个全局变量来存放。而Vuex就是对这些全局变量进行管理的大管家。Vuex管理的状态,  在组件对这些状态进行修改时, 它还是响应式的！！！</p>
<p>一般情况下, 什么状态需要共享, 而要放到Vuex里面呢, 比如：用户登录状态、用户信息、地理位置信息、商品收藏、购物车中的物品等等。</p>
<hr>
<h3 id="单页面状态树"><a href="#单页面状态树" class="headerlink" title="单页面状态树"></a>单页面状态树</h3><p>在此之前, 我们先了解一下什么是单界面状态管理。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-116.png" alt="vue2-116"></p>
<p>在单个组件中, 进行状态管理是非常简单的。上面的State就是vue示例中的data数据, 这些数据绑定在View视图中, 即template中的元素, Action则是对这些数据进行操作的方法。在vue实例中的State都是响应式的。</p>
<hr>
<h3 id="从单页面状态到多页面状态"><a href="#从单页面状态到多页面状态" class="headerlink" title="从单页面状态到多页面状态"></a>从单页面状态到多页面状态</h3><p>要使用vuex就要先安装, 当然在创建项目的时候也可以选择vuex为项目依赖项。</p>
<pre><code>npm install vuex --save
</code></pre>
<p>安装完成后就可以对vuex进行配置了。</p>
<pre><code>//在项目文件夹src下, 新建一个store文件夹, 在文件夹内新建一个index.js
//然后在index.js中进行配置

import Vue from &quot;vue&quot;
import Vuex from &quot;vuex&quot;
//1、安装插件
Vue.use(Vuex)
//2、创建对象
const store = new Vuex.Store(&#123;
  
&#125;)
//3、导出对象
export default store

//然后在main.js中进行导入挂载到Vue实例中。
import Vue from &#39;vue&#39;
import App from &#39;./App.vue&#39;
import router from &#39;./router&#39;
import store from &#39;./store&#39;  //导入

Vue.config.productionTip = false

new Vue(&#123;
  router,
  store, //挂载
  render: h =&gt; h(App)
&#125;).$mount(&#39;#app&#39;)
//这样它会自动在Vue中增加一个$store
//在其他组件中, 可以直接通过$store访问Vuex中配置的所有状态。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-117.png" alt="vue2-117"></p>
<hr>
<h3 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h3><pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  // 所有状态都是保存在state对象中的。
  state: &#123;
    
  &#125;,
  // 而修改state中的状态只能在mutations中操作。
  mutations: &#123;
    
  &#125;,
  //当有一些异步操作的时候, 就不要在mutations处理了, 要在actions中进行处理。
  //在actions里处理完毕后, 再通过mutations对状态进行修改。
  actions: &#123;
    
  &#125;,
  //getters就类似于组件中的计算属性computed。
  getters: &#123;
    
  &#125;,
  //对状态划分模块, 一个项目涉及到的状态可能很多, 都放在一个state中, 会显得混乱。
  //所以modules的作用就是对, 不同模块中的状态进行划分。
  modules: &#123;
    
  &#125;
&#125;)
export default store
</code></pre>
<blockquote>
<p>state</p>
</blockquote>
<p>Vuex提出使用<strong>单一状态树</strong>, 英文名称是Single Source of Truth, 也可以翻译成<strong>单一数据源</strong>。</p>
<p>这里有个例子, 每个人都有很多信息, 比如户口信息, 社保记录, 结婚信息, 医疗信息, 教育信息等等,  都是在不同的管理部门中的, 虽然这种方式保存数据, 能一定程度保证大部分信息的安全性。但是如果需要办理某一个业务时,  需要以上各种证明时, 就需要跑个各个部门去办理。这种保存信息的方案, 不仅仅效率低, 而且不方便, 以后维护也是一个庞大的工程。</p>
<p>在前面的例子中, 我们只new了一个Vuex.Store, 在其中配置状态, 那么可不可以new多个Vuex.Store对象呢, 就像上面的多个部门一样。当然是可以, 但后期管理和维护会变得困难。在Vuex设计 的时候就提出单一状态树, 不管有再多的状态, 我们只需要new一个Vuex.Store对象 , 项目中涉及的所有状态 都放在这个new出的对象中即可。这样, 在项目的任何地方, 请求或修改状态时, 都通过这一个对象进行管理。而不至于混乱。</p>
<blockquote>
<p>其他补充</p>
</blockquote>
<p>全局css样式。</p>
<pre><code>在App.vue中的css是全局的样式。
可以单独写一个css文件, 在App.vue的style中引用就可以了。
@import &quot;global.css的路径&quot;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>(67)Vuex的state</title>
    <url>/blog/vue2/67/</url>
    <content><![CDATA[<hr>
<h3 id="Vuex的配置"><a href="#Vuex的配置" class="headerlink" title="Vuex的配置"></a>Vuex的配置</h3><p>在对Vuex进行配置时, 里面的对象还是比较固定的, 包括：state、mutations、actions、getters、modules这五个。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;

Vue.use(Vuex)

const store = new Vuex.Store(&#123;
  state: &#123;
    
  &#125;,
  mutations: &#123;
    
  &#125;,
  actions: &#123;
    
  &#125;,
  getters: &#123;
    
  &#125;,
  modules: &#123;
    
  &#125;
&#125;)

export default store
</code></pre>
<hr>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>state就是保存状态的。比如下例中的counter变量。在其他组件中, 就可以直接使用<span>{</span>{$store.state.counter}}的方式访问counter。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
    counter:0
  &#125;
&#125;)
export default store
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-118.png" alt="vue2-118"></p>
<hr>
<h3 id="state状态修改的方式"><a href="#state状态修改的方式" class="headerlink" title="state状态修改的方式"></a>state状态修改的方式</h3><p>虽然可以直接对$store.state.counter进行修改,但是从官方的状态管理图例显示, 显然并不建议这么做。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-vuex.png" alt="vue2-vuex"></p>
<p>它要求组件Dispatch分发一个Actions行为,在Actions中Commit提交, 提交到Mutations中。意思是不要通过其他方式修改state, 只能通过Mutations对状态进行修改,这里还涉及到一个Devtools游览器插件, 它可以跟踪状态的修改。当然前提就是, 必须按官方的要求, 在Mutations中, 对状态进行修改。也可以绕过Actions, 直接通过Mutations对状态进行修改。<br>但是！！！这种修改仅限于, 同步操作。如果修改状态时, 存在异步操作, 那么就必须通过Actions了。Actios可以保证状态在修改时, 也能被Devtools记录到。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-119.png" alt="vue2-119"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>(69)Mutation的响应规则</title>
    <url>/blog/vue2/69/</url>
    <content><![CDATA[<hr>
<h3 id="Mutation的响应规则"><a href="#Mutation的响应规则" class="headerlink" title="Mutation的响应规则"></a>Mutation的响应规则</h3><p>Vuex的store中的state是响应式的, 当state中的数据发生改变时, Vue组件会自动更新。<br>但是, 这就要求我们必须遵守一些Vuex对应的规则。</p>
<blockquote>
<p>提前在store中初始化好所需的属性</p>
</blockquote>
<p>提前在store中初始化好所需的属性, 他们就会自动的加入Vue的响应式系统中, 当他们发生更改的时候, 页面中使用这些数据的地方页面立即发生变。</p>
<pre><code>import Vue from &quot;vue&quot;
import Vuex from &quot;vuex&quot;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
    counter: 0,  //提前在store中初始化好所需的属性
    info: &#123;
      name: &quot;zhangsan&quot;, //他们就会自动的加入Vue的响应式系统中
      age: 18  //当他们发生更改的时候, 页面中使用这些数据的地方页面立即发生变化。
    &#125;
  &#125;,
  mutations: &#123;
    increment(state)&#123;
      state.counter++
    &#125;,
    decrement(state)&#123;
      state.counter--
    &#125;
  &#125;
&#125;)
export default store
</code></pre>
<p>但是, <strong>这种方式就不是响应式</strong>的了。</p>
<pre><code>mutations: &#123;
  updateInfo(state)&#123;
    state.info[&quot;height&quot;] = 180 //给info新增了一个height属性。
    delete state.info.age  //删除了info一个原有的属性。
  &#125;
&#125;
//在页面调用info的地方并不会响应式。
//height并没有被加入到响应式系统中, 删除的age也不会在页面响应式。
</code></pre>
<hr>
<h3 id="在state中动态添加或删除状态。"><a href="#在state中动态添加或删除状态。" class="headerlink" title="在state中动态添加或删除状态。"></a>在state中动态添加或删除状态。</h3><blockquote>
<p>Vue.set</p>
</blockquote>
<p>当需要在state中动态添加或删除状态时, 可以使用Vue.set, 如Vue.set(obj, ‘newState’, 123)。</p>
<pre><code>mutations: &#123;
  updateInfo(state)&#123;
    Vue.set(state.info, &quot;height&quot;, 180) //这样就可以将新增的状态, 添加到响应式系统中。
    Vue.delete(state.info, &quot;age&quot;)   //删除age, 并且在调用该状态的地方响应式。
  &#125;
&#125;
</code></pre>
<blockquote>
<p>用新对象给旧对象重新赋值</p>
</blockquote>
<p>用新对象给旧对象重新赋值。</p>
<hr>
<h3 id="Mutation常量类型"><a href="#Mutation常量类型" class="headerlink" title="Mutation常量类型"></a>Mutation常量类型</h3><p>将mutations中的方法名变成一个常量字符串。</p>
<pre><code>//在Mutation中写
mutations: &#123;
  updateInfo(state)&#123;
    Vue.set(state.info, &quot;height&quot;, 180)
  &#125;
&#125;
//在组件方法中使用
this.$store.commit(&quot;updateInfo&quot;)

//这个updateInfo在两个文件中, 都使用到了。
//在实际项目开发中, 有人在commit的时候去Mutation中复制, 这样不太容易出错。
//但也有人喜欢手写, 这个时候就有写错的可能了。
</code></pre>
<p>我们在store文件夹下新建一个mutationsType.js的文件, 在里面定义一些常量导出。</p>
<pre><code>export UODATEINFO = &quot;updateInfo&quot;

//在store文件夹下的index.js中导入
import &#123;UODATEINFO&#125; from &quot;./mutationsType.js&quot;
//那么在定义mutations的时候, 就可以
mutations: &#123;
  [UODATEINFO](state)&#123;
    Vue.set(state.info, &quot;height&quot;, 180)
  &#125;
&#125;
</code></pre>
<p>在组件内使用的时候。</p>
<pre><code>import &#123;UODATEINFO&#125; from &quot;./mutationsType.js&quot;
//在组件方法中使用
this.$store.commit(UODATEINFO)
</code></pre>
<p>这个UODATEINFO就是Mutation常量。它将多个地方需要使用的字符串统一成了UODATEINFO。当需要对那个字符串进行修改时, 也只需要在mutationsType.js中修改即可。</p>
<p>这也是官方推荐的形式。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>(68)状态修改和mutations</title>
    <url>/blog/vue2/68/</url>
    <content><![CDATA[<hr>
<h3 id="状态修改和mutations"><a href="#状态修改和mutations" class="headerlink" title="状态修改和mutations"></a>状态修改和mutations</h3><p>Vuex的store状态的唯一更新方式就是提交Mutation。我们先来了解一下通过mutations对state进行同步修改。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
    counter: 0
  &#125;,
  mutations: &#123;
    //自定义mutations方法, 这个方法默认有一个参数state
    //这个stage对应的就是上面的state对象。
    //第一个参数就是state, 写成aaa它也是state
    increment(state)&#123;
      state.counter++
    &#125;,
    decrement(state)&#123;
      state.counter--
    &#125;
  &#125;
&#125;)
export default store

//在组件中操作时, 最好在组件中定义一个方法, 在方法中, 去调用mutations中的事件。
&lt;button @click=&quot;addition&quot;&gt;&lt;/button&gt;
&lt;button @click=&quot;subtraction&quot;&gt;&lt;/button&gt;

methods: &#123;
  addition()&#123;
    this.$store.commit(&quot;increment&quot;)
  &#125;,
  subtraction()&#123;
    this.$store.commit(&quot;decrement&quot;)
  &#125;
&#125;

//这样就可以通过mutations对状态进行修改了。
</code></pre>
<p>在Mutation中定义的方法, 可以将它看成两部分。</p>
<pre><code>increment(state)&#123;
  state.counter++
&#125;
/*----------------------------------------*/
increment &lt;---这个是事件类型   
          
          (state)&#123;  &lt;---这一块是回调函数
  state.counter++
&#125;
</code></pre>
<hr>
<h3 id="Mutation中接收页面参数"><a href="#Mutation中接收页面参数" class="headerlink" title="Mutation中接收页面参数"></a>Mutation中接收页面参数</h3><pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
    counter: 0
  &#125;,
  mutations: &#123;
    increment(state)&#123;
      state.counter++
    &#125;,
    decrement(state)&#123;
      state.counter--
    &#125;,
    //第二个参数, 可以是页面传递的参数。
    incrementCount(state, num)&#123;
      state.counter += num
    &#125;
  &#125;
&#125;)
export default store

//在组件中使用
&lt;button @click=&quot;addcount(10)&quot;&gt;&lt;/button&gt;

methods: &#123;
  addcount(num)&#123;
    //这种提交事件, 还携带参数的方式, 参数被称为是提交事件的payload, 负载。
    this.$store.commit(&quot;incrementCount&quot;, num)
  &#125;
&#125;
</code></pre>
<hr>
<h3 id="Mutation提交风格"><a href="#Mutation提交风格" class="headerlink" title="Mutation提交风格"></a>Mutation提交风格</h3><pre><code>//前面在组件中提交Mutation修改状态
this.$store.commit(&quot;incrementCount&quot;, num) //这种方式, 就是普通提交风格

//Vue还提供了另外一种风格, 她是一个包含type属性的对象。
this.$store.commit(&#123;
  type: &quot;incrementCount&quot;
  num: num
&#125;)
//注意！！：使用这种风格提交时, 在Mutation中的方法。
incrementCount(state, num)&#123;
  state.counter += num //这里就不能这么写了。
&#125;
//因为此时的num就不是再是前面调用时传的10了, 而是一个对象。
其中包括：&#123;type: &#39;incrementCount&#39;, num: 10&#125;
//所以在Mutation中的参数位置, 写成payload更合适, 表示一个负载对象
incrementCount(state, payload)&#123;
  state.counter += payload.num
&#125;

//这也是为什么。前面说的, 在Mutation中定义的方法, 可以将它看成两部分。
//这个方法名, 被称为事件类型。在这种提交风格中, 它的type就是要提交的事件类型。
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>(7)课后作业-1</title>
    <url>/blog/vue2/7/</url>
    <content><![CDATA[<hr>
<h3 id="课后作业-1"><a href="#课后作业-1" class="headerlink" title="课后作业-1"></a>课后作业-1</h3><p><strong>利用v-for绑定List数据</strong><br><strong>要求点击某个标签时, 改变当前文本颜色</strong>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.colorBlue</span>&#123;<span class="attribute">color</span>: blue;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(shuju,suoyin) in List&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:key</span>=<span class="string">&quot;suoyin&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:class</span>=<span class="string">&quot;&#123;colorBlue:suoyin===thisIndex&#125;&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">click</span>=<span class="string">&quot;setThisIndex(suoyin)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123;suoyin&#125;&#125;-&#123;&#123;shuju&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">thisIndex</span>: <span class="number">0</span>, <span class="comment">// 默认索引为thisIndex的选项为选中状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">List</span>:[<span class="string">&quot;星际穿越&quot;</span>,<span class="string">&quot;大话西游&quot;</span>,<span class="string">&quot;少年派&quot;</span>,<span class="string">&quot;盗梦空间&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">setThisIndex</span>:<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">thisIndex</span>=index <span class="comment">//点击时改变thisIndex记录的索引值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(70)state变化和getters</title>
    <url>/blog/vue2/70/</url>
    <content><![CDATA[<hr>
<h3 id="state变化和getters"><a href="#state变化和getters" class="headerlink" title="state变化和getters"></a>state变化和getters</h3><p>当state中的某些状态, 需要经过一定的变化(例如：截取、拼接等)之后才能使用时,  就可以使用getters, 它类似于组件中的计算属性computed.</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
    counter: 1000
  &#125;,
  getters: &#123;
    //定义getters, 这个里面也默认有一个参数stage, 对应上面的stata状态。
    powercounter(state)&#123;
      return state.counter * state.counter
    &#125;
  &#125;
&#125;)
export default store
</code></pre>
<p>在组件中使用时</p>
<pre><code>&lt;div&gt;&#123;&#123;$store.getters.powercounter&#125;&#125;&lt;/div&gt;
</code></pre>
<p><strong>getters中传入getters</strong>。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
    counter: 1000
  &#125;,
  getters: &#123;
    powercounter(state)&#123;
      return state.counter * state.counter
    &#125;,
    //将getters传入, 用于访问getters中的其他方法。
    //注意：第二个参数就是getters, 写成aaa它也是getters。
    powercounterde1(state, getters)&#123;
      return getters.powercounter - 1
    &#125;
  &#125;
&#125;)
export default store
</code></pre>
<p>在组件中使用时</p>
<pre><code>&lt;div&gt;&#123;&#123;$store.getters.powercounterde1&#125;&#125;&lt;/div&gt;
</code></pre>
<p><strong>页面在getters中传入数据</strong>。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
    counter: 1000
  &#125;,
  getters: &#123;
    powercounter(state)&#123;
      return state.counter * state.counter
    &#125;,
    powercounterde1(state, getters)&#123;
      return getters.powercounter - 1
    &#125;,
    //用户在使用时需要传入一个参数。然后会返回结果。
    powercounterpage(state)&#123;
      return function(num)&#123;
        return state.counter * num
      &#125;
    &#125;
    
    //简写
    //powercounterpage(state)&#123;
    //  return num =&gt; &#123; return state.counter * num &#125;
    //&#125;
    
  &#125;
&#125;)
export default store
</code></pre>
<p>在组件中使用时</p>
<pre><code>&lt;div&gt;&#123;&#123;$store.getters.powercounterpage(100)&#125;&#125;&lt;/div&gt;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>(71)vuex的actions</title>
    <url>/blog/vue2/71/</url>
    <content><![CDATA[<hr>
<h3 id="vuex的actions"><a href="#vuex的actions" class="headerlink" title="vuex的actions"></a>vuex的actions</h3><p>在Mutation中对state状态修改, 只能是同步修改, 不能有异步操作。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
    info: &#123;
      name: &#39;kobe&#39;,
      height: 1.98,
      age: 40
    &#125;
  &#125;,
  mutations: &#123;
    updateInfo(state)&#123;
      state.info.name = &#39;coderwhy&#39;
    &#125;
  &#125;
&#125;)
export default store
</code></pre>
<p>在组件中使用时</p>
<pre><code>&lt;div @click=&#39;update&#39;&gt;更新&lt;/div&gt;

methods: &#123;
  update()&#123;
    this.$store.commit(&#39;updateInfo&#39;)
  &#125;
&#125;
</code></pre>
<p>如果加入异步操作呢</p>
<pre><code>...
  mutations: &#123;
    updateInfo(state)&#123;
      setTimeout(() =&gt;&#123;
        state.info.name = &#39;coderwhy&#39;
      &#125;,1000)
    &#125;
  &#125;
...
export default store
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-120.png" alt="vue2-120"></p>
<p>浏览器插件就跟踪不到状态变化了。在项目开发调试时, 是及其不友好的。异步操作只能在actios中进行。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
    info: &#123;
      name: &#39;kobe&#39;,
      height: 1.98,
      age: 40
    &#125;
  &#125;,
  mutations: &#123;
    updateInfo(state)&#123;
      state.info.name = &#39;coderwhy&#39;
    &#125;
  &#125;,
  actions: &#123;
    //在mutations和getters中定义属性, 都有一个默认参数state
    //在actions中定义属性, 也有一个默认参数, 但是它是context(上下文)
    //这个context可以理解为上面定义的store对象。
    actionUpdate(context)&#123;
      setTimeout(() =&gt;&#123; //setTimeout模拟异步操作
        
        //下面这个是不行的, 修改状态的唯一途径, 只能是mutations
        //context.state.info.name = &#39;coderwhy&#39;
        
        context.commit(&#39;updateInfo&#39;)
        
      &#125;, 1000)
    &#125;
  &#125;
&#125;)
export default store
</code></pre>
<p>而在组件内使用时</p>
<pre><code>...
methods: &#123;
  update()&#123;
    //这里就不能commit了, commit是提交mutations中的方法。
    //只能使用dispatch, 提交actios中的方法。
    this.$store.dispatch(&#39;actionUpdate&#39;)
  &#125;
&#125;
...
</code></pre>
<p>也可以携带参数</p>
<pre><code>// *.vue
methods: &#123;
  update()&#123;
    this.$store.dispatch(&#39;actionUpdate&#39;, &quot;我是传递过去的值&quot;)
  &#125;
&#125;
 
// actions
actionUpdate(context, payload)&#123;
  setTimeout(() =&gt;&#123;
    console.log(payload)
    context.commit(&#39;updateInfo&#39;)
  &#125;, 1000)
&#125;
</code></pre>
<p>因为是在actios中的异步操作修改的状态。比如网络请求, 那么页面要如何知道, 状态已经修改成功了呢, 可以返回一个Promise。</p>
<pre><code>// actions
actionUpdate(context, payload)&#123;
  return new Promise((resolve, reject) =&gt;&#123;
    setTimeout(() =&gt;&#123;
      console.log(payload)
      context.commit(&#39;updateInfo&#39;)
      
      resolve(&#39;修改成功&#39;)
    &#125;, 1000)
  &#125;)
&#125;

// *.vue
methods: &#123;
  update()&#123;
    this.$store.dispatch(&#39;actionUpdate&#39;, &quot;我是传递过去的值&quot;).then(res =&gt; &#123;
      console.log(res)
    &#125;)
  &#125;
&#125;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>(72)vuex的modules</title>
    <url>/blog/vue2/72/</url>
    <content><![CDATA[<hr>
<h3 id="vuex的modules"><a href="#vuex的modules" class="headerlink" title="vuex的modules"></a>vuex的modules</h3><p>随着项目的开发, 页面的状态state可能越来越多, 而vuex又推荐使用单一状态树, modules的作用就是对, 不同模块中的状态state进行划分, 形成单独的模块。而每个模块又可以有自己单独的state、getters、mutations、actios、甚至modules, 当然, 一般模块内的modules, 一般就不用了。这种嵌套反而使项目变得复杂。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)
const store = new Vuex.Store(&#123;
  state: &#123;
  &#125;,
  modules: &#123;
    
    moduleA: &#123;
      state: &#123;&#125;,
      getters: &#123;&#125;,
      actios: &#123;&#125;,
      mutations: &#123;&#125;
    &#125;,
    
    moduleB: &#123;
      state: &#123;&#125;,
      getters: &#123;&#125;,
      actios: &#123;&#125;,
      mutations: &#123;&#125;
    &#125;
    
  &#125;
&#125;)
export default store
</code></pre>
<hr>
<h3 id="modules中的mutations"><a href="#modules中的mutations" class="headerlink" title="modules中的mutations"></a>modules中的mutations</h3><p>当然, 我们也可以对它进行抽离。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)

const moduleA = &#123;
  state: &#123;
    name: &#39;zhangsan&#39;
  &#125;,
  getters: &#123;&#125;,
  actios: &#123;&#125;,
  mutations: &#123;
    updateName(state, payload)&#123;
      state.name = payload
    &#125;
  &#125;
&#125;
    
const moduleB = &#123;
  state: &#123;&#125;,
  getters: &#123;&#125;,
  actios: &#123;&#125;,
  mutations: &#123;&#125;
&#125;

const store = new Vuex.Store(&#123;
  state: &#123;
  &#125;,
  modules: &#123;
    a: moduleA, //这个模块, 最终会被放到store中的state中。
    b: moduleB
  &#125;
&#125;)
export default store
</code></pre>
<p>在组件中使用 </p>
<pre><code>&lt;div&gt;&#123;&#123;$store.state.a&#125;&#125;&lt;/div&gt;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-121.png" alt="vue2-121"></p>
<p>那模块中的mutations该如何提交呢, 跟前面是一样的。但是注意, 模块中的mutations定义的名字, 不要和store中mutations定义的名字一样。它的原理是, 先从store中mutations找, 找不到再去模块中找。</p>
<pre><code>methods: &#123;
  update()&#123;
    this.$store.commit(&#39;updateName&#39;, &#39;lisi&#39;)
  &#125;
&#125;
</code></pre>
<hr>
<h3 id="modules中的getters"><a href="#modules中的getters" class="headerlink" title="modules中的getters"></a>modules中的getters</h3><p>调用模块中的getters, 也和mutations一样, 只需要注意模块中的getters名, 不要和store中的getters名重复即可。它的原理也是, 先从store中的getters找, 找不到再去模块中找。前面我们知道, getters中可以传入两个变量state和getters。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)

const moduleA = &#123;
  state: &#123;
    name: &#39;zhangsan&#39;
  &#125;,
  getters: &#123;
    fullname1(state)&#123;
      return state.name + &#39;111&#39;
    &#125;,
    fullname2(state, getters)&#123;
      return getters.fullname1 + &#39;222&#39;
    &#125;,
    //在模块中, getters可以有第三个参数rootState
    //传入store对象中的state
    fullname3(state, getters, rootState)&#123;
      return getters.fullname2 + rootState.age
    &#125;
  &#125;
&#125;

const store = new Vuex.Store(&#123;
  state: &#123;
    age:18
  &#125;,
  modules: &#123;
    a: modulesA    
  &#125;
&#125;)
export default store
</code></pre>
<hr>
<h3 id="modules中的actios"><a href="#modules中的actios" class="headerlink" title="modules中的actios"></a>modules中的actios</h3><p>我们知道, actions中有个context(上下文的意思), 在store中的actions, context是指store。但在模块中的context, 表示在moduleA中。而它commit的mutations只会在moduleA中找。打印这个context, 里面除了commit, 还有dispatch、getters、rootGetters、rootState、state。</p>
<pre><code>import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
Vue.use(Vuex)

const moduleA = &#123;
  state: &#123;
    name: &#39;zhangsan&#39;
  &#125;,
  mutations: &#123;
    resetName(state, payload)&#123;
      state.name = payload
    &#125;
  &#125;
  actions: &#123;
    updateName(context)&#123;
      setTimeout(() =&gt; &#123;
        context.commit(&#39;resetName&#39;, &#39;lisi&#39;)
      &#125;, 1000)
    &#125;
  &#125;
&#125;

const store = new Vuex.Store(&#123;
  state: &#123;
    age:18
  &#125;,
  modules: &#123;
    a: modulesA    
  &#125;
&#125;)
export default store
</code></pre>
<p>在组件中使用时,也和前面一样。</p>
<pre><code>this.$store.dispatch(&#39;updateName&#39;)
</code></pre>
<hr>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>前面说明了模块中actions的context, 还包含了其他很多东西commit、dispatch、getters、rootGetters、rootState、state。</p>
<pre><code>const moduleA = &#123;
  state: &#123;
    name: &#39;zhangsan&#39;
  &#125;,
  actios: &#123;
    updateName(context)&#123;
      setTimeout(() =&gt; &#123;
        console.log(context)
      &#125;, 1000)
    &#125;
  &#125;
&#125;
//在ES6中, 还可以用另一种写法, 叫做对象的解构。
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-122.png" alt="vue2-122"></p>
<pre><code>//它跟变量名一一对应, 跟顺序无关
//所以上面的的context还可以这样写。

const moduleA = &#123;
  state: &#123;
    name: &#39;zhangsan&#39;
  &#125;,
  actios: &#123;
    //用一个对象将要使用的对象内容包裹。
    updateName(&#123;state, rootState, getters&#125;)&#123;
      setTimeout(() =&gt; &#123;
        console.log(state.name)
      &#125;, 1000)
    &#125;
  &#125;
&#125;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>(73)store文件夹的目录组织</title>
    <url>/blog/vue2/73/</url>
    <content><![CDATA[<hr>
<h3 id="store文件夹的目录组织"><a href="#store文件夹的目录组织" class="headerlink" title="store文件夹的目录组织"></a>store文件夹的目录组织</h3><p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-123.png" alt="vue2-123"></p>
<p>除了state以外, 官方推荐, 将store对象中的mutations、actions、getters抽离成一个单独的js文件, 当然state可以抽离, 也可以不抽离。而modules就需要新建一个文件夹, 在文件夹内创建各个模块的js文件。</p>
<pre><code>//比如：在新的js文件中。直接导出一个对象放mutations
export default &#123;
  //这里面就放mutations的方法。
&#125;

//再在index.js中导入
import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
import mutations from &#39;./mutations.js&#39;
import actions from &#39;./actions.js&#39;
import getters from &#39;./getters.js&#39;
import modulesA from &#39;./modules/modulesA.js&#39;
import modulesB from &#39;./modules/modulesB.js&#39;

Vue.use(Vuex)

const state = &#123;
  name: &#39;zhangsan&#39;
&#125;

const store = new Vuex.Store(&#123;
  state,
  mutations,
  actions,
  getters,
  modules: &#123;
    modulesA,
    modulesB
  &#125;
&#125;)

export default store
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>(74)axios网络请求</title>
    <url>/blog/vue2/74/</url>
    <content><![CDATA[<hr>
<h3 id="axios网络请求基本用法"><a href="#axios网络请求基本用法" class="headerlink" title="axios网络请求基本用法"></a>axios网络请求基本用法</h3><p>axios(config)默认是get请求方式。支持ES6的promise, 所以只需要在then后面拿返回结果。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">url</span>:<span class="string">&quot;https://httpbin.org/ip&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">origin</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>也可以指定请求方式</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">url</span>:<span class="string">&quot;https://httpbin.org/ip&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">origin</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>携带参数1</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">url</span>:<span class="string">&quot;https://httpbin.org/ip?pname=自定义数据1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">config</span>.<span class="property">url</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>携带参数2</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">url</span>:<span class="string">&quot;https://httpbin.org/ip&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">params</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">pname</span>:<span class="string">&quot;自定义数据2&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">config</span>.<span class="property">params</span>.<span class="property">pname</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="axios-request-config"><a href="#axios-request-config" class="headerlink" title="axios.request(config)"></a>axios.request(config)</h3><hr>
<h3 id="axios-get-url-config"><a href="#axios-get-url-config" class="headerlink" title="axios.get(url[,config])"></a>axios.get(url[,config])</h3><hr>
<h3 id="axios-delete-url-config"><a href="#axios-delete-url-config" class="headerlink" title="axios.delete(url[,config])"></a>axios.delete(url[,config])</h3><hr>
<h3 id="axios-head-url-config"><a href="#axios-head-url-config" class="headerlink" title="axios.head(url[,config])"></a>axios.head(url[,config])</h3><hr>
<h3 id="axios-post-url-data-config"><a href="#axios-post-url-data-config" class="headerlink" title="axios.post(url[,data,[,config]])"></a>axios.post(url[,data,[,config]])</h3><hr>
<h3 id="axios-put-url-config"><a href="#axios-put-url-config" class="headerlink" title="axios.put(url[,config])"></a>axios.put(url[,config])</h3><hr>
<h3 id="axios-patch-url-config"><a href="#axios-patch-url-config" class="headerlink" title="axios.patch(url[,config])"></a>axios.patch(url[,config])</h3><hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>(75)axios并发请求</title>
    <url>/blog/vue2/75/</url>
    <content><![CDATA[<hr>
<h3 id="axios并发请求"><a href="#axios并发请求" class="headerlink" title="axios并发请求"></a>axios并发请求</h3><p><strong>如果我们需要同时对多个接口请求数据</strong>, 并且在所有接口都返回了数据后, 才能进行数据操作时。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  axios.<span class="title function_">all</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">url</span>:<span class="string">&quot;https://httpbin.org/ip&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>:<span class="string">&quot;get&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">url</span>:<span class="string">&quot;https://httpbin.org/post&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  ]).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results[<span class="number">0</span>].<span class="property">data</span>.<span class="property">origin</span> + <span class="string">&quot;---&quot;</span> + results[<span class="number">1</span>].<span class="property">data</span>.<span class="property">origin</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>简单来说, 就是使用axios的all方法。axios.all()<br>在里面传入一个数组, axios.all([])<br>数组中是若干个axios请求, axios.all([axios(),axios()…])<br>在最后的then方法中获取所有的返回结果。axios.all([axios(),axios()…]).then(results)</p>
<p><strong>但是直接获取results, 对数据操做时results[0],results[1].并不方便</strong>。<strong>axios提供一个方法, 我们在then中不传入results, 而是传入一个axios的spread方法</strong>。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  axios.<span class="title function_">all</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">url</span>:<span class="string">&quot;https://httpbin.org/ip&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>:<span class="string">&quot;get&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">url</span>:<span class="string">&quot;https://httpbin.org/post&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  ]).<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">res1,res2</span>) =&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="property">data</span>.<span class="property">origin</span> + <span class="string">&quot;---&quot;</span> + res2.<span class="property">data</span>.<span class="property">origin</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="axios全局配置"><a href="#axios全局配置" class="headerlink" title="axios全局配置"></a>axios全局配置</h3><p>在接口的请求操作中, 通常url前面有很长一段地址是重复的, 另外, 也有可能设置一些都会用到的属性。比如请求超时时间等。此时, 我们就可以配置全局的通用设置。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;https://httpbin.org/&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">5000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//......等等, 全局配置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  axios.<span class="title function_">all</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">url</span>:<span class="string">&quot;ip&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>:<span class="string">&quot;get&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">url</span>:<span class="string">&quot;post&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  ]).<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">res1,res2</span>) =&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="property">data</span>.<span class="property">origin</span> + <span class="string">&quot;---&quot;</span> + res2.<span class="property">data</span>.<span class="property">origin</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="axios的实例"><a href="#axios的实例" class="headerlink" title="axios的实例"></a>axios的实例</h3><p>前三节的方法都是在使用全局的axios和配置, 比如全局的baseURL配置等, 但是在实际项目中, 可能我们请求的地址不仅仅来源于一个服务器。那么这个全局配置的baseURL就不那么合适了, 所以通常我们会通过创建axios的实例来解决这种问题。而不是使用全局的axios配置。</p>
<figure class="highlight js"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> axiosInstance = axios.<span class="title function_">create</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">baseURL</span>:<span class="string">&quot;https://httpbin.org/&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">timeout</span>:<span class="number">5000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//直接使用实例进行接口请求操作。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">axiosInstance</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">url</span>:<span class="string">&quot;ip&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">origin</span> )</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>(76)vue项目中axios的封装</title>
    <url>/blog/vue2/76/</url>
    <content><![CDATA[<hr>
<h3 id="vue项目中axios的封装"><a href="#vue项目中axios的封装" class="headerlink" title="vue项目中axios的封装"></a>vue项目中axios的封装</h3><p>在vue项目开发中, 必然存在着”无数”的组件, 很多组件都存在网络请求。如果在每个组件中都单独处理各自的网络请求, 那么组件对第三方框架的依赖就太重了。当我们对第三方框架有更换需求的时候, 就不得不对每一个组件进行修改。所以, 基于这种思路, 我们可以对axios进行封装后, 再使用。</p>
<p>1.在项目的根目录下创建一个network文件夹, 只要涉及到网络层面的东西都放在里面。<br>2.在文件夹内创建一个request.js文件, 封装操作就在这个文件中进行。</p>
<hr>
<h3 id="方式一：-回调函数"><a href="#方式一：-回调函数" class="headerlink" title="方式一：(回调函数)"></a>方式一：(回调函数)</h3><p>request.js封装</p>
<pre><code>import axios from &#39;axios&#39;

export function request(config, success, failure)&#123;
  //1、创建axios实例
  const instance = axios.create(&#123;
    baseURL:&quot;https://httpbin.org&quot;,
    timeout:5000
  &#125;)
  
  instance(config)
  .then(res =&gt;&#123;
    success(res)
  &#125;)
  .catch(err =&gt;&#123;
    failure(err)
  &#125;)
&#125;
</code></pre>
<p>使用</p>
<pre><code>import &#123;request&#125; from &#39;./network/request.js&#39;
//将封装好的网络处理js导入组件

//使用
request(&#123;
  url:&quot;/ip&quot;
&#125;,res =&gt;&#123;
  console.log(res)
&#125;,err =&gt;&#123;
  console.log(err)
&#125;)
</code></pre>
<hr>
<h3 id="方式二：-回调函数"><a href="#方式二：-回调函数" class="headerlink" title="方式二：(回调函数)"></a>方式二：(回调函数)</h3><pre><code>import axios from &#39;axios&#39;

export function request(config)&#123;
  //1、创建axios实例
  const instance = axios.create(&#123;
    baseURL:&quot;https://httpbin.org&quot;,
    timeout:5000
  &#125;)
  
  instance(config.baseConfig)
  .then(res =&gt;&#123;
    config.success(res)
  &#125;)
  .catch(err =&gt;&#123;
    config.failure(err)
  &#125;)
&#125;
</code></pre>
<p>使用</p>
<pre><code>import &#123;request&#125; from &#39;./network/request.js&#39;
//将封装好的网络处理js导入组件

//使用
request(&#123;
  baseConfig:&#123;
    url:&quot;/ip&quot;
  &#125;,
  success:function(res)&#123;
    console.log(res)
  &#125;,
  failure:function(err)&#123;
    console.log(err)
  &#125;
&#125;)
</code></pre>
<h3 id="方式三：-ES6的Promise"><a href="#方式三：-ES6的Promise" class="headerlink" title="方式三：(ES6的Promise)"></a>方式三：(ES6的Promise)</h3><pre><code>import axios from &#39;axios&#39;

export function request(config)&#123;
  return new Promise((resolve, reject) =&gt; &#123;
    
    //1、创建axios实例
    const instance = axios.create(&#123;
      baseURL:&quot;https://httpbin.org&quot;,
      timeout:5000
    &#125;)
    
    instance(config)
    .then(res =&gt;&#123;
      resolve(res)
    &#125;)
    .catch(err =&gt;&#123;
      reject(err)
    &#125;)
    
  &#125;)
&#125;
</code></pre>
<p>使用</p>
<pre><code>import &#123;request&#125; from &#39;./network/request.js&#39;
//将封装好的网络处理js导入组件

//使用
request(&#123;
  url:&quot;/ip&quot;
&#125;).then(res =&gt;&#123;
  console.log(res)
&#125;).catch(err =&gt;&#123;
  console.log(err)
&#125;)
</code></pre>
<h3 id="方式四：-axios本身支持Promise的特性"><a href="#方式四：-axios本身支持Promise的特性" class="headerlink" title="方式四：(axios本身支持Promise的特性)"></a>方式四：(axios本身支持Promise的特性)</h3><p><strong>推荐使用！</strong><br>如果更换其他的网络请求框架时, 只要使用使用方式三的方法替换即可。而不需要对组件内部的请求做出更改</p>
<pre><code>import axios from &#39;axios&#39;

export function request(config)&#123;

  //1、创建axios实例
  const instance = axios.create(&#123;
    baseURL:&quot;https://httpbin.org&quot;,
    timeout:5000
  &#125;)
  
  return instance(config)
    
&#125;
</code></pre>
<p>使用</p>
<pre><code>import &#123;request&#125; from &#39;./network/request.js&#39;
//将封装好的网络处理js导入组件

//使用
request(&#123;
  url:&quot;/ip&quot;
&#125;).then(res =&gt;&#123;
  console.log(res)
&#125;).catch(err =&gt;&#123;
  console.log(err)
&#125;)
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>(77)axios拦截器的使用</title>
    <url>/blog/vue2/77/</url>
    <content><![CDATA[<hr>
<h3 id="axios拦截器的使用"><a href="#axios拦截器的使用" class="headerlink" title="axios拦截器的使用"></a>axios拦截器的使用</h3><p>axios提供了拦截器, 用于在每次发送请求后或者请求得到响应后, 进行响应的处理。包括：请求成功拦截、请求失败拦截、响应成功拦截、响应失败拦截。</p>
<p><strong>请求成功拦截和请求失败拦截</strong>。</p>
<pre><code>import axios from &#39;axios&#39;

export function request(config)&#123;

  //1、创建axios实例
  const instance = axios.create(&#123;
    baseURL:&quot;https://httpbin.org&quot;,
    timeout:5000
  &#125;)
  //2、请求拦截
  instance.interceptors.request.use(config =&gt; &#123;
    //请求成功拦截, 拦截的内容就是发送网络请求时的config, 包括请求地址, 超时时间, header等信息。
    //为什么需要请求成功的拦截呢？
    //(1)当我们的请求信息config, 有一些不符合服务器的要求时, 我们可以在此处进行更改
    //(2)或者判断某些请求地址时, 我们需要做特殊操作, 比如添加携带token。
    //(3)或者当我们希望在请求成功时, 在请求处显示一个loading图标。
    console.log(config)
    //既然有拦截操作, 就必须有返回操作
    //否则拦截了网络请求信息不返回, axios在进行网络请求时
    //就无法得到网络请求信息, 导致请求失败, 就会进入请求失败的拦截器中(前提是做了请求失败拦截！)
    //除非不拦截, 拦截了就要返回！
    return config
  &#125;, err =&gt; &#123;
    //请求失败拦截
  &#125;)
  //3、发送真正的网络请求
  return instance(config)
    
&#125;
</code></pre>
<p><strong>响应成功拦截和响应失败拦截</strong>。</p>
<pre><code>import axios from &#39;axios&#39;

export function request(config)&#123;

  //1、创建axios实例
  const instance = axios.create(&#123;
    baseURL:&quot;https://httpbin.org&quot;,
    timeout:5000
  &#125;)
  //2、响应拦截
  instance.interceptors.response.use(res =&gt; &#123;
    //这里拦截到的res是, 从服务器请求成功后返回的结果。
    console.log(res)
    //与请求拦截一样, 返回结果被拦截了, 也必须返回, 否则, success就不能拿到res结果。
    return res.data
    //只有res.data是服务器返回的信息, 其他信息都是axios自动加的。
  &#125;, err =&gt; &#123;
    //服务器响应失败
    console.log(err)
  &#125;)
  //3、发送真正的网络请求
  return instance(config)
    
&#125;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>(78)封装与取消请求</title>
    <url>/blog/vue2/78/</url>
    <content><![CDATA[<hr>
<h3 id="请求封装与请求取消"><a href="#请求封装与请求取消" class="headerlink" title="请求封装与请求取消"></a>请求封装与请求取消</h3><p>request.js封装</p>
<pre><code>//导入axios
import axios from &quot;axios&quot;

// 全局定义一个存放取消请求的标识
window.axiosCancel = [] 

//创建axios个例(实例)
const instance = axios.create(&#123;
  baseURL: &quot;/api&quot;, //vue.config.js中跨域配置用到
  timeout: 5000
&#125;)

//拦截器 - 请求拦截
instance.interceptors.request.use(config =&gt; &#123;
  
  //给每次请求实例化一个 取消请求的方法, 并将其保存至window.axiosCancel全局数组中。
  config.cancelToken = new axios.CancelToken(cancel =&gt; &#123;
    window.axiosCancel.push(&#123;
      cancel
    &#125;)
  &#125;)
  return config
&#125;, err =&gt; &#123;
  return Promise.reject(err)
&#125;)

//拦截器 - 响应拦截
instance.interceptors.response.use(res =&gt; &#123;
  let reses = res.data
  return reses
&#125;, err =&gt; &#123;
  return Promise.reject(err)
&#125;)

//导出个例(实例)
export &#123;instance&#125;
</code></pre>
<p>api.js</p>
<pre><code>//将request.js导入
import &#123;instance&#125; from &#39;./request.js&#39;

//前面定义的全局window.axiosCancel, 无差别取消所有请求。
const cancel = msg =&gt; &#123;
  let cancelArr = window.axiosCancel
  cancelArr.forEach((ele, index) =&gt; &#123;
    // 在失败函数中返回这里自定义的错误信息
    ele.cancel(msg) 
    delete window.axiosCancel[index]
  &#125;)
&#125;

//请求列表
const GetAllList = () =&gt; instance.get(&#39;/apiurl&#39;)

//请求详细信息
const GetSubject = (SubjectId) =&gt; instance.get(&#39;/apiurl&#39;)

//导出所有网络请求api, 以及取消所有请求的cancel方法。
export &#123;GetAllList, GetSubject, cancel&#125;
</code></pre>
<p>在组件中的使用。</p>
<pre><code>&lt;template&gt;
  &lt;div class=&quot;page&quot;&gt;

  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  //用到什么请求, 就导入什么请求。
  import &#123;GetAllList, cancel&#125; from &#39;../network/api.js&#39;
  export default &#123;
    name: &#39;Home&#39;,
    data() &#123;
      return &#123;
      &#125;
    &#125;,
    methods: &#123;
      initList() &#123;
        //在请求之前, 取消前面所有未完成的请求。
        cancel()
        //发起新的请求
        GetAllList().then(res =&gt; &#123;
          console.log(res)
        &#125;).catch(err =&gt; &#123;
          console.log(err)
        &#125;)
      &#125;
    &#125;
  &#125;
&lt;/script&gt;

&lt;style scoped&gt;

&lt;/style&gt;
</code></pre>
<hr>
<h3 id="跨域配置-开发"><a href="#跨域配置-开发" class="headerlink" title="跨域配置(开发)"></a>跨域配置(开发)</h3><p>在项目根目录下新建一个vue.config.js</p>
<pre><code>module.exports = &#123;
  devServer: &#123;
    proxy: &#123;
      &#39;/api&#39;: &#123;
        // 将request.js中baseURL的 /api 替换成 通用地址
        target: &#39;api前面的通用地址&#39;,
        // 允许跨域
        changeOrigin: true,
        ws: true,
        pathRewrite: &#123;
          &#39;^/api&#39;: &#39;&#39;
        &#125;
      &#125;
    &#125;
  &#125;
&#125;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>(79)项目划分目录结构</title>
    <url>/blog/vue2/79/</url>
    <content><![CDATA[<hr>
<h3 id="项目划分目录结构"><a href="#项目划分目录结构" class="headerlink" title="项目划分目录结构"></a>项目划分目录结构</h3><p><strong>在项目开始之前, 需要创建项目</strong>。</p>
<pre><code>#后面都用CLI3创建项目
存放项目的文件夹(路径中最好不要有中文)&gt;vue create testproject

? Please pick a preset: Manually select features
? Check the features needed for your project:
  (*) Choose Vue version
  (*) Babel
  ( ) TypeScript
  ( ) Progressive Web App (PWA) Support
  (*) Router
&gt; (*) Vuex
  ( ) CSS Pre-processors
  ( ) Linter / Formatter
  ( ) Unit Testing
  ( ) E2E Testing

#.....
#创建完毕
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-124.png" alt="vue2-124"></p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-125.png" alt="vue2-125"></p>
<p><strong>在项目开始开发之前, 就可以对项目进行目录结构进行划分了</strong>。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-126.png" alt="vue2-126"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(8)动态绑定style</title>
    <url>/blog/vue2/8/</url>
    <content><![CDATA[<hr>
<h3 id="动态绑定style对象语法"><a href="#动态绑定style对象语法" class="headerlink" title="动态绑定style对象语法"></a>动态绑定style对象语法</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;font-size&#x27;:&#x27;20px&#x27;,&#x27;font-weight&#x27;:&#x27;bold&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize:&#x27;20px&#x27;,fontWeight:&#x27;bold&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>: <span class="string">&quot;hello world！&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>注意<strong>这两种写法</strong>, 属性名为一般css写法时, 需要加单引号, 否则会被当作变量(编译查询变量时, 就会出错)。如果为驼峰式写法时(跟js控制样式的写法一致), 不需要加单引号。<br>属性值都需要加引号。当然不加引号时, 属性也可以作为一个变量传递。如下……</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize:finalFontSise,fontWeight:&#x27;bold&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize:finalFontSise1 + &#x27;px&#x27;,fontWeight:&#x27;bold&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>: <span class="string">&quot;hello world！&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">finalFontSise</span>:<span class="string">&quot;20px&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">finalFontSise1</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>作为完整属性值时, 变量finalFontSise应该为字符串, 可直接使用变量<br>作为部分属性值时, 则需要根据情况, 如finalFontSise1为数值类型, 通过 + ‘px’ 表达式的方式, 也可以将属性值隐式转换为字符串类型。</p>
<hr>
<h3 id="动态绑定style数组语法"><a href="#动态绑定style数组语法" class="headerlink" title="动态绑定style数组语法"></a>动态绑定style数组语法</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[setColor,setFontSize,setWeight]&quot;</span>&gt;</span>&#123;&#123;Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Msg</span>: <span class="string">&quot;hello world！&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">setColor</span>:&#123;<span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">setFontSize</span>:&#123;<span class="attr">fontSize</span>:<span class="string">&#x27;20px&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">setWeight</span>:&#123;<span class="attr">fontWeight</span>:<span class="string">&#x27;bold&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>与前面将的class动态绑定一样, style对象|数组语法也可以通过methods或者computed方法返回(不做赘述)。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(80)基础css样式</title>
    <url>/blog/vue2/80/</url>
    <content><![CDATA[<hr>
<h3 id="基础css样式"><a href="#基础css样式" class="headerlink" title="基础css样式"></a>基础css样式</h3><p><strong>不同的html标签在不同的浏览器会有不同的表现, 比如input, 所以在此之前, 我们需要对 这些标签做一致性处理</strong>。在GitHub中就已经有人写了一个normalize.css。</p>
<p><a href="https://github.com/necolas/normalize.css">normalize.css</a></p>
<p>很多公司的项目都在用。我们可以下载normalize.css将它放到我们的项目中(src&#x2F;assets&#x2F;css&#x2F;normalize.css)。除了第三方的css以外, 我们还需要新建一个自己的css文件, base.css, 定义css变量, 对全局的样式做一个设定。</p>
<p><strong>base.css</strong></p>
<pre><code>@import url(&#39;~assets/css/normalize.css&#39;);

/* :root获取根元素  --&gt;  即html */
:root &#123;
  --color-text: #666;
  --color-high-text: #ff5777;
  --color-tint: #ff8198;
  --color-background: #fff;
  --font-size: 14px;
  --line-height: 1.5;
  /* css中定义变量 */
&#125;
/* 在使用时 比如 color: var(--color-text) */

*,
*::before,
*::after &#123;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
&#125;

body &#123;
  font-family: &quot;Helvetica&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;微软雅黑&quot;, Arial, sans-serif;
  user-select: none; /*禁止用户鼠标在页面上选中文字、图片等*/
  -webkit-tap-highlight-color: transparent; /*webkit是苹果浏览器引擎, tap点击, highlight背景高亮, color颜色, 颜色用数值调节*/
  background: var(--color-background);
  color: var(--color-text);
  width: 100vw; //这个1vw表示窗口的1%,  不同于直接设置宽度为100%, 这个是相对于父级元素来说的。vw是页面的整个可视区域。
&#125;

a &#123;
  color: var(--color-text);
  text-decoration: none;
&#125;

.clear-fix&#123;
  zoom: 1;
&#125;

.clear-fix::after &#123;
  clear: both;
  content: &#39;&#39;;
  display: block;
&#125;

.left&#123;
  float: left;
&#125;

.right&#123;
  float: right;
&#125;
</code></pre>
<p>然后在App.vue中引入这个base.css</p>
<pre><code>&lt;style&gt;
  @import url(&quot;~assets/css/base.css&quot;);
&lt;/style&gt;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(81)vue-clie3的vue.config.js</title>
    <url>/blog/vue2/81/</url>
    <content><![CDATA[<hr>
<h3 id="vue-clie3的vue-config"><a href="#vue-clie3的vue-config" class="headerlink" title="vue-clie3的vue.config"></a>vue-clie3的vue.config</h3><p>前面我们知道CLI2创建的项目, 我们可以很简单的找到webpack.config文件, 对项目配置进行修改。 但是在CLI3创建的项目中, 配置文件被隐藏起来了, 而且一般也不推荐直接在配置文件中, 对配置进行修改。 CLI3提供了一种方法, 就是在项目中新建一个vue.config.js文件, 需要修改或配置的东西在这个文件里设置。 最终也会被合并到配置文件中。<br>CLI2别名配置详见：webpack详解-最后一个知识点</p>
<p><code>vue.config.js</code>。</p>
<pre><code>module.exports = &#123;
  configureWebpack: &#123;
    resolve: &#123;
      //extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],项目也已经默认配置过了
      alias: &#123; //在CLI3中配置, 可以直接使用已配置的别名@, 因为项目创建时已自动创建了该别名, 对应src文件夹
        &#39;assets&#39;: &#39;@/assets&#39;,
        &#39;common&#39;: &#39;@/common&#39;,
        &#39;components&#39;: &#39;@/components&#39;,
        &#39;network&#39;: &#39;@/network&#39;
      &#125;
    &#125;
  &#125;
&#125;

//在标签中引用时, 需要在前面加~
...
&lt;img src=&quot;~assets/logo.png&quot; /&gt;
...

//import组件也是直接写就可以了。
import Home from &quot;components/home&quot;
</code></pre>
<hr>
<h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><p>editorconfig是项目中, 代码风格的设置, 在CLI3中, 默认已经不再创建这个文件了, 但并不代表不需要,  尤其是在多人开发的项目中, 各人的开发风格不一致, 比如Tab缩进等, 项目会显得凌乱。可以将创建的CLI2项目中的.editorconfig文件复制过来。</p>
<pre><code>root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
</code></pre>
<p><strong>至此, 新项目的前期配置工作就做完了。接下来就可以开始项目开发了</strong>。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(82)记录:事件总线</title>
    <url>/blog/vue2/82/</url>
    <content><![CDATA[<hr>
<h3 id="记录-事件总线"><a href="#记录-事件总线" class="headerlink" title="记录:事件总线"></a>记录:事件总线</h3><p>非父子组件事件监听及响应。</p>
<p>在main.js中定义。</p>
<pre><code>Vue.prototype.$bus = new Vue()
</code></pre>
<p>在某组件中发射事件</p>
<pre><code>this.$bus.$emit(&#39;customEvent&#39;)
</code></pre>
<p>其他组件中监听事件</p>
<pre><code>data()&#123;
  return &#123;
    customEventListener:null
  &#125;
&#125;,
mounted() &#123;
  this.customEventListener = () =&gt; &#123;
    console.log(&#39;监听成功&#39;)
  &#125;
  //监听
  this.$bus.$on(&#39;customEvent&#39;, this.customEventListener)
&#125;,
deactivated()&#123;
  //取消监听
  this.$bus.$off(&#39;customEvent&#39;, this.customEventListener)
&#125;
</code></pre>
<p>使用情形, 发射事件的组件和监听事件的组件相隔太远。又是非父子组件通信。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(83)记录:防抖函数</title>
    <url>/blog/vue2/83/</url>
    <content><![CDATA[<hr>
<h3 id="记录-防抖函数"><a href="#记录-防抖函数" class="headerlink" title="记录:防抖函数"></a>记录:防抖函数</h3><p>拓展：防抖debounce&#x2F;节流throttle, 一些操作可能造成请求过于频繁。这个时候我们就需要对该请求加以限制, 如果它在一定时间内都是请求的同一操作, 只执行最后一次。这就是防抖操作。</p>
<pre><code>//防抖函数封装

debounce(func, delay)&#123;
  
  let timer = null
  
  return function(...args)&#123;
    
    if (timer) clearTimeout(timer)
    
    timer = setTimeout(() =&gt; &#123;
      func.apply(this, args)
    &#125;, delay)
    
  &#125;
  
&#125;
</code></pre>
<p>将要多次执行的函数, 传入debounce中, 它会返回一个新的函数。而这个新的函数并不会立即执行, 而是延迟执行。如果在执行之前, 又有新的函数传入。它就会清除延迟函数, 重新返回一个延迟执行的函数, 依次往复。</p>
<pre><code>const lastfunc = debounce(传入需要多次执行的函数/注意不要加小括号, 500)  //延迟验证为500毫秒
lastfunc() //然后在需要多次执行函数的地方执行
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(84)记录:mixin混入</title>
    <url>/blog/vue2/84/</url>
    <content><![CDATA[<hr>
<h3 id="记录-mixin混入"><a href="#记录-mixin混入" class="headerlink" title="记录:mixin混入"></a>记录:mixin混入</h3><p>当很多组件都有一样的变量或方法时, 可以将这些变量或方法统一放到一个js文件中, 专门用于存放这些公共变量和方法。</p>
<p>新建一个mixin.js文件, 专门用于存放混入数据。</p>
<pre><code>export const mixin1 = &#123;
  data() &#123;
    return &#123;

    &#125;
  &#125;,
  components: &#123;

  &#125;,
  methods: &#123;

  &#125;,
  mounted()&#123;

  &#125;

  //......
&#125;
</code></pre>
<p>在组件中使用</p>
<pre><code>import &#123;mixin1&#125; from &#39;mixin.js&#39;
...
data()&#123;
  return &#123;
    
  &#125;
&#125;,
mixinx: [mixin1],
methods: &#123;
  
&#125;
...
//这样在组件中, 就会将mixin.js中定义的mixin1, 混入组件数据中。将其合并。
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(85)记录:fastclick</title>
    <url>/blog/vue2/85/</url>
    <content><![CDATA[<hr>
<h3 id="记录-fastclick"><a href="#记录-fastclick" class="headerlink" title="记录:fastclick"></a>记录:fastclick</h3><p><strong>为什么需要fastclick</strong>？</p>
<p><strong>移动端300毫秒延迟：</strong>在正常情况下, 如果不进行特殊处理, 移动端在触发点击事件时,  会有300ms的延迟。换句话说, 当我们在点击移动端页面后不会立即做出反应,  而是会等待300ms才会触发click事件。在移动web兴起初期,  用户对300ms的延迟没有太大的感觉, 但随着用户对交互体验的要求的提高,  如今, 移动端的300ms延迟严重影响了用户体验。</p>
<p><strong>300毫秒延迟的由来：</strong>07年, 苹果公司发布首款Iphone前夕, 遇到一个问题： 当时的网站都是为大屏设计, 手机屏幕太小无法正常浏览, 于是苹果工程师做了一些约定解决此类问题。 这些约定当中, 最为有名的是双击缩放(double tap to zoom),这是产生300ms延迟的根源。 用手指在屏幕上快速点击两次, iOS 自带的 Safari 浏览器会将网页缩放至原始比例。如果用户在 iOS Safari 里边点击了一个链接。由于用户可以进行双击缩放或者双击滚动的操作, 当用户一次点击屏幕之后,  浏览器并不能立刻判断用户是确实要打开这个链接, 还是想要进行双击操作。因此, iOS Safari 就等待 300 毫秒, 以判断用户是否再次点击了屏幕。 鉴于iPhone的成功,  其他移动浏览器都复制了 iPhoneSafari 浏览器的多数约定, 包括双击缩放,  几乎现在所有的移动端浏览器都有这个功能。 由此产生了300ms延迟问题。</p>
<hr>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><pre><code>//禁用缩放user-scalable=no
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,user-scalable=no&quot; /&gt;

//user-scalable=no表明这个页面不可缩放, 也就是浏览器禁用的双击缩放事件并且同时会去掉300ms点击延迟。
//但这个方案也有缺点, 就是完全禁用了双击缩放, 当我们需要放大文字或者图片时无法满足我们的需求。
</code></pre>
<hr>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><pre><code>//模块化使用
npm install fastclick --save

//在main.js中
import FastClick from &quot;fastclick&quot;
FastClick.attach(document.body)
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(86)记录:图片lazy-load</title>
    <url>/blog/vue2/86/</url>
    <content><![CDATA[<hr>
<h3 id="图片lazy-load"><a href="#图片lazy-load" class="headerlink" title="图片lazy-load"></a>图片lazy-load</h3><p>图片lazy-load, 就是只有在设备的可视窗口内, 图片才会开始加载。而在设备的可视窗口外的内容, 不会加载。以此加快页面的加载速度, 同时也不会因为加载用户并不会浏览的区域而浪费无谓的流量和性能。</p>
<hr>
<h3 id="vue-lazyload"><a href="#vue-lazyload" class="headerlink" title="vue-lazyload"></a>vue-lazyload</h3><p>vue-lazyload可以实现图片的懒加载。因为页面在运行时, 也需要。所以安装时应该使用运行时依赖安装–save</p>
<p>运行时依赖<br>npm install vue-lazyload –save</p>
<pre><code>//在main.js中 导入
import VueLazyLoad from &quot;vue-lazyload&quot;
//通过Vue.use安装, 即可使用。
Vue.use(VueLazyLoad)
</code></pre>
<p>当然安装时, 还可以传入一些参数</p>
<pre><code>import VueLazyLoad from &quot;vue-lazyload&quot;
Vue.use(VueLazyLoad, &#123;
  preLoad: 1.3,
  error: require(&#39;./assets/img/error.png&#39;),
  loading: require(&#39;./assets/img/loadding.gif&#39;),
  attempt: 1
&#125;)
</code></pre>
<p>使用</p>
<pre><code>&lt;!-- 在图片的src位置, 就要修改成 --&gt;
&lt;img v-lazy=&quot;url&quot; /&gt;
</code></pre>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(87)记录:记录:px转化为vw转化插件</title>
    <url>/blog/vue2/87/</url>
    <content><![CDATA[<hr>
<h3 id="记录-px转化为vw转化插件"><a href="#记录-px转化为vw转化插件" class="headerlink" title="记录:px转化为vw转化插件"></a>记录:px转化为vw转化插件</h3><p><strong>这类工具可能是一个插件或者loader,  这种工具不必纠结, 它是开发时依赖, 直接搜索可用的就可以了</strong>。</p>
<pre><code>#插件：postcss-px-to-viewport
npm install postcss-px-to-viewport --save-dev
</code></pre>
<p>postcss.config.js</p>
<pre><code>//项目根文件夹下, 有个postcss.config.js, 中配置。
module.exports = &#123;
  plugins: &#123;
    autoprefixer: &#123;&#125;,
    &quot;postcss-px-to-vuewport&quot;: &#123;
      viewportWidth: 375, //视窗宽度, 对应设计稿的宽度
      viewportHeight: 667, //视窗高度, 对应设计稿的高度(也可以不配置)
      unitPrecision: 5, //制定px转换为vw的小数位数(很多时候无法取整)
      viewportUnit: &#39;vw&#39;, //制定需要转换成的视窗单位, 建议使用vw
      selectorBlackList: [&#39;ignore&#39;, &#39;tab-bar&#39;, &#39;tab-bar-item&#39;], //指定不需要转换的类(className)
      //但是每一个都要手动写上去的话, 很麻烦, 可以在元素的class=&quot;ignore&quot; 加上ignore就可以了。
      //注意：无论是添加类名, 或者ignore, 它们都不包括该样式下的子元素。
      //可以按照组件文件进行添加排除。添加配置exclude: [/组件的文件名/]..感觉不好用呢。
      
      minPixerValue: 1, //小于等于1px不转换为vw
      mediaQuery: false //允许在媒体查询中转换px
    &#125;
  &#125;
&#125;
</code></pre>
<p><strong>有时间自行研究一下, 记录这个主要是说明有这样的东西, 可以做这样的事情。</strong></p>
<p>除此之外还有px2rem等插件&#x2F;loader</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(88)记录:服务器配置问题</title>
    <url>/blog/vue2/88/</url>
    <content><![CDATA[<hr>
<h3 id="服务器配置问题"><a href="#服务器配置问题" class="headerlink" title="服务器配置问题"></a>服务器配置问题</h3><p><strong>服务器也是一台电脑, 没有显示器, 主机24小时开机</strong>。很多公司都没有自己的服务器主机。一般都是租用云主机。 主机都要安装操作系统, 无论是自有还是购买,  都可以选择安装什么操作系统windows&#x2F;Linux。一般装Linux的会比较多一点(Linux也有图形化界面的系统版本Linux Ubuntu。Linux Ubuntu一般用于学习, 比较稳定的一般是装Linux centos) , 如果公司是C# .net开发的话, 也有很多装windows的。在操作系统中, 还会安装如tomcat&#x2F;nginx, 平时也称之为服务器。 它是为用户提供服务的一种软件。</p>
<p>我们的项目在开发完毕后, 可以编译打包, 在正式部署运行之前,  我们可能还需要, 对项目进行, 模拟的线上测试。这个时候, 我们可以将自己的电脑 , 部署成服务器进行测试。</p>
<hr>
<h3 id="windows安装nginx"><a href="#windows安装nginx" class="headerlink" title="windows安装nginx"></a>windows安装nginx</h3><p>1、官网下载<a href="https://nginx.org/">nginx</a></p>
<pre><code>2021-08-19 unit-1.25.0 version has been released, featuring SSL/TLS session cache and ticket controls, originating IP identification, manual application restart, and a number of bugfixes.
2021-07-06 nginx-1.21.1 mainline version(**表示主力在做的版本, 可以说是开发版, 不够稳定**) has been released.
2021-06-29 njs-0.6.1 bugfix version has been released.
2021-06-15 njs-0.6.0 version has been released, featuring let and const variable declaration support.
2021-05-27 unit-1.24.0 version has been released, featuring SSL/TLS configuration commands; static file chrooting with symlink and mount resolution control; static file filtering by MIME type; other features and a couple of bugfixes.
2021-05-25 nginx-1.20.1 stable and nginx-1.21.0 mainline versions have been released, with a fix for the 1-byte memory overwrite vulnerability in resolver (CVE-2021-23017).
2021-04-20 nginx-1.20.0 stable version(**一般使用稳定版, 生产环境使用, 点击版本进去还可以选择, 稳定版的windows版本下载**) has been released, incorporating new features and bug fixes from the 1.19.x mainline branch — including OCSP validation of client SSL certificates, the ssl_reject_handshake and ssl_conf_command directives, simplified and improved handling of HTTP/2 connections with the lingering_close, keepalive_timeout, and keepalive_requests directives, the keepalive_time directive, stricter handling of upstream server responses, cookie flags handling, cache clearing based on the minimum amount of free space, PROXY protocol support from clients and to backend servers in the mail proxy, proxying SMTP authentication, the set directive in the stream module, and more.
2021-04-13 nginx-1.19.10 mainline version has been released.
........
</code></pre>
<p>2、将下载的压缩包解压(解压后路径, 不要有中文), 双击运行里面的nginx.exe, 启动服务<br>3、在浏览器输入localhost, 查看启动状态。如果页面打开显示, welcome to nginx, 说明服务启动成功了。 它访问的页面就是nginx.exe所在目录的html文件夹下的, index.html页面。</p>
<p>这个时候, 就可以将我们打包编译后的文件。dist文件夹内的文件复制到, nginx.exe所在目录的html文件夹下。这时访问localhost地址, 就是我们的项目页面了。问题！因为我们使用的是h5的history对页面进行路由跳转。刷新页面它会提示找不到页面。 在下面继续配置, try_files $uri $uri&#x2F; @router;</p>
<p>另外也可以将整个dist文件夹复制到, nginx.exe所在目录。然后修改, conf文件夹下的, nginx.conf配置文件, (如果nginx.exe在运行中, 修改配置需要重启nginx.exe(nginx -s reload))。在里面找到server-location-root位置, 将html文件夹改为dist文件夹就可以了。</p>
<hr>
<h3 id="远程主机-Linux-centos-安装nginx"><a href="#远程主机-Linux-centos-安装nginx" class="headerlink" title="远程主机(Linux centos)安装nginx"></a>远程主机(Linux centos)安装nginx</h3><p>与在windows下载解压启动, 这种简单的步骤不同。在Linux中大多都是在终端中进行操作。<br>1、在Linux终端中输入： yum install nginx<br>2、开启nginx服务： systemctl start nginx.service<br>3、跟随系统启动： systemctl enable nginx.service</p>
<p><strong>要在远程主机上运行那么命令,  我们需要借助工具SecureCRT。下载后运行,  点击connect, 点击new sesstion, 选择ssh版本。 输入远程主机的ip地址, 和目录。添加完成后, 就可以点击连接,  在弹出的窗口输入密码即可连接, 成功后, 就能看见终端了, 输入ls -l可以查看当前目录下的文档。 当然最主要的就可以在此通过终端安装nginx了</strong>。<br>另：远程主机管理工具WinSCP,可视化界面, 传输文件。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(90)响应式原理部分代码实现</title>
    <url>/blog/vue2/90/</url>
    <content><![CDATA[<hr>
<h3 id="响应式原理部分代码实现"><a href="#响应式原理部分代码实现" class="headerlink" title="响应式原理部分代码实现"></a>响应式原理部分代码实现</h3><p>现在我们不使用vue.js,看看响应式实现的原理。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  独立文本节点：&#123;&#123;msg&#125;&#125;</span><br><span class="line">  </span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    标签节点下的文本节点：&#123;&#123;msg&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>标签节点嵌套下的文本节点：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1、保存数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$options</span> = options</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$el</span> = options.<span class="property">el</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 2、将data数据添加到响应式系统中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 3、代理this.$data的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">$data</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">_proxy</span>(key)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 4、处理el</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">new</span> <span class="title class_">Compiler</span>(<span class="variable language_">this</span>.<span class="property">$el</span>, <span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">_proxy</span>(<span class="params">key</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">set</span>(<span class="params">newValue</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$data</span>[key] = newValue</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$data</span>[key]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">data</span> = data</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(<span class="variable language_">this</span>.<span class="property">data</span>, key, data[key])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">defineReactive</span>(<span class="params">data, key, val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//一个属性key, 对应一个Dep对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">set</span>(<span class="params">newValue</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span>(newValue === val)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          val = newValue</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          dep.<span class="title function_">notify</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">subs</span> = []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">addSub</span>(<span class="params">sub</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">notify</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">sub</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        sub.<span class="title function_">update</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">constructor</span>(<span class="params">node, name, vm</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">node</span> = node</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">update</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">update</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// this.node.nodeValue = this.vm[this.name]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// update重写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">switch</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeName</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&quot;#text&quot;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 文本节点除了语法绑定的值, 还有其他文本的情况。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">oldValue</span> === <span class="literal">undefined</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">oldValue</span> = <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>( <span class="string">&quot;&#123;&#123;&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;&#125;&#125;&quot;</span>, <span class="string">&quot;g&quot;</span> )</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeValue</span> = <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">oldValue</span>.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">name</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&quot;INPUT&quot;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">name</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 设置input的默认value值。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">var</span> attr = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&quot;value&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          attr.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">name</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">setAttributeNode</span>(attr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;(.+)\&#125;\&#125;/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//这个el就是#app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">constructor</span>(<span class="params">el, vm</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">frag</span> = <span class="variable language_">this</span>.<span class="title function_">_createFragment</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">el</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">frag</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">_createFragment</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> child</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">while</span> (child = <span class="variable language_">this</span>.<span class="property">el</span>.<span class="property">firstChild</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">_compile</span>(child)  <span class="comment">//解析&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        frag.<span class="title function_">appendChild</span>(child)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> frag</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">_compile</span>(<span class="params">node</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span>(node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123; <span class="comment">// 标签节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/* const attrs = node.attributes</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        if(attrs.hasOwnProperty(&#x27;v-model&#x27;)) &#123; </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">          const name = attrs[&#x27;v-model&#x27;].nodeValue</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">          node.addEventListener(&#x27;input&#x27;, e =&gt; &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            this.vm[name] = e.target.value</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        &#125; */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 标签节点重写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> attrs = node.<span class="property">attributes</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span>(attrs.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;v-model&#x27;</span>)) &#123; <span class="comment">// v-model双向绑定</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> name = attrs[<span class="string">&#x27;v-model&#x27;</span>].<span class="property">nodeValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">new</span> <span class="title class_">Watcher</span>(node, name, <span class="variable language_">this</span>.<span class="property">vm</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">vm</span>[name] = e.<span class="property">target</span>.<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;<span class="keyword">else</span>&#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 其他标签节点下的值绑定。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 教程中, 如果用标签将input或者&#123;&#123;&#125;&#125;包裹, 会出错, 这里需要判断标签嵌套的情况。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;node.<span class="property">childNodes</span>.<span class="property">length</span>;i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="title function_">_compile</span>(node.<span class="property">childNodes</span>[i])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span>(node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123; <span class="comment">// 文本节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span>(reg.<span class="title function_">test</span>(node.<span class="property">nodeValue</span>)) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="title function_">trim</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">new</span> <span class="title class_">Watcher</span>(node, name, <span class="variable language_">this</span>.<span class="property">vm</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;仅支持：&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1、mustache语法值绑定, 一个标签内只能绑定一个值&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2、v-model双向绑定。你可以在此处尝试修改app.msg的值&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(9)计算属性computed</title>
    <url>/blog/vue2/9/</url>
    <content><![CDATA[<hr>
<h3 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h3><figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;firstName&#125;&#125;·&#123;&#123;middleName&#125;&#125;·&#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;firstName + &quot;·&quot; + middleName + &quot;·&quot; + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">firstName</span>:<span class="string">&quot;弗拉基米尔&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">middleName</span>:<span class="string">&quot;伊里奇&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lastName</span>:<span class="string">&quot;乌里扬诺夫&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>在我们对data数据进行显示时, 常常需要对数据进行拼接甚至运算。如上, <strong>我们需要获取当前名字的全称</strong></p>
<hr>
<p>但在<strong>实际场景应用</strong>中, 这种直接在html中拼接数据的方式, 并<strong>不利于数据管理</strong>, <strong>也不利于阅读</strong>, 尤其是数据需要在<strong>多处使用</strong>时。此时就可以使用计算属性<strong>computed</strong>实现。<br>当然<strong>methods</strong>方法也可以实现。<code>不过注意</code>在html文档中, <code>调用methods方法</code>。而methods方法中又存在<code>修改data中的变量值的行为</code>, 会<code>导致页面刷新</code>。页面<code>刷新后</code>, 页面调用methods方法的地方, <code>又会再次调用该方法</code>, <code>继续触发修改data变量值的行为</code>, <code>又会再次刷新页面</code>, <code>形成死循环</code>, <code>页面可能会卡死</code>。</p>
<figure class="highlight js"><figcaption><span>vue2</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;link/vue.min.2.6.14.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>methods方法：&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>methods方法：&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#x27;methods方法调用2次, 运行了&#x27; + &#123;&#123;outterCount&#125;&#125; + &#x27;次。&#x27;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>computed计算属性fullName：&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>computed计算属性fullName：&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#x27;computed计算属性调用2次, 运行了&#x27; + &#123;&#123;computedCount&#125;&#125; + &#x27;次。&#x27;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">outterCount</span> = <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">firstName</span>:<span class="string">&quot;弗拉基米尔&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">middleName</span>:<span class="string">&quot;伊里奇&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lastName</span>:<span class="string">&quot;乌里扬诺夫&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//methodsCount: 0,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">computedCount</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">getFullName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//this.methodsCount += 1 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">outterCount</span> += <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot;·&quot;</span> + <span class="variable language_">this</span>.<span class="property">middleName</span> + <span class="string">&quot;·&quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fullName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">computedCount</span> += <span class="number">1</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot;·&quot;</span> + <span class="variable language_">this</span>.<span class="property">middleName</span> + <span class="string">&quot;·&quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>可见：computed计算属性运行了1次, methods方法运行了2次。结论：computed计算属性只会运行一次(除非其计算的data数据发生变化), 同时会存在缓存, 多次调用时, 不会多次执行, 直接返回缓存结果。而methods方法, 则是调用几次, 就执行几次, 内存消耗占用较高。</p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(89)vue的响应式原理</title>
    <url>/blog/vue2/89/</url>
    <content><![CDATA[<hr>
<h3 id="vue的响应式原理"><a href="#vue的响应式原理" class="headerlink" title="vue的响应式原理"></a>vue的响应式原理</h3><p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-127.png" alt="vue2-127"></p>
<hr>
<h3 id="Vue内部是如何监听message的数据变化。"><a href="#Vue内部是如何监听message的数据变化。" class="headerlink" title="Vue内部是如何监听message的数据变化。"></a>Vue内部是如何监听message的数据变化。</h3><p>它用到了Object.defineProperty技术, 可以监听对象属性的改变。</p>
<pre><code>&lt;script&gt;
  const obj = &#123;
    message:&quot;hello&quot;
  &#125;
  Object.keys(obj).forEach(key =&gt; &#123;
    //能获取每一个key的值
    let value = obj[key]
    //然后对其进行监听。Object.defineProperty()
    //它需要传三个参数, 对象/监听的key/以及后面的对象
    Object.defineProperty(obj, key, &#123;
      set(newValue)&#123;
        console.log(key + &#39;的数据被改变&#39;)
        value = newValue
      &#125;,
      get()&#123;
        console.log(&#39;你在获取&#39; + key + &#39;的值&#39;)
        return value
      &#125;
    &#125;)
  &#125;)
  console.log(&quot;尝试在控制台获取obj.message的值&quot;)
  console.log(&quot;或者试着修改obj.message的值&quot;)
&lt;/script&gt;
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-128.png" alt="vue2-128"></p>
<hr>
<h3 id="数据发生变化-Vue又是如果通知多-处数据更新-数据可能多处引用"><a href="#数据发生变化-Vue又是如果通知多-处数据更新-数据可能多处引用" class="headerlink" title="数据发生变化, Vue又是如果通知多 处数据更新(数据可能多处引用)"></a>数据发生变化, Vue又是如果通知多 处数据更新(数据可能多处引用)</h3><p>它使用了:发布订阅者模式。</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
  &#123;&#123;message&#125;&#125; //张三
  &#123;&#123;message&#125;&#125; //李四
&lt;/div&gt;

const obj = &#123;
  message:&quot;hello&quot;
&#125;
Object.keys(obj).forEach(key =&gt; &#123;
  let value = obj[key]
  Object.defineProperty(obj, key, &#123;
    set(newValue)&#123;
      value = newValue
      //这里数据发生变化, 就可以告诉绑定数据的地方, 更新数据
      //解析html代码, 获取那些地方使用了属性, 什么时候去解析呢？在get中。
      //也就是哪里在用&#123;&#123;message&#125;&#125;,就告诉哪里。比如那个地方叫：张三/李四
      dep.notify()
    &#125;,
    get()&#123;
      //前面已经测试了, 哪里绑定了数据, 就会调用get获取属性值。
      //那么在get的时候, 我们就记录该处(创建一个新的watcher), 将其作为订阅者。
      return value
      //在修改属性值的时候, 我们会set中通知这些订阅者更新数据。
      //那么这些订阅者也必须有自己的更新方法, update
    &#125;
  &#125;)
&#125;)

//发布者Dependency
class Dep &#123;
  constructor()&#123; //new Dep的时候就会调用构造器constructor
    this.subs = [] //将订阅者subscription保存在数组中。使用下面的addSub方法添加订阅者
  &#125;
  addSub(watcher) &#123; //在添加订阅者时, 这个订阅者就是一个watcher对象
    this.subs.push(watcher)
  &#125;
  notify()&#123; //按照订阅者列表, 挨个儿通知他们, 更新数据
    this.subs.forEach(item =&gt; &#123;
      item.update() //怎么更新呢, 调用这个订阅者自己的update方法
    &#125;)
  &#125;
&#125;
//订阅者
class Watcher &#123;
  constructor(name)&#123;
    this.name = name
  &#125;
  update()&#123;
    //修改view界面中的值
    console.log(this.name + &quot;发生更新&quot;)
  &#125;
&#125;

const dep = new Dep()

const w1 = new Watcher(&#39;张三&#39;) //哪里在使用数据, 就创建一个新的watcher
dep.addSub(w1) //将其作为订阅者, 添加到发布者的订阅者列表中subs(发布者就可以统一通知订阅者数据发生改变)。

const w1 = new Watcher(&#39;李四&#39;)
dep.addSub(w1)
</code></pre>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-129.png" alt="vue2-129"></p>
<hr>
<p><strong>这个时候在来看这个图就好理解多了</strong>。</p>
<p><img src="/blog/../../../../../../../../../../blog/static/blog/md/vue2-130.png" alt="vue2-130"></p>
<hr>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>(2)环境变量</title>
    <url>/blog/windows/2/</url>
    <content><![CDATA[<hr>
<h2 id="系统的环境变量"><a href="#系统的环境变量" class="headerlink" title="系统的环境变量"></a>系统的环境变量</h2><p><strong>path环境变量</strong></p>
<p>在path环境变量中保存的是一个一个的路径, 路径之间使用;隔开。<br>它的作用就是, 当我们在终端中输入一个命令, 或访问一个文件时, 系统会先在当前文件夹中寻找。<br>如果找不到则依次去path的路径下寻找。如果找到则直接使用, 如果没有找到则继续下一个路径寻找。<br>如果所有的路径都没有找到, 则报错。</p>
<p>我们可以将一些常用的文件或程序的路径添加到path下, 这样我们就可以在任意位置来方位这些文件了。</p>
<hr>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>(1)命令行窗口</title>
    <url>/blog/windows/1/</url>
    <content><![CDATA[<hr>
<h2 id="命令行窗口"><a href="#命令行窗口" class="headerlink" title="命令行窗口"></a>命令行窗口</h2><p>命令行窗口：也称, Dos窗口、终端、shell、命令提示符、CMD窗口。</p>
<p>window中运行终端：</p>
<ol>
<li>win键 + r 输入cmd 回车。可以打开终端, 这种打开方式, 一般cmd默认的工作目录, 实在当前用户(window账户)所在目录。</li>
<li>也可以直接打开指定文件夹, 在文件夹路径中, 输入cmd打开终端, 此时的工作目录, 就在该文件夹下。</li>
</ol>
<p>一般常用指令：</p>
<ol>
<li>dir：列出当前目录下的所有文件&#x2F;文件夹。</li>
<li>cd 目录：进入到制定目录中。 .一个点表示当前目录,  ..两个点表示上一级目录。</li>
<li>md 名字：创建一个文件夹。</li>
<li>rd 名字：删除一个文件&#x2F;文件夹。</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>(3)进程和线程</title>
    <url>/blog/windows/3/</url>
    <content><![CDATA[<hr>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p><strong>path环境变量</strong></p>
<p><strong>进程</strong></p>
<p><code>进程负责为程序的运行提供必备的环境、场所。</code>比如一段代码, 一段代码需要运行, 那么就得先将这段代码存到进程里。这个进程就相当于工厂中的车间。</p>
<p><strong>线程</strong></p>
<p><code>线程是计算机中最小的计算单位, 线程负责执行进程中的程序。</code><br>虽然代码运行有了保存的地方, 也就是进程中, 我们还需要线程去具体的执行。就像工厂中已经保存了要加工产品的材料, 也就是保存的待运行的代码。也需要人去操作进行具体的生产。这个生产就是线程。多个人同时生产, 叫多线程, 一个人生产一个才能继续生产下一个, 叫单线程。</p>
<p><strong>js就是单线程</strong></p>
<hr>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
</search>
